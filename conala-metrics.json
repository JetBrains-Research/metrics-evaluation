[{"intent": "How can I send a signal from a python program?", "rewritten_intent": "send a signal `signal.SIGUSR1` to the current process", "snippet": "os.kill(os.getpid(), signal.SIGUSR1)", "question_id": 15080500, "baseline-bleu": 0.1251, "tranx-annot-bleu": 0.1809, "best-tranx-bleu": 0.201, "best-tranx-bleu-rerank": 0.115, "baseline": "os . system ( '<unk>.png' , s = 300 )", "tranx-annot": "sys . signal ( ` signal . SIGUSR1 ` )", "best-tranx": "os . system ( ` signal . SIGUSR1 ` )", "best-tranx-rerank": "os . system ( ` < unk > < unk > < unk > ` )", "meteor-baseline": 0.3003, "meteor-tranx-annot": 0.3758, "meteor-best-tranx": 0.4667, "meteor-best-tranx-rerank": 0.1408, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.5833, "rougel-best-tranx-rerank": 0.2667}, {"intent": "Decode Hex String in Python 3", "rewritten_intent": "decode a hex string '4a4b4c' to UTF-8.", "snippet": "bytes.fromhex('4a4b4c').decode('utf-8')", "question_id": 3283984, "baseline-bleu": 0.4806, "tranx-annot-bleu": 0.534, "best-tranx-bleu": 0.3607, "best-tranx-bleu-rerank": 0.3554, "baseline": "\"\"\"\\\\ascii . decode ( 'utf-8' ) . decode ( 'utf-8' )", "tranx-annot": "print ( 4a4b4c . decode ( ` utf - 8 ` ) . decode ( ` utf - 8 ` ) )", "best-tranx": "print ( 4a4b4c . decode ( ` 4a4b4c ` , ` ignore ` ) )", "best-tranx-rerank": "print ( 4a4b4c . decode ( ` 4a4b4c ` ) )", "meteor-baseline": 0.7871, "meteor-tranx-annot": 0.8136, "meteor-best-tranx": 0.5704, "meteor-best-tranx-rerank": 0.4675, "rougel-baseline": 0.6829, "rougel-tranx-annot": 0.7692, "rougel-best-tranx": 0.6875, "rougel-best-tranx-rerank": 0.6429}, {"intent": "check if all elements in a list are identical", "rewritten_intent": "check if all elements in list `myList` are identical", "snippet": "all(x == myList[0] for x in myList)", "question_id": 3844801, "baseline-bleu": 0.1037, "tranx-annot-bleu": 0.4191, "best-tranx-bleu": 0.1858, "best-tranx-bleu-rerank": 0.1858, "baseline": "[ int ( i ) for i in range ( 100 ) ]", "tranx-annot": "all ( isinstance ( list , my List ) for x in my List )", "best-tranx": "[ i for i in my List if i = = i ]", "best-tranx-rerank": "[ i for i in my List if i = = 2 ]", "meteor-baseline": 0.1911, "meteor-tranx-annot": 0.6088, "meteor-best-tranx": 0.4474, "meteor-best-tranx-rerank": 0.4474, "rougel-baseline": 0.4138, "rougel-tranx-annot": 0.6452, "rougel-best-tranx": 0.5517, "rougel-best-tranx-rerank": 0.5517}, {"intent": "Format string dynamically", "rewritten_intent": "format number of spaces between strings `Python`, `:` and `Very Good` to be `20`", "snippet": "print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))", "question_id": 4302166, "baseline-bleu": 0.0498, "tranx-annot-bleu": 0.1095, "best-tranx-bleu": 0.0813, "best-tranx-bleu-rerank": 0.0813, "baseline": "cursor . execute ( 'INSERT#SPACE#INTO#SPACE#INTO#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>' )", "tranx-annot": "print ( ` \\ n ` . join ( [ str ( int ( x ) ) for x in Python ] ) )", "best-tranx": "` ` ` ` ` ` . join ( str ( x ) for x in str ( Python ) )", "best-tranx-rerank": "` ` ` ` ` ` . join ( str ( x ) for x in str ( Python ) )", "meteor-baseline": 0.0707, "meteor-tranx-annot": 0.1993, "meteor-best-tranx": 0.2601, "meteor-best-tranx-rerank": 0.2601, "rougel-baseline": 0.1194, "rougel-tranx-annot": 0.3137, "rougel-best-tranx": 0.4583, "rougel-best-tranx-rerank": 0.4583}, {"intent": "How to convert a string from CP-1251 to UTF-8?", "rewritten_intent": null, "snippet": "d.decode('cp1251').encode('utf8')", "question_id": 7555335, "baseline-bleu": 0.0773, "tranx-annot-bleu": 0.2959, "best-tranx-bleu": 0.5086, "best-tranx-bleu-rerank": 0.5086, "baseline": "print ( '<unk>#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>' )", "tranx-annot": "` ` ` ` ` ` . join ( chr ( int ( i ) ) for i in 10 ) . encode ( ` utf8 ` )", "best-tranx": "unicodedata . normalize ( ` NFKD ` , string ) . encode ( ` utf8 ` )", "best-tranx-rerank": "unicodedata . normalize ( ` NFKD ` , string ) . encode ( ` utf8 ` )", "meteor-baseline": 0.2329, "meteor-tranx-annot": 0.7096, "meteor-best-tranx": 0.7749, "meteor-best-tranx-rerank": 0.7749, "rougel-baseline": 0.1951, "rougel-tranx-annot": 0.5581, "rougel-best-tranx": 0.75, "rougel-best-tranx-rerank": 0.75}, {"intent": "How I can get rid of None values in dictionary?", "rewritten_intent": "get rid of None values in dictionary `kwargs`", "snippet": "res = {k: v for k, v in list(kwargs.items()) if v is not None}", "question_id": 2544710, "baseline-bleu": 0.397, "tranx-annot-bleu": 0.3877, "best-tranx-bleu": 0.0713, "best-tranx-bleu-rerank": 0.0713, "baseline": "sum ( d , v ) for k , v in list ( d . items ( ) ) )", "tranx-annot": "print ( dict ( ( k , v ) for k , v in kwargs . items ( ) if v ) )", "best-tranx": "list ( kwargs . values ( ) )", "best-tranx-rerank": "list ( kwargs . values ( ) )", "meteor-baseline": 0.5045, "meteor-tranx-annot": 0.6181, "meteor-best-tranx": 0.2969, "meteor-best-tranx-rerank": 0.2969, "rougel-baseline": 0.5778, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.4242, "rougel-best-tranx-rerank": 0.4242}, {"intent": "How I can get rid of None values in dictionary?", "rewritten_intent": "get rid of None values in dictionary `kwargs`", "snippet": "res = dict((k, v) for k, v in kwargs.items() if v is not None)", "question_id": 2544710, "baseline-bleu": 0.4105, "tranx-annot-bleu": 0.7625, "best-tranx-bleu": 0.0345, "best-tranx-bleu-rerank": 0.0345, "baseline": "sum ( d , v ) for k , v in list ( d . items ( ) ) )", "tranx-annot": "print ( dict ( ( k , v ) for k , v in kwargs . items ( ) if v ) )", "best-tranx": "list ( kwargs . values ( ) )", "best-tranx-rerank": "list ( kwargs . values ( ) )", "meteor-baseline": 0.4915, "meteor-tranx-annot": 0.7956, "meteor-best-tranx": 0.2194, "meteor-best-tranx-rerank": 0.2194, "rougel-baseline": 0.6667, "rougel-tranx-annot": 0.8333, "rougel-best-tranx": 0.3636, "rougel-best-tranx-rerank": 0.3636}, {"intent": "Python: how to get the final output of multiple system commands?", "rewritten_intent": "capture final output of a chain of system commands `ps -ef | grep something | wc -l`", "snippet": "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)", "question_id": 14971373, "baseline-bleu": 0.1043, "tranx-annot-bleu": 0.6274, "best-tranx-bleu": 0.4855, "best-tranx-bleu-rerank": 0.4409, "baseline": "soup . find_element_by_css_selector ( 'li.png' , re . compile ( 'unicode_escape' ) )", "tranx-annot": "sys . stdout . capture ( ` ps - ef | grep something | wc - l ` )", "best-tranx": "subprocess . call ( ` ps - ef | grep something | wc - l ` , * * subprocess . check_output ( ` ps - ef | grep something | wc - l ` ) , shell = True )", "best-tranx-rerank": "self . treeview . connect ( ` ps - ef | grep something | wc - l ` , self . ps - ef | grep something | wc - l )", "meteor-baseline": 0.205, "meteor-tranx-annot": 0.7183, "meteor-best-tranx": 0.9126, "meteor-best-tranx-rerank": 0.7129, "rougel-baseline": 0.3, "rougel-tranx-annot": 0.75, "rougel-best-tranx": 0.6774, "rougel-best-tranx-rerank": 0.6038}, {"intent": "splitting and concatenating a string", "rewritten_intent": "concatenate a list of strings `['a', 'b', 'c']`", "snippet": "\"\"\"\"\"\".join(['a', 'b', 'c'])", "question_id": 6726636, "baseline-bleu": 0.4923, "tranx-annot-bleu": 0.575, "best-tranx-bleu": 1.0, "best-tranx-bleu-rerank": 1.0, "baseline": "set ( [ 'a' , 'b' , 'b' ] )", "tranx-annot": "list ( ` [ ` a ` , ` b ` , ` c ` ] ` )", "best-tranx": "` ` ` ` ` ` . join ( [ ` a ` , ` b ` , ` c ` ] )", "best-tranx-rerank": "` ` ` ` ` ` . join ( [ ` a ` , ` b ` , ` c ` ] )", "meteor-baseline": 0.6205, "meteor-tranx-annot": 0.3778, "meteor-best-tranx": 1.0, "meteor-best-tranx-rerank": 1.0, "rougel-baseline": 0.7179, "rougel-tranx-annot": 0.8293, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 1.0}, {"intent": "Finding the intersection between two series in Pandas", "rewritten_intent": "find intersection data between series `s1` and series `s2`", "snippet": "pd.Series(list(set(s1).intersection(set(s2))))", "question_id": 18079563, "baseline-bleu": 0.0778, "tranx-annot-bleu": 0.0923, "best-tranx-bleu": 0.0901, "best-tranx-bleu-rerank": 0.0901, "baseline": "pd . concat ( [ df [ 'A' ] , how = [ 'A' , '<unk>' ] ) )", "tranx-annot": "pd . concat ( pd . concat ( list ( s1 . items ( ) ) , text = s1 . size ( ) ) / list ( s1 . items ( ) ) , key = lambda x : t [ np . isnan ( s2 ) / 1 ] )", "best-tranx": "pd . concat ( [ s1 ] * 5 , ignore_index = True )", "best-tranx-rerank": "pd . concat ( [ s1 ] * 5 , ignore_index = True )", "meteor-baseline": 0.1797, "meteor-tranx-annot": 0.5047, "meteor-best-tranx": 0.1289, "meteor-best-tranx-rerank": 0.1289, "rougel-baseline": 0.2128, "rougel-tranx-annot": 0.4444, "rougel-best-tranx": 0.2941, "rougel-best-tranx-rerank": 0.2941}, {"intent": "Sending http headers with python", "rewritten_intent": "sending http headers to `client`", "snippet": "client.send('HTTP/1.0 200 OK\\r\\n')", "question_id": 8315209, "baseline-bleu": 0.0796, "tranx-annot-bleu": 0.1329, "best-tranx-bleu": 0.0605, "best-tranx-bleu-rerank": 0.0578, "baseline": "soup . find_all ( '?' )", "tranx-annot": "print ( client . decode ( ` ? ` ) [ 0 ] )", "best-tranx": "r = requests . get ( client )", "best-tranx-rerank": "client = requests . get ( client )", "meteor-baseline": 0.2624, "meteor-tranx-annot": 0.2725, "meteor-best-tranx": 0.1471, "meteor-best-tranx-rerank": 0.1176, "rougel-baseline": 0.3846, "rougel-tranx-annot": 0.4375, "rougel-best-tranx": 0.3846, "rougel-best-tranx-rerank": 0.3077}, {"intent": "Python -Remove Time from Datetime String", "rewritten_intent": "Format a datetime string `when` to extract date only", "snippet": "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()", "question_id": 26153795, "baseline-bleu": 0.0454, "tranx-annot-bleu": 0.0388, "best-tranx-bleu": 0.2933, "best-tranx-bleu-rerank": 0.1055, "baseline": "datetime . datetime . now ( )", "tranx-annot": "when . decode ( ` \\ \\ ` )", "best-tranx": "datetime . datetime . strptime ( ` January 11 , 2010 ` , ` % B % d , % Y ` ) . strftime ( ` % a ` )", "best-tranx-rerank": "when . strftime ( ` % m / % d / % Y ` )", "meteor-baseline": 0.1838, "meteor-tranx-annot": 0.1282, "meteor-best-tranx": 0.599, "meteor-best-tranx-rerank": 0.3074, "rougel-baseline": 0.375, "rougel-tranx-annot": 0.3529, "rougel-best-tranx": 0.6429, "rougel-best-tranx-rerank": 0.6}, {"intent": "How do I split a multi-line string into multiple lines?", "rewritten_intent": "split a multi-line string `inputString` into separate strings", "snippet": "inputString.split('\\n')", "question_id": 172439, "baseline-bleu": 0.0214, "tranx-annot-bleu": 0.0931, "best-tranx-bleu": 0.2911, "best-tranx-bleu-rerank": 0.2911, "baseline": "\"\"\"#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPAC", "tranx-annot": "` ` ` ` ` ` . join ( c for c in input String if c . isdigit ( ) )", "best-tranx": "[ s . split ( ` ` ) for s in input String . split ( ` , ` ) ]", "best-tranx-rerank": "[ s . split ( ` ` ) for s in input String . split ( ` , ` ) ]", "meteor-baseline": 0.0658, "meteor-tranx-annot": 0.4282, "meteor-best-tranx": 0.7151, "meteor-best-tranx-rerank": 0.7151, "rougel-baseline": 0.0556, "rougel-tranx-annot": 0.4375, "rougel-best-tranx": 0.5161, "rougel-best-tranx-rerank": 0.5161}, {"intent": "How do I split a multi-line string into multiple lines?", "rewritten_intent": "Split a multi-line string ` a \\n b \\r\\n c ` by new line character `\\n`", "snippet": "' a \\n b \\r\\n c '.split('\\n')", "question_id": 172439, "baseline-bleu": 0.3495, "tranx-annot-bleu": 0.3899, "best-tranx-bleu": 0.3688, "best-tranx-bleu-rerank": 0.7952, "baseline": "my_string . split ( '\\n' , '' )", "tranx-annot": "[ x . split ( ` \\ n ` ) for s in . split ( ` \\ n ` ) ]", "best-tranx": "a b c . split ( ` \\ n ` )", "best-tranx-rerank": "re . split ( ` \\ n ` , ` a \\ n b \\ r \\ n c ` )", "meteor-baseline": 0.4874, "meteor-tranx-annot": 0.6102, "meteor-best-tranx": 0.5899, "meteor-best-tranx-rerank": 0.7916, "rougel-baseline": 0.6452, "rougel-tranx-annot": 0.5854, "rougel-best-tranx": 0.7333, "rougel-best-tranx-rerank": 0.95}, {"intent": "How to join mixed list (array) (with integers in it) in Python?", "rewritten_intent": "concatenate elements of list `b` by a colon \":\"", "snippet": "\"\"\":\"\"\".join(str(x) for x in b)", "question_id": 13954222, "baseline-bleu": 0.0829, "tranx-annot-bleu": 0.3098, "best-tranx-bleu": 0.4835, "best-tranx-bleu-rerank": 0.4835, "baseline": "s . sort ( key = lambda x : : : - 1 ] )", "tranx-annot": "[ x . strip ( ` : ` ) for x in b ]", "best-tranx": "[ ` ` . join ( x ) for x in b ]", "best-tranx-rerank": "[ ` ` . join ( x ) for x in b ]", "meteor-baseline": 0.1344, "meteor-tranx-annot": 0.4802, "meteor-best-tranx": 0.5835, "meteor-best-tranx-rerank": 0.5835, "rougel-baseline": 0.2941, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.6875, "rougel-best-tranx-rerank": 0.6875}, {"intent": "Fastest way to get the first object from a queryset in django?", "rewritten_intent": "get the first object from a queryset in django model `Entry`", "snippet": "Entry.objects.filter()[:1].get()", "question_id": 5123839, "baseline-bleu": 0.1042, "tranx-annot-bleu": 0.288, "best-tranx-bleu": 0.2492, "best-tranx-bleu-rerank": 0.2492, "baseline": "print ( s . encode ( 'length' ) )", "tranx-annot": "Entry . objects . order_by ( ` ? ` ) . size ( )", "best-tranx": "Entry . objects . values_list ( ` Entry ` , flat = True )", "best-tranx-rerank": "Entry . objects . values_list ( ` Entry ` , flat = True )", "meteor-baseline": 0.1712, "meteor-tranx-annot": 0.5522, "meteor-best-tranx": 0.2013, "meteor-best-tranx-rerank": 0.2013, "rougel-baseline": 0.3846, "rougel-tranx-annot": 0.6207, "rougel-best-tranx": 0.4138, "rougel-best-tranx-rerank": 0.4138}, {"intent": "How to calculate the sum of all columns of a 2D numpy array (efficiently)", "rewritten_intent": "Calculate sum over all rows of 2D numpy array", "snippet": "a.sum(axis=1)", "question_id": 13567345, "baseline-bleu": 0.0915, "tranx-annot-bleu": 0.1236, "best-tranx-bleu": 0.2287, "best-tranx-bleu-rerank": 0.2287, "baseline": "np . array ( [ 0 , 0 ] , [ 0 ] , None )", "tranx-annot": "np . all ( numpy . data ) . all ( )", "best-tranx": "np . array ( [ 1 , 2 , 3 , 4 ] ) . sum ( axis = 0 )", "best-tranx-rerank": "np . array ( [ 1 , 2 , 3 , 4 ] ) . sum ( axis = 0 )", "meteor-baseline": 0.1705, "meteor-tranx-annot": 0.1786, "meteor-best-tranx": 0.7231, "meteor-best-tranx-rerank": 0.7231, "rougel-baseline": 0.25, "rougel-tranx-annot": 0.3, "rougel-best-tranx": 0.4828, "rougel-best-tranx-rerank": 0.4828}, {"intent": "Python, how to enable all warnings?", "rewritten_intent": "enable warnings using action 'always'", "snippet": "warnings.simplefilter('always')", "question_id": 29784889, "baseline-bleu": 0.1251, "tranx-annot-bleu": 0.4799, "best-tranx-bleu": 0.6606, "best-tranx-bleu-rerank": 0.6606, "baseline": "[ int ( x ) for x in s . split ( ',' ) ]", "tranx-annot": "urllib . parse . urlretrieve ( ` always ` )", "best-tranx": "warnings . info ( ` always ` )", "best-tranx-rerank": "warnings . info ( ` always ` )", "meteor-baseline": 0.5011, "meteor-tranx-annot": 0.7182, "meteor-best-tranx": 0.8648, "meteor-best-tranx-rerank": 0.8648, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.875, "rougel-best-tranx-rerank": 0.875}, {"intent": "Python printing without commas", "rewritten_intent": "concatenate items of list `l` with a space ' '", "snippet": "print(' '.join(map(str, l)))", "question_id": 13550423, "baseline-bleu": 0.1288, "tranx-annot-bleu": 0.3481, "best-tranx-bleu": 0.1759, "best-tranx-bleu-rerank": 0.1759, "baseline": "[ item for item in list ( d . items ( ) ) ]", "tranx-annot": "print ( ` ` . join ( [ ` ` . join ( i ) for i in l ] ) )", "best-tranx": "list ( map ( tuple , [ ] ) )", "best-tranx-rerank": "list ( map ( tuple , [ ] ) )", "meteor-baseline": 0.2497, "meteor-tranx-annot": 0.6885, "meteor-best-tranx": 0.3879, "meteor-best-tranx-rerank": 0.3879, "rougel-baseline": 0.3448, "rougel-tranx-annot": 0.6486, "rougel-best-tranx": 0.48, "rougel-best-tranx-rerank": 0.48}, {"intent": "OSError: [WinError 193] %1 is not a valid Win32 application", "rewritten_intent": "run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable", "snippet": "subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])", "question_id": 25651990, "baseline-bleu": 0.1049, "tranx-annot-bleu": 0.6826, "best-tranx-bleu": 0.0465, "best-tranx-bleu-rerank": 0.126, "baseline": "subprocess . call ( 'c#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>#SPACE#|#SPACE#<unk>' )", "tranx-annot": "subprocess . call ( [ ` hello . py ` , ` htmlfilename . htm ` ] )", "best-tranx": "os . system ( hello . py )", "best-tranx-rerank": "os . system ( ` hello . py ` )", "meteor-baseline": 0.1903, "meteor-tranx-annot": 0.765, "meteor-best-tranx": 0.1339, "meteor-best-tranx-rerank": 0.177, "rougel-baseline": 0.2333, "rougel-tranx-annot": 0.8571, "rougel-best-tranx": 0.375, "rougel-best-tranx-rerank": 0.4706}, {"intent": "How can I parse a time string containing milliseconds in it with python?", "rewritten_intent": null, "snippet": "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "question_id": 698223, "baseline-bleu": 0.0181, "tranx-annot-bleu": 0.0852, "best-tranx-bleu": 0.0236, "best-tranx-bleu-rerank": 0.0348, "baseline": "print ( s . split ( ',' ) )", "tranx-annot": "` ` ` ` ` ` . join ( chr ( ord ( n ) ) for i in time . split ( ` , ` ) ) . encode ( ` utf - 8 ` )", "best-tranx": "time . ctime ( datetime . datetime . time ( hours = 3 ) )", "best-tranx-rerank": "print ( time . mktime ( datetime . datetime . fromtimestamp ( time ) . timetuple ( ) ) )", "meteor-baseline": 0.1262, "meteor-tranx-annot": 0.1692, "meteor-best-tranx": 0.0781, "meteor-best-tranx-rerank": 0.0771, "rougel-baseline": 0.2308, "rougel-tranx-annot": 0.2821, "rougel-best-tranx": 0.2143, "rougel-best-tranx-rerank": 0.1967}, {"intent": "How can I convert a string with dot and comma into a float number in Python", "rewritten_intent": "convert a string `my_string` with dot and comma into a float number `my_float`", "snippet": "my_float = float(my_string.replace(',', ''))", "question_id": 6633523, "baseline-bleu": 0.3233, "tranx-annot-bleu": 0.2807, "best-tranx-bleu": 0.0924, "best-tranx-bleu-rerank": 0.3884, "baseline": "print ( my_string . split ( ',' ) )", "tranx-annot": "my_float = float ( int ( int ( my_string ) , my_string ) )", "best-tranx": "float ( float ( my_float ) )", "best-tranx-rerank": "float ( my_string . split ( ` , ` ) [ 0 ] )", "meteor-baseline": 0.5309, "meteor-tranx-annot": 0.4852, "meteor-best-tranx": 0.2824, "meteor-best-tranx-rerank": 0.5646, "rougel-baseline": 0.6667, "rougel-tranx-annot": 0.6, "rougel-best-tranx": 0.5217, "rougel-best-tranx-rerank": 0.6667}, {"intent": "How can I convert a string with dot and comma into a float number in Python", "rewritten_intent": "convert a string `123,456.908` with dot and comma into a floating number", "snippet": "float('123,456.908'.replace(',', ''))", "question_id": 6633523, "baseline-bleu": 0.083, "tranx-annot-bleu": 0.4261, "best-tranx-bleu": 0.3979, "best-tranx-bleu-rerank": 0.3979, "baseline": "struct . unpack ( 'January#SPACE#11,#SPACE#11,#SPACE#11,#SPACE#%s' )", "tranx-annot": "int ( int ( ` 123 , 456 . 908 ` , 0 ) )", "best-tranx": "print ( ` , ` . join ( map ( str , 123 , 456 . 908 ) ) )", "best-tranx-rerank": "print ( ` , ` . join ( map ( str , 123 , 456 . 908 ) ) )", "meteor-baseline": 0.1923, "meteor-tranx-annot": 0.3784, "meteor-best-tranx": 0.4198, "meteor-best-tranx-rerank": 0.4198, "rougel-baseline": 0.3333, "rougel-tranx-annot": 0.6857, "rougel-best-tranx": 0.7, "rougel-best-tranx-rerank": 0.7}, {"intent": "In Python script, how do I set PYTHONPATH?", "rewritten_intent": "set pythonpath in python script.", "snippet": "sys.path.append('/path/to/whatever')", "question_id": 3108285, "baseline-bleu": 0.0553, "tranx-annot-bleu": 0.0553, "best-tranx-bleu": 0.1687, "best-tranx-bleu-rerank": 0.1687, "baseline": "sys . exit ( )", "tranx-annot": "sys . exit ( )", "best-tranx": "os . chdir ( os . path . dirname ( __file__ ) )", "best-tranx-rerank": "os . chdir ( os . path . dirname ( __file__ ) )", "meteor-baseline": 0.1429, "meteor-tranx-annot": 0.1429, "meteor-best-tranx": 0.1689, "meteor-best-tranx-rerank": 0.1689, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.4, "rougel-best-tranx": 0.3571, "rougel-best-tranx-rerank": 0.3571}, {"intent": "Determining the unmatched portion of a string using a regex in Python", "rewritten_intent": "split string 'Words, words, words.' using a regex '(\\\\W+)'", "snippet": "re.split('(\\\\W+)', 'Words, words, words.')", "question_id": 2195340, "baseline-bleu": 0.0748, "tranx-annot-bleu": 1.0, "best-tranx-bleu": 1.0, "best-tranx-bleu-rerank": 1.0, "baseline": "\"\"\"This#SPACE#<unk>#SPACE#{0}\"\"\" . strip ( )", "tranx-annot": "re . split ( ` ( \\ \\ W + ) ` , ` Words , words , words . ` )", "best-tranx": "re . split ( ` ( \\ \\ W + ) ` , ` Words , words , words . ` )", "best-tranx-rerank": "re . split ( ` ( \\ \\ W + ) ` , ` Words , words , words . ` )", "meteor-baseline": 0.1584, "meteor-tranx-annot": 1.0, "meteor-best-tranx": 1.0, "meteor-best-tranx-rerank": 1.0, "rougel-baseline": 0.3111, "rougel-tranx-annot": 1.0, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 1.0}, {"intent": "How to read data from Excel and write it to text file line by line?", "rewritten_intent": "open a file `Output.txt` in append mode", "snippet": "file = open('Output.txt', 'a')", "question_id": 17977584, "baseline-bleu": 0.1779, "tranx-annot-bleu": 0.7487, "best-tranx-bleu": 0.7487, "best-tranx-bleu-rerank": 0.7487, "baseline": "with open ( 'test.txt' ) . read ( ) #NEWLINE# #INDENT# pass", "tranx-annot": "output = open ( ` Output . txt ` , ` r ` )", "best-tranx": "f = open ( ` Output . txt ` , ` rb ` )", "best-tranx-rerank": "f = open ( ` Output . txt ` , ` r ` )", "meteor-baseline": 0.2397, "meteor-tranx-annot": 0.8552, "meteor-best-tranx": 0.8552, "meteor-best-tranx-rerank": 0.8552, "rougel-baseline": 0.4118, "rougel-tranx-annot": 0.8571, "rougel-best-tranx": 0.8571, "rougel-best-tranx-rerank": 0.8571}, {"intent": "download a file over HTTP", "rewritten_intent": "download a file \"http://www.example.com/songs/mp3.mp3\" over HTTP and save to \"mp3.mp3\"", "snippet": "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')", "question_id": 22676, "baseline-bleu": 0.4719, "tranx-annot-bleu": 1.0, "best-tranx-bleu": 1.0, "best-tranx-bleu-rerank": 1.0, "baseline": "urllib . request . urlretrieve ( 'http://spam.com/search.com/' , '<unk>' )", "tranx-annot": "urllib . request . urlretrieve ( ` http : / / www . example . com / songs / mp3 . mp3 ` , ` mp3 . mp3 ` )", "best-tranx": "urllib . request . urlretrieve ( ` http : / / www . example . com / songs / mp3 . mp3 ` , ` mp3 . mp3 ` )", "best-tranx-rerank": "urllib . request . urlretrieve ( ` http : / / www . example . com / songs / mp3 . mp3 ` , ` mp3 . mp3 ` )", "meteor-baseline": 0.6411, "meteor-tranx-annot": 1.0, "meteor-best-tranx": 1.0, "meteor-best-tranx-rerank": 1.0, "rougel-baseline": 0.7368, "rougel-tranx-annot": 1.0, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 1.0}, {"intent": "download a file over HTTP", "rewritten_intent": "download a file `url` over HTTP and save to `file_name`", "snippet": "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()", "question_id": 22676, "baseline-bleu": 0.0, "tranx-annot-bleu": 0.0, "best-tranx-bleu": 0.0, "best-tranx-bleu-rerank": 0.0, "baseline": "with open ( 'filename.txt' , shell = True )", "tranx-annot": "file_name = open ( ` url ` , ` file_name ` ) . read ( )", "best-tranx": "urllib . request . urlretrieve ( ` < unk > ` , ` file_name ` )", "best-tranx-rerank": "urllib . request . urlretrieve ( ` < unk > ` , ` file_name ` )", "meteor-baseline": 0.0292, "meteor-tranx-annot": 0.0688, "meteor-best-tranx": 0.0388, "meteor-best-tranx-rerank": 0.0388, "rougel-baseline": 0.0984, "rougel-tranx-annot": 0.172, "rougel-best-tranx": 0.129, "rougel-best-tranx-rerank": 0.129}, {"intent": "download a file over HTTP", "rewritten_intent": "download a file 'http://www.example.com/' over HTTP", "snippet": "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()", "question_id": 22676, "baseline-bleu": 0.4561, "tranx-annot-bleu": 0.4767, "best-tranx-bleu": 0.4681, "best-tranx-bleu-rerank": 0.5796, "baseline": "urllib . request . urlretrieve ( 'http://www.stackoverflow.com/' ) )", "tranx-annot": "logging . download ( ` http : / / www . example . com / ` , dtype = ` False ` )", "best-tranx": "testfile = httplib . HTTPConnection ( ` http : / / www . example . com / ` )", "best-tranx-rerank": "testfile = urllib . request . URLopener ( ) testfile . retrieve ( ` http : / / www . example . com / ` , ` ignore ` )", "meteor-baseline": 0.605, "meteor-tranx-annot": 0.4873, "meteor-best-tranx": 0.5379, "meteor-best-tranx-rerank": 0.742, "rougel-baseline": 0.75, "rougel-tranx-annot": 0.6275, "rougel-best-tranx": 0.6809, "rougel-best-tranx-rerank": 0.7586}, {"intent": "download a file over HTTP", "rewritten_intent": "download a file `url` over HTTP", "snippet": "r = requests.get(url)", "question_id": 22676, "baseline-bleu": 0.1355, "tranx-annot-bleu": 0.3115, "best-tranx-bleu": 0.3303, "best-tranx-bleu-rerank": 0.3303, "baseline": "print ( os . path . realpath ( filename ) )", "tranx-annot": "shutil . download ( url )", "best-tranx": "file_name = wget . download ( url )", "best-tranx-rerank": "file_name = wget . download ( url )", "meteor-baseline": 0.1807, "meteor-tranx-annot": 0.4808, "meteor-best-tranx": 0.5575, "meteor-best-tranx-rerank": 0.5575, "rougel-baseline": 0.3158, "rougel-tranx-annot": 0.5714, "rougel-best-tranx": 0.625, "rougel-best-tranx-rerank": 0.625}, {"intent": "download a file over HTTP", "rewritten_intent": "download a file `url` over HTTP and save to \"10MB\"", "snippet": "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)", "question_id": 22676, "baseline-bleu": 0.0245, "tranx-annot-bleu": 0.0231, "best-tranx-bleu": 0.0546, "best-tranx-bleu-rerank": 0.0546, "baseline": "print ( os . path . commonprefix ( 'utf-8' ) )", "tranx-annot": "urllib . request . urlretrieve ( url , ` 10MB ` )", "best-tranx": "urllib . request . urlretrieve ( ` 10MB ` , ` ignore ` )", "best-tranx-rerank": "urllib . request . urlretrieve ( ` 10MB ` , ` ignore ` )", "meteor-baseline": 0.0973, "meteor-tranx-annot": 0.1558, "meteor-best-tranx": 0.2337, "meteor-best-tranx-rerank": 0.2337, "rougel-baseline": 0.2712, "rougel-tranx-annot": 0.3214, "rougel-best-tranx": 0.3448, "rougel-best-tranx-rerank": 0.3448}, {"intent": "Python's argparse to show program's version with prog and version string formatting", "rewritten_intent": "argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`", "snippet": "parser.add_argument('--version', action='version', version='%(prog)s 2.0')", "question_id": 15405636, "baseline-bleu": 0.0604, "tranx-annot-bleu": 0.4934, "best-tranx-bleu": 0.3063, "best-tranx-bleu-rerank": 0.3063, "baseline": "soup . find_all ( 'li' , '' , s )", "tranx-annot": "argparse . set_index ( [ ` - - version ` , ` % ( prog ) s 2 . 0 ` ] )", "best-tranx": "parser . add_argument ( ` - - version ` , nargs = ` * ` )", "best-tranx-rerank": "parser . add_argument ( ` - - version ` , nargs = ` * ` )", "meteor-baseline": 0.1825, "meteor-tranx-annot": 0.644, "meteor-best-tranx": 0.4133, "meteor-best-tranx-rerank": 0.4133, "rougel-baseline": 0.4762, "rougel-tranx-annot": 0.7308, "rougel-best-tranx": 0.6222, "rougel-best-tranx-rerank": 0.6222}, {"intent": "Remove key from dictionary in Python returning new dictionary", "rewritten_intent": "remove key 'c' from dictionary `d`", "snippet": "{i: d[i] for i in d if i != 'c'}", "question_id": 17665809, "baseline-bleu": 0.0691, "tranx-annot-bleu": 0.1141, "best-tranx-bleu": 0.1009, "best-tranx-bleu-rerank": 0.1009, "baseline": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )", "tranx-annot": "d . pop ( ` c ` , ` None ` )", "best-tranx": "d . pop ( ` c ` , None )", "best-tranx-rerank": "d . pop ( ` c ` , None )", "meteor-baseline": 0.0781, "meteor-tranx-annot": 0.1093, "meteor-best-tranx": 0.2072, "meteor-best-tranx-rerank": 0.2072, "rougel-baseline": 0.15, "rougel-tranx-annot": 0.2581, "rougel-best-tranx": 0.2759, "rougel-best-tranx-rerank": 0.2759}, {"intent": "Merging two pandas dataframes", "rewritten_intent": "Create new DataFrame object by merging columns \"key\" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively", "snippet": "pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))", "question_id": 41861705, "baseline-bleu": 0.0623, "tranx-annot-bleu": 0.4012, "best-tranx-bleu": 0.1537, "best-tranx-bleu-rerank": 0.0654, "baseline": "df . loc [ : : : , ( ____id' ] ) )", "tranx-annot": "pd . rename ( split_df , csv_df , inplace = [ ` _left ` , ` csv_df ` ] , how = ` all ` )", "best-tranx": "pd . concat ( [ split_df , csv_df ] ) . rename ( columns = { ` key ` : ` csv_df ` } )", "best-tranx-rerank": "split_df . reset_index ( ) . rename ( columns = { ` split_df ` : ` csv_df ` } )", "meteor-baseline": 0.2, "meteor-tranx-annot": 0.555, "meteor-best-tranx": 0.3069, "meteor-best-tranx-rerank": 0.2206, "rougel-baseline": 0.381, "rougel-tranx-annot": 0.7778, "rougel-best-tranx": 0.6415, "rougel-best-tranx-rerank": 0.5}, {"intent": "Python regular expression split() string", "rewritten_intent": "Split a string `s` by space with `4` splits", "snippet": "s.split(' ', 4)", "question_id": 10697757, "baseline-bleu": 0.4122, "tranx-annot-bleu": 0.2848, "best-tranx-bleu": 0.1645, "best-tranx-bleu-rerank": 0.1645, "baseline": "print ( s . split ( ) )", "tranx-annot": "[ x . strip ( ` ` ) for item in s . split ( ` , ` ) ]", "best-tranx": "re . findall ( ` < unk > ` , ` 4 ` )", "best-tranx-rerank": "re . findall ( ` < unk > ` , ` 4 ` )", "meteor-baseline": 0.5438, "meteor-tranx-annot": 0.7426, "meteor-best-tranx": 0.3684, "meteor-best-tranx-rerank": 0.3684, "rougel-baseline": 0.5882, "rougel-tranx-annot": 0.5517, "rougel-best-tranx": 0.6087, "rougel-best-tranx-rerank": 0.6087}, {"intent": "How to read keyboard-input?", "rewritten_intent": "read keyboard-input", "snippet": "input('Enter your input:')", "question_id": 5404068, "baseline-bleu": 0.1358, "tranx-annot-bleu": 0.0646, "best-tranx-bleu": 0.2183, "best-tranx-bleu-rerank": 0.2183, "baseline": "sys . exit ( )", "tranx-annot": "driver . find_element_by_id ( ` utf - 8 ` ) . write ( ` ` . join ( str ( x ) for i in range ( 12 ) ) )", "best-tranx": "ast . literal_eval ( ` keyboard - input ` )", "best-tranx-rerank": "ast . literal_eval ( ` keyboard - input ` )", "meteor-baseline": 0.1163, "meteor-tranx-annot": 0.1786, "meteor-best-tranx": 0.4901, "meteor-best-tranx-rerank": 0.4901, "rougel-baseline": 0.2857, "rougel-tranx-annot": 0.2, "rougel-best-tranx": 0.5263, "rougel-best-tranx-rerank": 0.5263}, {"intent": "Auto reloading python Flask app upon code changes", "rewritten_intent": "enable debug mode on Flask application `app`", "snippet": "app.run(debug=True)", "question_id": 16344756, "baseline-bleu": 0.0691, "tranx-annot-bleu": 0.1783, "best-tranx-bleu": 0.4962, "best-tranx-bleu-rerank": 0.8801, "baseline": "cursor . execute ( 'INSERT#SPACE#INTO#SPACE#INTO#SPACE#%s' )", "tranx-annot": "app . enable ( lambda x : x . debug )", "best-tranx": "app = threading . call ( debug = True )", "best-tranx-rerank": "return app . run ( debug = True )", "meteor-baseline": 0.4032, "meteor-tranx-annot": 0.3012, "meteor-best-tranx": 0.8201, "meteor-best-tranx-rerank": 0.9867, "rougel-baseline": 0.2069, "rougel-tranx-annot": 0.5263, "rougel-best-tranx": 0.7778, "rougel-best-tranx-rerank": 0.9412}, {"intent": "Python save list and read data from file", "rewritten_intent": "python save list `mylist` to file object 'save.txt'", "snippet": "pickle.dump(mylist, open('save.txt', 'wb'))", "question_id": 40133826, "baseline-bleu": 0.1802, "tranx-annot-bleu": 0.2636, "best-tranx-bleu": 0.2636, "best-tranx-bleu-rerank": 0.2636, "baseline": "[ f for item in open ( 'file.txt' ) ]", "tranx-annot": "mylist . savefig ( ` save . txt ` )", "best-tranx": "mylist . write ( ` save . txt ` )", "best-tranx-rerank": "mylist . savefig ( ` save . txt ` )", "meteor-baseline": 0.3094, "meteor-tranx-annot": 0.3803, "meteor-best-tranx": 0.3803, "meteor-best-tranx-rerank": 0.3803, "rougel-baseline": 0.4242, "rougel-tranx-annot": 0.6207, "rougel-best-tranx": 0.6207, "rougel-best-tranx-rerank": 0.6207}, {"intent": "Numpy: Multiplying a matrix with a 3d tensor -- Suggestion", "rewritten_intent": "Multiply a matrix `P` with a 3d tensor `T` in scipy", "snippet": "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)", "question_id": 4490961, "baseline-bleu": 0.0636, "tranx-annot-bleu": 0.0891, "best-tranx-bleu": 0.184, "best-tranx-bleu-rerank": 0.1137, "baseline": "plt . set_option ( 'display.png' , s = False )", "tranx-annot": "T . P . map ( lambda x : print ( x . split ( ` . ` ) [ 0 ] ) ) . click ( )", "best-tranx": "np . dstack ( np . meshgrid ( P , T ) ) . reshape ( * * T )", "best-tranx-rerank": "np . einsum ( ` . . . j , . . . j - > . . . ` , P , T )", "meteor-baseline": 0.1357, "meteor-tranx-annot": 0.2922, "meteor-best-tranx": 0.3032, "meteor-best-tranx-rerank": 0.194, "rougel-baseline": 0.3243, "rougel-tranx-annot": 0.4314, "rougel-best-tranx": 0.4186, "rougel-best-tranx-rerank": 0.375}, {"intent": "How to create nested lists in python?", "rewritten_intent": "Create 3d array of zeroes of size `(3,3,3)`", "snippet": "numpy.zeros((3, 3, 3))", "question_id": 2173087, "baseline-bleu": 0.246, "tranx-annot-bleu": 0.2141, "best-tranx-bleu": 0.0785, "best-tranx-bleu-rerank": 0.319, "baseline": "np . zeros ( [ 1 , 2 , 3 , 4 ] )", "tranx-annot": "list ( list ( np . zeroes ( [ ( 3 , 3 , 3 ) ] , 0 ) ) . values ( ) ) . reshape ( 3 , - 1 )", "best-tranx": "list ( itertools . product ( list ( range ( 0 , len ( y ) + 1 ) ) , * * x ) )", "best-tranx-rerank": "print ( np . linspace ( 1 , 3 , color = ` ( 3 , 3 , 3 ) ` ) )", "meteor-baseline": 0.3931, "meteor-tranx-annot": 0.3873, "meteor-best-tranx": 0.3579, "meteor-best-tranx-rerank": 0.7389, "rougel-baseline": 0.5385, "rougel-tranx-annot": 0.4348, "rougel-best-tranx": 0.3684, "rougel-best-tranx-rerank": 0.5714}, {"intent": "Python: Cut off the last word of a sentence?", "rewritten_intent": "cut off the last word of a sentence `content`", "snippet": "\"\"\" \"\"\".join(content.split(' ')[:-1])", "question_id": 6266727, "baseline-bleu": 0.0671, "tranx-annot-bleu": 0.4346, "best-tranx-bleu": 0.0944, "best-tranx-bleu-rerank": 0.0944, "baseline": "a [ : : - 1 ]", "tranx-annot": "content . split ( ` ` ) [ : - 1 ]", "best-tranx": "re . sub ( ` < unk > ` , ` \\ \\ 1Bull ` , content )", "best-tranx-rerank": "re . sub ( ` < unk > ` , ` \\ \\ 1Bull ` , content )", "meteor-baseline": 0.2361, "meteor-tranx-annot": 0.567, "meteor-best-tranx": 0.1852, "meteor-best-tranx-rerank": 0.1852, "rougel-baseline": 0.3448, "rougel-tranx-annot": 0.7059, "rougel-best-tranx": 0.4, "rougel-best-tranx-rerank": 0.4}, {"intent": "Numpy convert scalars to arrays", "rewritten_intent": "convert scalar `x` to array", "snippet": "x = np.asarray(x).reshape(1, -1)[(0), :]", "question_id": 30385151, "baseline-bleu": 0.1171, "tranx-annot-bleu": 0.0256, "best-tranx-bleu": 0.1644, "best-tranx-bleu-rerank": 0.1644, "baseline": "x = np . array ( x , 2 )", "tranx-annot": "array . dot ( x )", "best-tranx": "x = np . loadtxt ( ` x ` , delimiter = ` , ` )", "best-tranx-rerank": "x = np . loadtxt ( ` x ` , delimiter = ` , ` )", "meteor-baseline": 0.2909, "meteor-tranx-annot": 0.0939, "meteor-best-tranx": 0.2018, "meteor-best-tranx-rerank": 0.2018, "rougel-baseline": 0.4848, "rougel-tranx-annot": 0.2759, "rougel-best-tranx": 0.4615, "rougel-best-tranx-rerank": 0.4615}, {"intent": "Finding the sum of a nested list of ints", "rewritten_intent": "sum all elements of nested list `L`", "snippet": "sum(sum(i) if isinstance(i, list) else i for i in L)", "question_id": 15856127, "baseline-bleu": 0.0985, "tranx-annot-bleu": 0.1978, "best-tranx-bleu": 0.0109, "best-tranx-bleu-rerank": 0.0109, "baseline": "sum ( x , key = lambda x : abs ( x [ 1 ] ) )", "tranx-annot": "sum ( sum ( item ) for x in L )", "best-tranx": "sum ( L )", "best-tranx-rerank": "sum ( L )", "meteor-baseline": 0.2434, "meteor-tranx-annot": 0.3604, "meteor-best-tranx": 0.1715, "meteor-best-tranx-rerank": 0.1715, "rougel-baseline": 0.3243, "rougel-tranx-annot": 0.5806, "rougel-best-tranx": 0.3333, "rougel-best-tranx-rerank": 0.3333}, {"intent": "Convert hex to float", "rewritten_intent": "convert hex string '470FC614' to a float number", "snippet": "struct.unpack('!f', '470FC614'.decode('hex'))[0]", "question_id": 1592158, "baseline-bleu": 0.2893, "tranx-annot-bleu": 0.4051, "best-tranx-bleu": 0.1735, "best-tranx-bleu-rerank": 0.1037, "baseline": "struct . unpack ( 'a' , struct . pack ( '<unk>' ) )", "tranx-annot": "float ( ` 470FC614 ` . decode ( ` hex ` ) )", "best-tranx": "float ( ` ` . join ( str ( ord ( c ) ) for c in ` 470FC614 ` ) )", "best-tranx-rerank": "float ( int ( ` 470FC614 ` , 16 ) )", "meteor-baseline": 0.5082, "meteor-tranx-annot": 0.5442, "meteor-best-tranx": 0.3618, "meteor-best-tranx-rerank": 0.2896, "rougel-baseline": 0.619, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.4444, "rougel-best-tranx-rerank": 0.4706}, {"intent": "Python: Perform an operation on each dictionary value", "rewritten_intent": "Multiple each value by `2` for all keys in a dictionary `my_dict`", "snippet": "my_dict.update((x, y * 2) for x, y in list(my_dict.items()))", "question_id": 5010536, "baseline-bleu": 0.2315, "tranx-annot-bleu": 0.2512, "best-tranx-bleu": 0.2572, "best-tranx-bleu-rerank": 0.2572, "baseline": "print ( list ( my_dict . items ( ) ) )", "tranx-annot": "print ( dict ( [ ( ` 2 ` , k ) for k , v in my_dict . items ( ) ] ) )", "best-tranx": "map ( dict , zip ( * [ [ ( k , v ) for k , v in my_dict . items ( ) ] for v in list ( my_dict . values ( ) ) ] ) )", "best-tranx-rerank": "map ( dict , zip ( * [ [ ( k , v ) for k , v in my_dict . items ( ) ] for v in list ( my_dict . values ( ) ) ] ) )", "meteor-baseline": 0.422, "meteor-tranx-annot": 0.5619, "meteor-best-tranx": 0.6044, "meteor-best-tranx-rerank": 0.6044, "rougel-baseline": 0.5556, "rougel-tranx-annot": 0.64, "rougel-best-tranx": 0.5938, "rougel-best-tranx-rerank": 0.5938}, {"intent": "Running bash script from within python", "rewritten_intent": "running bash script 'sleep.sh'", "snippet": "subprocess.call('sleep.sh', shell=True)", "question_id": 13745648, "baseline-bleu": 0.1383, "tranx-annot-bleu": 0.4073, "best-tranx-bleu": 0.1546, "best-tranx-bleu-rerank": 0.4073, "baseline": "os . system ( 'echo#SPACE#<unk>' )", "tranx-annot": "os . system ( ` sleep . sh ` )", "best-tranx": "os . path . dirname ( os . path . abspath ( sleep . sh ) )", "best-tranx-rerank": "os . system ( ` sleep . sh ` )", "meteor-baseline": 0.2657, "meteor-tranx-annot": 0.5727, "meteor-best-tranx": 0.3574, "meteor-best-tranx-rerank": 0.5727, "rougel-baseline": 0.3571, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.3871, "rougel-best-tranx-rerank": 0.6667}, {"intent": "How would you make a comma-separated string from a list?", "rewritten_intent": "Join elements of list `l` with a comma `,`", "snippet": "\"\"\",\"\"\".join(l)", "question_id": 44778, "baseline-bleu": 0.1057, "tranx-annot-bleu": 0.1507, "best-tranx-bleu": 0.1308, "best-tranx-bleu-rerank": 0.1308, "baseline": "list ( map ( lambda x : x [ 1 ] ) )", "tranx-annot": "[ s . strip ( ) for item in l . split ( ` , ` ) ]", "best-tranx": "[ x for x in l if x not in [ ` , ` , ` , ` ] ]", "best-tranx-rerank": "[ x for x in l if x not in [ ` , ` , ` , ` ] ]", "meteor-baseline": 0.0826, "meteor-tranx-annot": 0.2778, "meteor-best-tranx": 0.2344, "meteor-best-tranx-rerank": 0.2344, "rougel-baseline": 0.16, "rougel-tranx-annot": 0.4667, "rougel-best-tranx": 0.375, "rougel-best-tranx-rerank": 0.375}, {"intent": "How would you make a comma-separated string from a list?", "rewritten_intent": "make a comma-separated string from a list `myList`", "snippet": "myList = ','.join(map(str, myList))", "question_id": 44778, "baseline-bleu": 0.1577, "tranx-annot-bleu": 0.1786, "best-tranx-bleu": 0.5481, "best-tranx-bleu-rerank": 0.5481, "baseline": "print ( [ int ( x ) for x in s . split ( ',' ) )", "tranx-annot": "my List = [ x for x in my List for j in x . split ( ` , ` ) ]", "best-tranx": "[ ` , ` . join ( map ( str , row ) ) for row in my List ]", "best-tranx-rerank": "[ ` , ` . join ( map ( str , row ) ) for row in my List ]", "meteor-baseline": 0.3093, "meteor-tranx-annot": 0.5077, "meteor-best-tranx": 0.8053, "meteor-best-tranx-rerank": 0.8053, "rougel-baseline": 0.4444, "rougel-tranx-annot": 0.5641, "rougel-best-tranx": 0.7568, "rougel-best-tranx-rerank": 0.7568}, {"intent": "Print a list in reverse order with range()?", "rewritten_intent": "reverse the list that contains 1 to 10", "snippet": "list(reversed(list(range(10))))", "question_id": 7286365, "baseline-bleu": 0.2523, "tranx-annot-bleu": 0.1287, "best-tranx-bleu": 0.3636, "best-tranx-bleu-rerank": 0.3636, "baseline": "list ( range ( 1 ) )", "tranx-annot": "sorted ( that , key = lambda i : ( - 10 , ) )", "best-tranx": "all ( i in j for i in range ( 10 ) )", "best-tranx-rerank": "all ( i in j for i in range ( 10 ) )", "meteor-baseline": 0.4749, "meteor-tranx-annot": 0.2818, "meteor-best-tranx": 0.4327, "meteor-best-tranx-rerank": 0.4327, "rougel-baseline": 0.6, "rougel-tranx-annot": 0.3571, "rougel-best-tranx": 0.4615, "rougel-best-tranx-rerank": 0.4615}, {"intent": "How can i subtract two strings in python?", "rewritten_intent": "remove substring 'bag,' from a string 'lamp, bag, mirror'", "snippet": "print('lamp, bag, mirror'.replace('bag,', ''))", "question_id": 18454570, "baseline-bleu": 0.0682, "tranx-annot-bleu": 0.7749, "best-tranx-bleu": 0.7749, "best-tranx-bleu-rerank": 0.7749, "baseline": "re . compile ( '(ddd)' , 'aaa#SPACE#bbb#SPACE#bbb#SPACE#ccc#SPACE#ccc#SPACE#ccc#SPACE#ccc#SPACE#ccc#SPACE#<unk>' )", "tranx-annot": "` ` ` lamp , bag , mirror ` ` ` . replace ( ` bag , ` , ` ` )", "best-tranx": "` ` ` lamp , bag , mirror ` ` ` . replace ( ` bag , ` , ` ` )", "best-tranx-rerank": "` ` ` lamp , bag , mirror ` ` ` . replace ( ` bag , ` , ` ` )", "meteor-baseline": 0.3139, "meteor-tranx-annot": 0.8484, "meteor-best-tranx": 0.8484, "meteor-best-tranx-rerank": 0.8484, "rougel-baseline": 0.2899, "rougel-tranx-annot": 0.8372, "rougel-best-tranx": 0.8372, "rougel-best-tranx-rerank": 0.8372}, {"intent": "python reverse tokens in a string", "rewritten_intent": "Reverse the order of words, delimited by `.`, in string `s`", "snippet": "\"\"\".\"\"\".join(s.split('.')[::-1])", "question_id": 4357787, "baseline-bleu": 0.2909, "tranx-annot-bleu": 0.2148, "best-tranx-bleu": 0.3346, "best-tranx-bleu-rerank": 0.3346, "baseline": "\"\"\"\"\"\" . join ( [ 1 , 2 ] for i in range ( 0 , len ( s ) ] ) )", "tranx-annot": "re . findall ( ` INSERT ` , ` ` . join ( map ( lambda x : x . replace ( ` . ` , ` ` ) . replace ( ` . ` , ` ` ) , ` . ` ) ) ) [ 0 ]", "best-tranx": "` ` ` ` ` ` . join ( sorted ( s . split ( ) , key = lambda t : t [ 0 ] , reverse = True ) )", "best-tranx-rerank": "` ` ` ` ` ` . join ( sorted ( s . split ( ) , key = lambda t : t [ 0 ] , reverse = True ) )", "meteor-baseline": 0.4206, "meteor-tranx-annot": 0.5431, "meteor-best-tranx": 0.5356, "meteor-best-tranx-rerank": 0.5356, "rougel-baseline": 0.6038, "rougel-tranx-annot": 0.5405, "rougel-best-tranx": 0.6316, "rougel-best-tranx-rerank": 0.6316}, {"intent": "converting epoch time with milliseconds to datetime", "rewritten_intent": "convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'", "snippet": "datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')", "question_id": 21787496, "baseline-bleu": 0.3341, "tranx-annot-bleu": 0.7409, "best-tranx-bleu": 0.4681, "best-tranx-bleu-rerank": 0.4866, "baseline": "datetime . datetime . strptime ( 'Jun#SPACE#<unk>#SPACE#1#SPACE#%H:%M:%S' )", "tranx-annot": "s . strftime ( ` % Y - % m - % d % H : % M : % S . % f ` )", "best-tranx": "time . strftime ( ` % Y - % m - % d % H : % M : % S . % f ` , ` % Y - % m - % d % H : % M : % S . % f ` . format ( represented ) )", "best-tranx-rerank": "time . strftime ( ` % Y - % m - % d % H : % M : % S . % f ` , ` % Y - % m - % d % H : % M : % S . % f ` . format ( s ) )", "meteor-baseline": 0.3849, "meteor-tranx-annot": 0.8048, "meteor-best-tranx": 0.8297, "meteor-best-tranx-rerank": 0.836, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.8814, "rougel-best-tranx": 0.6744, "rougel-best-tranx-rerank": 0.6977}, {"intent": "converting epoch time with milliseconds to datetime", "rewritten_intent": "parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'", "snippet": "time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 / 1000.0))", "question_id": 21787496, "baseline-bleu": 0.4867, "tranx-annot-bleu": 0.554, "best-tranx-bleu": 0.5986, "best-tranx-bleu-rerank": 0.5986, "baseline": "datetime . datetime . strptime ( 'Jun#SPACE#22' , '%Y-%m-%d#SPACE#%H:%M:%S' )", "tranx-annot": "datetime . strptime ( ` 1236472051807 ` , ` % Y - % m - % d % H : % M : % S ` )", "best-tranx": "time . strftime ( ` % Y - % m - % d % H : % M : % S ` )", "best-tranx-rerank": "time . strftime ( ` % Y - % m - % d % H : % M : % S ` )", "meteor-baseline": 0.663, "meteor-tranx-annot": 0.6846, "meteor-best-tranx": 0.6929, "meteor-best-tranx-rerank": 0.6929, "rougel-baseline": 0.6571, "rougel-tranx-annot": 0.7541, "rougel-best-tranx": 0.807, "rougel-best-tranx-rerank": 0.807}, {"intent": "Getting the date of 7 days ago from current date in python", "rewritten_intent": "get the date 7 days before the current date", "snippet": "(datetime.datetime.now() - datetime.timedelta(days=7)).date()", "question_id": 20573459, "baseline-bleu": 0.3365, "tranx-annot-bleu": 0.3365, "best-tranx-bleu": 0.1173, "best-tranx-bleu-rerank": 0.1173, "baseline": "datetime . datetime . now ( ) . date ( )", "tranx-annot": "datetime . datetime . now ( ) . date ( )", "best-tranx": "datetime . datetime . now ( )", "best-tranx-rerank": "datetime . datetime . now ( )", "meteor-baseline": 0.5016, "meteor-tranx-annot": 0.5016, "meteor-best-tranx": 0.2339, "meteor-best-tranx-rerank": 0.2339, "rougel-baseline": 0.6667, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.4828, "rougel-best-tranx-rerank": 0.4828}, {"intent": "How can I sum a column of a list?", "rewritten_intent": "sum elements at index `column` of each list in list `data`", "snippet": "print(sum(row[column] for row in data))", "question_id": 15352457, "baseline-bleu": 0.1338, "tranx-annot-bleu": 0.183, "best-tranx-bleu": 0.2486, "best-tranx-bleu-rerank": 0.2486, "baseline": "[ x [ 0 ] for x in zip ( a , b ) ]", "tranx-annot": "map ( sum , data , key = lambda x : data [ column ] )", "best-tranx": "sum ( sum ( x ) for x in data )", "best-tranx-rerank": "sum ( sum ( x ) for x in data )", "meteor-baseline": 0.2128, "meteor-tranx-annot": 0.4031, "meteor-best-tranx": 0.5127, "meteor-best-tranx-rerank": 0.5127, "rougel-baseline": 0.4138, "rougel-tranx-annot": 0.4667, "rougel-best-tranx": 0.64, "rougel-best-tranx-rerank": 0.64}, {"intent": "How can I sum a column of a list?", "rewritten_intent": "sum columns of a list `array`", "snippet": "[sum(row[i] for row in array) for i in range(len(array[0]))]", "question_id": 15352457, "baseline-bleu": 0.0147, "tranx-annot-bleu": 0.0726, "best-tranx-bleu": 0.0754, "best-tranx-bleu-rerank": 0.0754, "baseline": "a . shape [ 0 ]", "tranx-annot": "sum ( array , key = lambda x : x [ 1 ] )", "best-tranx": "sum ( sum ( x ) for x in array )", "best-tranx-rerank": "sum ( sum ( x ) for x in array )", "meteor-baseline": 0.1065, "meteor-tranx-annot": 0.1934, "meteor-best-tranx": 0.1633, "meteor-best-tranx-rerank": 0.1633, "rougel-baseline": 0.1875, "rougel-tranx-annot": 0.3, "rougel-best-tranx": 0.4324, "rougel-best-tranx-rerank": 0.4324}, {"intent": "How to encode text to base64 in python", "rewritten_intent": "encode binary string 'your string' to base64 code", "snippet": "base64.b64encode(bytes('your string', 'utf-8'))", "question_id": 23164058, "baseline-bleu": 0.1712, "tranx-annot-bleu": 0.243, "best-tranx-bleu": 0.3242, "best-tranx-bleu-rerank": 0.3242, "baseline": "\"\"\"\"\"\" . join ( chr ( ord ( 'ascii' ) )", "tranx-annot": "encode ( ` your string ` , 16 )", "best-tranx": "hex ( int ( ` your string ` , 2 ) )", "best-tranx-rerank": "hex ( int ( ` your string ` , 2 ) )", "meteor-baseline": 0.3824, "meteor-tranx-annot": 0.2805, "meteor-best-tranx": 0.3956, "meteor-best-tranx-rerank": 0.3956, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.5185, "rougel-best-tranx": 0.6, "rougel-best-tranx-rerank": 0.6}, {"intent": "How can I combine dictionaries with the same keys in python?", "rewritten_intent": "combine list of dictionaries `dicts` with the same keys in each list to a single dictionary", "snippet": "dict((k, [d[k] for d in dicts]) for k in dicts[0])", "question_id": 11533274, "baseline-bleu": 0.2434, "tranx-annot-bleu": 0.2523, "best-tranx-bleu": 0.2527, "best-tranx-bleu-rerank": 0.3019, "baseline": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) , reverse = True )", "tranx-annot": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )", "best-tranx": "dict ( ( k , v ) for k , v in dicts . items ( ) )", "best-tranx-rerank": "dict ( ( k , ` k ` ) for d in dicts for k , v in list ( d . items ( ) ) )", "meteor-baseline": 0.285, "meteor-tranx-annot": 0.2898, "meteor-best-tranx": 0.3414, "meteor-best-tranx-rerank": 0.3872, "rougel-baseline": 0.449, "rougel-tranx-annot": 0.4889, "rougel-best-tranx": 0.5238, "rougel-best-tranx-rerank": 0.6275}, {"intent": "How can I combine dictionaries with the same keys in python?", "rewritten_intent": "Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`", "snippet": "{k: [d[k] for d in dicts] for k in dicts[0]}", "question_id": 11533274, "baseline-bleu": 0.0909, "tranx-annot-bleu": 0.0875, "best-tranx-bleu": 0.1006, "best-tranx-bleu-rerank": 0.1006, "baseline": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )", "tranx-annot": "dict ( ( k , v ) for k , v in dicts . items ( ) if v ! = ` k ` )", "best-tranx": "dict ( ( k , v ) for k , v in dicts . items ( ) if v )", "best-tranx-rerank": "dict ( ( k , v ) for k , v in dicts . items ( ) if v )", "meteor-baseline": 0.203, "meteor-tranx-annot": 0.2241, "meteor-best-tranx": 0.2446, "meteor-best-tranx-rerank": 0.2446, "rougel-baseline": 0.2381, "rougel-tranx-annot": 0.2609, "rougel-best-tranx": 0.2439, "rougel-best-tranx-rerank": 0.2439}, {"intent": "How do I get the url parameter in a Flask view", "rewritten_intent": null, "snippet": "request.args['myParam']", "question_id": 14026704, "baseline-bleu": 0.1136, "tranx-annot-bleu": 0.1261, "best-tranx-bleu": 0.1885, "best-tranx-bleu-rerank": 0.1885, "baseline": "self . <unk>ession . get ( 'top' )", "tranx-annot": "self . view . url ( view = 0 )", "best-tranx": "request . headers . get ( ` / ` )", "best-tranx-rerank": "request . headers . get ( ` / ` )", "meteor-baseline": 0.1596, "meteor-tranx-annot": 0.0549, "meteor-best-tranx": 0.2198, "meteor-best-tranx-rerank": 0.2198, "rougel-baseline": 0.2727, "rougel-tranx-annot": 0.1053, "rougel-best-tranx": 0.4211, "rougel-best-tranx-rerank": 0.4211}, {"intent": "Identify duplicate values in a list in Python", "rewritten_intent": "identify duplicate values in list `mylist`", "snippet": "[k for k, v in list(Counter(mylist).items()) if v > 1]", "question_id": 11236006, "baseline-bleu": 0.1667, "tranx-annot-bleu": 0.0983, "best-tranx-bleu": 0.1169, "best-tranx-bleu-rerank": 0.1169, "baseline": "mylist = list ( my_dict . items ( ) ) )", "tranx-annot": "[ dict ( y ) for c , b in zip ( mylist , mylist [ 1 : ] ) ]", "best-tranx": "[ i for i , j in enumerate ( mylist ) if i ]", "best-tranx-rerank": "[ i for i , j in enumerate ( mylist ) if i ]", "meteor-baseline": 0.3517, "meteor-tranx-annot": 0.2412, "meteor-best-tranx": 0.3367, "meteor-best-tranx-rerank": 0.3367, "rougel-baseline": 0.5294, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.4865, "rougel-best-tranx-rerank": 0.4865}, {"intent": "How do you modify sys.path in Google App Engine (Python)?", "rewritten_intent": "Insert directory 'apps' into directory `__file__`", "snippet": "sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))", "question_id": 2354166, "baseline-bleu": 0.0737, "tranx-annot-bleu": 0.0683, "best-tranx-bleu": 0.3845, "best-tranx-bleu-rerank": 0.3976, "baseline": "os . chdir ( 'HTTP#SPACE#<unk>#SPACE#<unk>' )", "tranx-annot": "os . insert ( ` apps ` , __file__ )", "best-tranx": "x_file = open ( os . path . join ( __file__ , ` apps ` ) , ` r ` )", "best-tranx-rerank": "x_file = open ( os . path . join ( __file__ , ` apps ` ) , ` apps ` )", "meteor-baseline": 0.1103, "meteor-tranx-annot": 0.284, "meteor-best-tranx": 0.4901, "meteor-best-tranx-rerank": 0.5215, "rougel-baseline": 0.25, "rougel-tranx-annot": 0.5263, "rougel-best-tranx": 0.6122, "rougel-best-tranx-rerank": 0.6122}, {"intent": "How do you modify sys.path in Google App Engine (Python)?", "rewritten_intent": "modify sys.path for python module `subdir`", "snippet": "sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))", "question_id": 2354166, "baseline-bleu": 0.2317, "tranx-annot-bleu": 0.0398, "best-tranx-bleu": 0.1161, "best-tranx-bleu-rerank": 0.0064, "baseline": "print ( os . path . dirname ( 'filename' ) )", "tranx-annot": "print ( subdir . communicate ( ) [ 0 ] )", "best-tranx": "feature3 = [ os . path for url in os . listdir ( ` o ` ) ]", "best-tranx-rerank": "subdir . path ( )", "meteor-baseline": 0.4408, "meteor-tranx-annot": 0.1224, "meteor-best-tranx": 0.2317, "meteor-best-tranx-rerank": 0.1046, "rougel-baseline": 0.5641, "rougel-tranx-annot": 0.3243, "rougel-best-tranx": 0.4091, "rougel-best-tranx-rerank": 0.3226}, {"intent": "Insert Null into SQLite3 in Python", "rewritten_intent": "Insert a 'None' value into a SQLite3 table.", "snippet": "db.execute(\"INSERT INTO present VALUES('test2', ?, 10)\", (None,))", "question_id": 20211942, "baseline-bleu": 0.051, "tranx-annot-bleu": 0.0793, "best-tranx-bleu": 0.5295, "best-tranx-bleu-rerank": 0.5295, "baseline": "raise ( '<unk>#SPACE#INTO#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#%s' )", "tranx-annot": "datetime . datetime . strptime ( ` None ` , ` None ` )", "best-tranx": "cursor . execute ( ` INSERT INTO table ( ` column1 ` ) VALUES ( % s ) ` , ( None , ) )", "best-tranx-rerank": "cursor . execute ( ` INSERT INTO table ( ` column1 ` ) VALUES ( % s ) ` , ( None , ) )", "meteor-baseline": 0.0954, "meteor-tranx-annot": 0.1883, "meteor-best-tranx": 0.6988, "meteor-best-tranx-rerank": 0.6988, "rougel-baseline": 0.1613, "rougel-tranx-annot": 0.4615, "rougel-best-tranx": 0.72, "rougel-best-tranx-rerank": 0.72}, {"intent": "Flattening a shallow list in Python", "rewritten_intent": "flatten list `list_of_menuitems`", "snippet": "[image for menuitem in list_of_menuitems for image in menuitem]", "question_id": 406121, "baseline-bleu": 0.0525, "tranx-annot-bleu": 0.0667, "best-tranx-bleu": 0.1626, "best-tranx-bleu-rerank": 0.1626, "baseline": "sorted ( list_of_tuples )", "tranx-annot": "[ list_of_menuitems [ i : i + list_of_menuitems ] for i in range ( 0 , len ( list_of_menuitems ) , 2 ) ]", "best-tranx": "list_of_menuitems = [ i [ 0 ] for i in list_of_menuitems ]", "best-tranx-rerank": "list_of_menuitems = [ i [ 0 ] for i in list_of_menuitems ]", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.2439, "meteor-best-tranx": 0.2252, "meteor-best-tranx-rerank": 0.2252, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.2857, "rougel-best-tranx": 0.4348, "rougel-best-tranx-rerank": 0.4348}, {"intent": "Append elements of a set to a list in Python", "rewritten_intent": "append elements of a set `b` to a list `a`", "snippet": "a.extend(b)", "question_id": 4741537, "baseline-bleu": 0.2778, "tranx-annot-bleu": 0.1127, "best-tranx-bleu": 0.1956, "best-tranx-bleu-rerank": 0.1956, "baseline": "a . remove ( a , b )", "tranx-annot": "[ ( i * b ) for a , b in zip ( b , a ) ]", "best-tranx": "a . write ( ` \\ n ` . join ( b ) )", "best-tranx-rerank": "a . write ( ` \\ n ` . join ( b ) )", "meteor-baseline": 0.6, "meteor-tranx-annot": 0.4384, "meteor-best-tranx": 0.5471, "meteor-best-tranx-rerank": 0.5471, "rougel-baseline": 0.7143, "rougel-tranx-annot": 0.3333, "rougel-best-tranx": 0.5, "rougel-best-tranx-rerank": 0.5}, {"intent": "Append elements of a set to a list in Python", "rewritten_intent": null, "snippet": "a.extend(list(b))", "question_id": 4741537, "baseline-bleu": 0.1499, "tranx-annot-bleu": 0.0501, "best-tranx-bleu": 0.1261, "best-tranx-bleu-rerank": 0.1261, "baseline": "np . dot ( [ 1 , 2 ] )", "tranx-annot": "[ int ( x ) for x in zip ( * zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) ) ]", "best-tranx": "[ [ ] for i in range ( 2 ) ]", "best-tranx-rerank": "[ [ ] for i in range ( 2 ) ]", "meteor-baseline": 0.1648, "meteor-tranx-annot": 0.2698, "meteor-best-tranx": 0.1087, "meteor-best-tranx-rerank": 0.1087, "rougel-baseline": 0.3158, "rougel-tranx-annot": 0.1778, "rougel-best-tranx": 0.2, "rougel-best-tranx-rerank": 0.2}, {"intent": "Python, Pandas : write content of DataFrame into text File", "rewritten_intent": "write the data of dataframe `df` into text file `np.txt`", "snippet": "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')", "question_id": 31247198, "baseline-bleu": 0.122, "tranx-annot-bleu": 0.1905, "best-tranx-bleu": 0.1541, "best-tranx-bleu-rerank": 0.1541, "baseline": "df . write ( 'filename.txt' , s = False )", "tranx-annot": "df . write ( ` np . txt ` , index = ` False ` )", "best-tranx": "df . to_csv ( ` np . txt ` , index = False )", "best-tranx-rerank": "df . to_csv ( ` np . txt ` , index = False )", "meteor-baseline": 0.188, "meteor-tranx-annot": 0.4046, "meteor-best-tranx": 0.2068, "meteor-best-tranx-rerank": 0.2068, "rougel-baseline": 0.4762, "rougel-tranx-annot": 0.5909, "rougel-best-tranx": 0.5238, "rougel-best-tranx-rerank": 0.5238}, {"intent": "Python, Pandas : write content of DataFrame into text File", "rewritten_intent": "write content of DataFrame `df` into text file 'c:\\\\data\\\\pandas.txt'", "snippet": "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')", "question_id": 31247198, "baseline-bleu": 0.027, "tranx-annot-bleu": 0.3884, "best-tranx-bleu": 0.4271, "best-tranx-bleu-rerank": 0.4271, "baseline": "df = pd . read_csv ( 'mycsv.csv' )", "tranx-annot": "df . write ( ` c : \\ \\ data \\ \\ pandas . txt ` , dtype = ` True ` )", "best-tranx": "df . to_csv ( ` c : \\ \\ data \\ \\ pandas . txt ` , index = False )", "best-tranx-rerank": "df . to_csv ( ` c : \\ \\ data \\ \\ pandas . txt ` , index = False )", "meteor-baseline": 0.1583, "meteor-tranx-annot": 0.564, "meteor-best-tranx": 0.5612, "meteor-best-tranx-rerank": 0.5612, "rougel-baseline": 0.3333, "rougel-tranx-annot": 0.678, "rougel-best-tranx": 0.7018, "rougel-best-tranx-rerank": 0.7018}, {"intent": "how to get the last part of a string before a certain character?", "rewritten_intent": "Split a string `x` by last occurrence of character `-`", "snippet": "print(x.rpartition('-')[0])", "question_id": 15851568, "baseline-bleu": 0.0859, "tranx-annot-bleu": 0.1146, "best-tranx-bleu": 0.3365, "best-tranx-bleu-rerank": 0.3365, "baseline": "x [ : : - 1 ]", "tranx-annot": "[ x . split ( ` = ` , 1 ) for x in x . split ( ` , ` ) ]", "best-tranx": "` ` ` - ` ` ` . split ( ` - ` )", "best-tranx-rerank": "` ` ` - ` ` ` . split ( ` - ` )", "meteor-baseline": 0.1504, "meteor-tranx-annot": 0.4993, "meteor-best-tranx": 0.4018, "meteor-best-tranx-rerank": 0.4018, "rougel-baseline": 0.381, "rougel-tranx-annot": 0.5405, "rougel-best-tranx": 0.4286, "rougel-best-tranx-rerank": 0.4286}, {"intent": "how to get the last part of a string before a certain character?", "rewritten_intent": "get the last part of a string before the character '-'", "snippet": "print(x.rsplit('-', 1)[0])", "question_id": 15851568, "baseline-bleu": 0.1083, "tranx-annot-bleu": 0.232, "best-tranx-bleu": 0.1062, "best-tranx-bleu-rerank": 0.1062, "baseline": "os . path . normrange ( 'utf8' )", "tranx-annot": "` ` ` - ` ` ` . format ( ` - ` )", "best-tranx": "` ` ` ` ` ` . join ( re . findall ( ` < unk > ` , str ) )", "best-tranx-rerank": "` ` ` ` ` ` . join ( re . findall ( ` < unk > ` , str ) )", "meteor-baseline": 0.2416, "meteor-tranx-annot": 0.356, "meteor-best-tranx": 0.3803, "meteor-best-tranx-rerank": 0.3803, "rougel-baseline": 0.3846, "rougel-tranx-annot": 0.4, "rougel-best-tranx": 0.4211, "rougel-best-tranx-rerank": 0.4211}, {"intent": "FTP upload files Python", "rewritten_intent": "upload file using FTP", "snippet": "ftp.storlines('STOR ' + filename, open(filename, 'r'))", "question_id": 17438096, "baseline-bleu": 0.0197, "tranx-annot-bleu": 0.0534, "best-tranx-bleu": 0.1217, "best-tranx-bleu-rerank": 0.1217, "baseline": "sys . exit ( )", "tranx-annot": "str ( input ) . click ( )", "best-tranx": "requests . get ( ` testfile ` , filename = ` my_file ` )", "best-tranx-rerank": "requests . get ( ` testfile ` , filename = ` my_file ` )", "meteor-baseline": 0.0852, "meteor-tranx-annot": 0.1397, "meteor-best-tranx": 0.2432, "meteor-best-tranx-rerank": 0.2432, "rougel-baseline": 0.25, "rougel-tranx-annot": 0.3704, "rougel-best-tranx": 0.5455, "rougel-best-tranx-rerank": 0.5455}, {"intent": "Write value to hidden element with selenium python script", "rewritten_intent": "add one to the hidden web element with id 'XYZ' with selenium python script", "snippet": "browser.execute_script(\"document.getElementById('XYZ').value+='1'\")", "question_id": 15049182, "baseline-bleu": 0.1257, "tranx-annot-bleu": 0.0059, "best-tranx-bleu": 0.1741, "best-tranx-bleu-rerank": 0.1741, "baseline": "driver . find_element_by_xpath ( 'http://www.org' ) . get ( )", "tranx-annot": "sys . exit ( )", "best-tranx": "driver . find_element_by_css_selector ( ` XYZ ` ) . click ( )", "best-tranx-rerank": "driver . find_element_by_id ( ` XYZ ` ) . click ( )", "meteor-baseline": 0.2615, "meteor-tranx-annot": 0.0652, "meteor-best-tranx": 0.2464, "meteor-best-tranx-rerank": 0.2464, "rougel-baseline": 0.4651, "rougel-tranx-annot": 0.2, "rougel-best-tranx": 0.4865, "rougel-best-tranx-rerank": 0.4865}, {"intent": "Combining two numpy arrays to form an array with the largest value from each array", "rewritten_intent": "create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`", "snippet": "np.maximum([2, 3, 4], [1, 5, 2])", "question_id": 28742436, "baseline-bleu": 0.1259, "tranx-annot-bleu": 0.5278, "best-tranx-bleu": 0.3558, "best-tranx-bleu-rerank": 0.3419, "baseline": "np . dot ( [ 1 , 2 , 3 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [", "tranx-annot": "np . array ( zip ( [ 2 , 3 , 4 ] , [ 1 , 5 , 2 ] ) , key = lambda x : x [ 1 ] )", "best-tranx": "print ( max ( [ 2 , 3 , 4 ] , key = lambda x : ( x [ 1 ] , x [ 2 ] ) ) )", "best-tranx-rerank": "max ( max ( x ) for x in zip ( * [ 2 , 3 , 4 ] ) )", "meteor-baseline": 0.5239, "meteor-tranx-annot": 0.6257, "meteor-best-tranx": 0.4239, "meteor-best-tranx-rerank": 0.2239, "rougel-baseline": 0.3951, "rougel-tranx-annot": 0.717, "rougel-best-tranx": 0.6, "rougel-best-tranx-rerank": 0.439}, {"intent": "How to print an entire list while not starting by the first item", "rewritten_intent": "print a list `l` and move first 3 elements to the end of the list", "snippet": "print(l[3:] + l[:3])", "question_id": 34280147, "baseline-bleu": 0.0967, "tranx-annot-bleu": 0.1718, "best-tranx-bleu": 0.0539, "best-tranx-bleu-rerank": 0.0828, "baseline": "[ x for x in zip ( x , x ) for x in x ]", "tranx-annot": "print ( set ( [ x for x in l if x > 3 ] ) )", "best-tranx": "print ( ` \\ n ` . join ( ` < unk > % s ` % ( key , value ) for key , value in list ( l . items ( ) ) ) )", "best-tranx-rerank": "print ( ` < unk > % s , < unk > ` % ( 1 , 2 , 3 ) )", "meteor-baseline": 0.1408, "meteor-tranx-annot": 0.3354, "meteor-best-tranx": 0.1227, "meteor-best-tranx-rerank": 0.1351, "rougel-baseline": 0.2667, "rougel-tranx-annot": 0.4516, "rougel-best-tranx": 0.1569, "rougel-best-tranx-rerank": 0.2222}, {"intent": "loop over files", "rewritten_intent": "loop over files in directory '.'", "snippet": "for fn in os.listdir('.'):\n    if os.path.isfile(fn):\n        pass", "question_id": 11801309, "baseline-bleu": 0.1226, "tranx-annot-bleu": 0.3165, "best-tranx-bleu": 0.2475, "best-tranx-bleu-rerank": 0.2475, "baseline": "os . path . dirname ( 'file' )", "tranx-annot": "for dirname , dirnames , filenames in os . walk ( ` . ` ) : pass", "best-tranx": "for dirname , dirnames , filenames in os . walk ( ` . ` ) : for subdirname in dirnames : print ( os . path . join ( dirname , subdirname ) ) for filename in filenames : pass", "best-tranx-rerank": "for dirname , dirnames , filenames in os . walk ( ` . ` ) : for subdirname in dirnames : print ( os . path . join ( dirname , subdirname ) ) for filename in filenames : pass", "meteor-baseline": 0.3237, "meteor-tranx-annot": 0.3966, "meteor-best-tranx": 0.6456, "meteor-best-tranx-rerank": 0.6456, "rougel-baseline": 0.4848, "rougel-tranx-annot": 0.55, "rougel-best-tranx": 0.5714, "rougel-best-tranx-rerank": 0.5714}, {"intent": "loop over files", "rewritten_intent": "loop over files in directory `source`", "snippet": "for (root, dirs, filenames) in os.walk(source):\n    for f in filenames:\n        pass", "question_id": 11801309, "baseline-bleu": 0.0839, "tranx-annot-bleu": 0.3632, "best-tranx-bleu": 0.2244, "best-tranx-bleu-rerank": 0.2244, "baseline": "os . path . dirname ( os . path . dirname ( __file__ ) )", "tranx-annot": "for re , dirname , source in os . walk ( source ) : pass", "best-tranx": "for dirname , dirnames , filenames in os . walk ( ` source ` ) : for subdirname in dirnames : print ( os . path . join ( dirname , subdirname ) ) for filename in filenames : pass", "best-tranx-rerank": "for dirname , dirnames , filenames in os . walk ( ` source ` ) : for subdirname in dirnames : print ( os . path . join ( dirname , subdirname ) ) for filename in filenames : pass", "meteor-baseline": 0.1408, "meteor-tranx-annot": 0.5627, "meteor-best-tranx": 0.56, "meteor-best-tranx-rerank": 0.56, "rougel-baseline": 0.3243, "rougel-tranx-annot": 0.6486, "rougel-best-tranx": 0.6129, "rougel-best-tranx-rerank": 0.6129}, {"intent": "Create random list of integers in Python", "rewritten_intent": "create a random list of integers", "snippet": "[int(1000 * random.random()) for i in range(10000)]", "question_id": 4172131, "baseline-bleu": 0.1858, "tranx-annot-bleu": 0.2736, "best-tranx-bleu": 0.1258, "best-tranx-bleu-rerank": 0.1871, "baseline": "lst = [ ( int ( x ) for x in range ( 10 ) ]", "tranx-annot": "[ dict ( random . choice ( i ) for i in range ( 0 , random . random ( 1 , 4 ) ) ) for _ in range ( 12 ) ]", "best-tranx": "[ random . choice ( x ) for x in random . sample ( list ( range ( 100 ) ) , 2 ) ]", "best-tranx-rerank": "[ random . randint ( 0 , 9 ) for _ in range ( 10 ) ]", "meteor-baseline": 0.5124, "meteor-tranx-annot": 0.6945, "meteor-best-tranx": 0.5411, "meteor-best-tranx-rerank": 0.5097, "rougel-baseline": 0.6286, "rougel-tranx-annot": 0.566, "rougel-best-tranx": 0.6364, "rougel-best-tranx-rerank": 0.6111}, {"intent": "Using %f with strftime() in Python to get microseconds", "rewritten_intent": null, "snippet": "datetime.datetime.now().strftime('%H:%M:%S.%f')", "question_id": 6677332, "baseline-bleu": 0.2291, "tranx-annot-bleu": 0.1856, "best-tranx-bleu": 0.1902, "best-tranx-bleu-rerank": 0.1902, "baseline": "datetime . datetime . now ( ) . date ( )", "tranx-annot": "datetime . datetime . combine ( lambda x : x . fillna ( x [ 1 ] . upper ( ) ) )", "best-tranx": "datetime . datetime . strptime ( ` < unk > ` , ` % . 2f ` )", "best-tranx-rerank": "datetime . datetime . strptime ( ` < unk > ` , ` % . 2f ` )", "meteor-baseline": 0.3278, "meteor-tranx-annot": 0.3717, "meteor-best-tranx": 0.2716, "meteor-best-tranx-rerank": 0.2716, "rougel-baseline": 0.5714, "rougel-tranx-annot": 0.4681, "rougel-best-tranx": 0.4762, "rougel-best-tranx-rerank": 0.4762}, {"intent": "Build a GQL query (for Google App Engine) that has a condition on ReferenceProperty", "rewritten_intent": "Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`", "snippet": "db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())", "question_id": 852055, "baseline-bleu": 0.0318, "tranx-annot-bleu": 0.692, "best-tranx-bleu": 0.5388, "best-tranx-bleu-rerank": 0.4179, "baseline": "cursor . execute ( 'INSERT#SPACE#INTO#SPACE#INTO#SPACE#table#SPACE#table#SPACE#table#SPACE#table#SPACE#table#SPACE#table#SPACE#table#SPACE#table#SPACE#table#SPACE#(%s,#SPACE", "tranx-annot": "engine . execute ( ` SELECT * FROM Schedule WHERE station = $ 1 ` , ` foo . key ( ) ` )", "best-tranx": "session . query ( SELECT * FROM Schedule WHERE station = $ 1 ) . filter ( * * foo . key ( ) )", "best-tranx-rerank": "db . session . query ( id = SELECT * FROM Schedule WHERE station = $ 1 ) . filter ( actions__contains = [ foo . key ( ) ] )", "meteor-baseline": 0.094, "meteor-tranx-annot": 0.8381, "meteor-best-tranx": 0.753, "meteor-best-tranx-rerank": 0.7559, "rougel-baseline": 0.122, "rougel-tranx-annot": 0.8511, "rougel-best-tranx": 0.7083, "rougel-best-tranx-rerank": 0.6667}, {"intent": "How to filter rows in pandas by regex", "rewritten_intent": "filter rows in pandas starting with alphabet 'f' using regular expression.", "snippet": "df.b.str.contains('^f')", "question_id": 15325182, "baseline-bleu": 0.1481, "tranx-annot-bleu": 0.0973, "best-tranx-bleu": 0.1505, "best-tranx-bleu-rerank": 0.1668, "baseline": "json . dumps ( ) . replace ( ',#SPACE#' )", "tranx-annot": "re [ ` f ` ]", "best-tranx": "df . filter ( lambda x : x . split ( ` : ` ) = = ` f ` )", "best-tranx-rerank": "df . filter ( lambda x : x . upper ( ) = = ` f ` )", "meteor-baseline": 0.3872, "meteor-tranx-annot": 0.2078, "meteor-best-tranx": 0.4574, "meteor-best-tranx-rerank": 0.4676, "rougel-baseline": 0.4286, "rougel-tranx-annot": 0.3158, "rougel-best-tranx": 0.4706, "rougel-best-tranx-rerank": 0.5161}, {"intent": "What is the best way to print a table with delimiters in Python", "rewritten_intent": "print a 2 dimensional list `tab` as a table with delimiters", "snippet": "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))", "question_id": 583557, "baseline-bleu": 0.0371, "tranx-annot-bleu": 0.3863, "best-tranx-bleu": 0.0774, "best-tranx-bleu-rerank": 0.0774, "baseline": "print ( a , key = lambda x : x [ 1 ] )", "tranx-annot": "print ( ` \\ n ` . join ( str ( x ) for i in tab ) )", "best-tranx": "print ( [ x . map ( ` ` , x ) for x in tab ] )", "best-tranx-rerank": "print ( [ x . map ( ` ` , x ) for x in tab ] )", "meteor-baseline": 0.0512, "meteor-tranx-annot": 0.5579, "meteor-best-tranx": 0.2312, "meteor-best-tranx-rerank": 0.2312, "rougel-baseline": 0.1333, "rougel-tranx-annot": 0.68, "rougel-best-tranx": 0.449, "rougel-best-tranx-rerank": 0.449}, {"intent": "Pandas: Delete rows based on multiple columns values", "rewritten_intent": "pandas: delete rows in dataframe `df` based on multiple columns values", "snippet": "df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()", "question_id": 38535931, "baseline-bleu": 0.0795, "tranx-annot-bleu": 0.0734, "best-tranx-bleu": 0.077, "best-tranx-bleu-rerank": 0.0677, "baseline": "df . groupby ( [ 'stock' , 'Weeks' ] , axis = 1 )", "tranx-annot": "pd . Data Frame ( df . columns [ [ values ] ] , axis = 1 )", "best-tranx": "df . drop ( [ df ] , axis = 1 )", "best-tranx-rerank": "pd . concat ( [ df , pd . Data Frame ( df ) ] , axis = 1 )", "meteor-baseline": 0.1984, "meteor-tranx-annot": 0.1389, "meteor-best-tranx": 0.1423, "meteor-best-tranx-rerank": 0.1772, "rougel-baseline": 0.4545, "rougel-tranx-annot": 0.3182, "rougel-best-tranx": 0.3684, "rougel-best-tranx-rerank": 0.3913}, {"intent": "String Formatting in Python 3", "rewritten_intent": "format the variables `self.goals` and `self.penalties` using string formatting", "snippet": "\"\"\"({:d} goals, ${:d})\"\"\".format(self.goals, self.penalties)", "question_id": 13945749, "baseline-bleu": 0.0523, "tranx-annot-bleu": 0.2353, "best-tranx-bleu": 0.2952, "best-tranx-bleu-rerank": 0.2952, "baseline": "soup . find_element_by_css_selector ( 'sample.org' , s = '<unk>' )", "tranx-annot": "` ` ` driver ` ` ` . format ( self . goals )", "best-tranx": "` ` ` str_2 ` ` ` . format ( ` self . goals ` , ` self . penalties ` )", "best-tranx-rerank": "` ` ` str_2 ` ` ` . format ( ` self . goals ` , ` self . penalties ` )", "meteor-baseline": 0.1562, "meteor-tranx-annot": 0.422, "meteor-best-tranx": 0.5229, "meteor-best-tranx-rerank": 0.5229, "rougel-baseline": 0.375, "rougel-tranx-annot": 0.5909, "rougel-best-tranx": 0.6538, "rougel-best-tranx-rerank": 0.6538}, {"intent": "String Formatting in Python 3", "rewritten_intent": "format string \"({} goals, ${})\" with variables `goals` and `penalties`", "snippet": "\"\"\"({} goals, ${})\"\"\".format(self.goals, self.penalties)", "question_id": 13945749, "baseline-bleu": 0.0999, "tranx-annot-bleu": 0.4786, "best-tranx-bleu": 0.7303, "best-tranx-bleu-rerank": 0.7303, "baseline": "re . split ( '(.*?[.?!])' , 'aaa#SPACE#' , s )", "tranx-annot": "print ( ( ` ( { } goals , $ { } ) ` , goals , ` penalties ` , penalties ) )", "best-tranx": "` ` ` ( { } goals , $ { } ) ` ` ` . format ( goals , penalties )", "best-tranx-rerank": "` ` ` ( { } goals , $ { } ) ` ` ` . format ( goals , penalties )", "meteor-baseline": 0.3034, "meteor-tranx-annot": 0.5335, "meteor-best-tranx": 0.8543, "meteor-best-tranx-rerank": 0.8543, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.72, "rougel-best-tranx": 0.9167, "rougel-best-tranx-rerank": 0.9167}, {"intent": "String Formatting in Python 3", "rewritten_intent": "format string \"({0.goals} goals, ${0.penalties})\"", "snippet": "\"\"\"({0.goals} goals, ${0.penalties})\"\"\".format(self)", "question_id": 13945749, "baseline-bleu": 0.0436, "tranx-annot-bleu": 0.5714, "best-tranx-bleu": 0.3985, "best-tranx-bleu-rerank": 0.3985, "baseline": "re . findall ( 'abc-z])\\\\)' , 'Current#SPACE#bbb#SPACE#bbb#SPACE#<unk>#SPACE#<unk>#SPACE#this#SPACE#<unk>' )", "tranx-annot": "` ` ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` ` ` . format ( ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` )", "best-tranx": "` ` ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` ` ` . format ( ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` , ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` )", "best-tranx-rerank": "` ` ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` ` ` . format ( ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` , ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` )", "meteor-baseline": 0.2063, "meteor-tranx-annot": 0.808, "meteor-best-tranx": 0.7757, "meteor-best-tranx-rerank": 0.7757, "rougel-baseline": 0.24, "rougel-tranx-annot": 0.7353, "rougel-best-tranx": 0.5814, "rougel-best-tranx-rerank": 0.5814}, {"intent": "Convert list of lists to list of integers", "rewritten_intent": "convert list of lists `L` to list of integers", "snippet": "[int(''.join(str(d) for d in x)) for x in L]", "question_id": 18524642, "baseline-bleu": 0.1113, "tranx-annot-bleu": 0.1197, "best-tranx-bleu": 0.1031, "best-tranx-bleu-rerank": 0.1031, "baseline": "[ int ( i ) for i in range ( 3 ) ]", "tranx-annot": "[ int ( i ) for i in zip ( * L ) ]", "best-tranx": "[ int ( i ) for i in L ]", "best-tranx-rerank": "[ int ( i ) for i in L ]", "meteor-baseline": 0.2654, "meteor-tranx-annot": 0.2876, "meteor-best-tranx": 0.3456, "meteor-best-tranx-rerank": 0.3456, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.5405, "rougel-best-tranx": 0.4848, "rougel-best-tranx-rerank": 0.4848}, {"intent": "Convert list of lists to list of integers", "rewritten_intent": "combine elements of each list in list `L` into digits of a single integer", "snippet": "[''.join(str(d) for d in x) for x in L]", "question_id": 18524642, "baseline-bleu": 0.1009, "tranx-annot-bleu": 0.264, "best-tranx-bleu": 0.0671, "best-tranx-bleu-rerank": 0.0671, "baseline": "list ( lst , key = lambda x : x [ 1 ] ) for i in range ( 3 ) ]", "tranx-annot": "[ int ( x ) for x in L ]", "best-tranx": "map ( int , [ 1 , 2 , 3 ] )", "best-tranx-rerank": "map ( int , [ 1 , 2 , 3 ] )", "meteor-baseline": 0.2475, "meteor-tranx-annot": 0.4649, "meteor-best-tranx": 0.1042, "meteor-best-tranx-rerank": 0.1042, "rougel-baseline": 0.4762, "rougel-tranx-annot": 0.6, "rougel-best-tranx": 0.25, "rougel-best-tranx-rerank": 0.25}, {"intent": "Convert list of lists to list of integers", "rewritten_intent": "convert a list of lists `L` to list of integers", "snippet": "L = [int(''.join([str(y) for y in x])) for x in L]", "question_id": 18524642, "baseline-bleu": 0.1313, "tranx-annot-bleu": 0.09, "best-tranx-bleu": 0.0729, "best-tranx-bleu-rerank": 0.0729, "baseline": "[ int ( x ) for x in L ]", "tranx-annot": "[ int ( i ) for i in zip ( * L ) ]", "best-tranx": "[ map ( int , sublist ) for sublist in L ]", "best-tranx-rerank": "[ map ( int , sublist ) for sublist in L ]", "meteor-baseline": 0.3706, "meteor-tranx-annot": 0.1946, "meteor-best-tranx": 0.2754, "meteor-best-tranx-rerank": 0.2754, "rougel-baseline": 0.5405, "rougel-tranx-annot": 0.4878, "rougel-best-tranx": 0.4103, "rougel-best-tranx-rerank": 0.4103}, {"intent": "How to write a list to a file with newlines in Python3", "rewritten_intent": "write the elements of list `lines` concatenated by special character '\\n' to file `myfile`", "snippet": "myfile.write('\\n'.join(lines))", "question_id": 7138686, "baseline-bleu": 0.091, "tranx-annot-bleu": 0.4059, "best-tranx-bleu": 0.2731, "best-tranx-bleu-rerank": 0.2731, "baseline": "[ x for x in my_list if not isinstance ( a , b ) ]", "tranx-annot": "` ` ` ` ` ` . join ( lines )", "best-tranx": "print ( ` \\ n ` . join ( [ re . sub ( ` < unk > ` , ` ` , lines ) for lines in lines ] ) )", "best-tranx-rerank": "print ( ` \\ n ` . join ( [ re . sub ( ` < unk > ` , ` ` , lines ) for lines in lines ] ) )", "meteor-baseline": 0.0709, "meteor-tranx-annot": 0.4908, "meteor-best-tranx": 0.5397, "meteor-best-tranx-rerank": 0.5397, "rougel-baseline": 0.1379, "rougel-tranx-annot": 0.56, "rougel-best-tranx": 0.5217, "rougel-best-tranx-rerank": 0.5217}, {"intent": "Removing an element from a list based on a predicate", "rewritten_intent": "removing an element from a list based on a predicate 'X' or 'N'", "snippet": "[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]", "question_id": 1866343, "baseline-bleu": 0.0385, "tranx-annot-bleu": 0.0341, "best-tranx-bleu": 0.0366, "best-tranx-bleu-rerank": 0.0366, "baseline": "sorted ( item , key = lambda x : x [ 'weight' ] )", "tranx-annot": "dict ( ( k , str ( v ) ) for k , v in d . items ( ) )", "best-tranx": "[ type ( x ) for x in zip ( * my_list ) ]", "best-tranx-rerank": "[ type ( x ) for x in zip ( * my_list ) ]", "meteor-baseline": 0.1003, "meteor-tranx-annot": 0.0565, "meteor-best-tranx": 0.0865, "meteor-best-tranx-rerank": 0.0865, "rougel-baseline": 0.2642, "rougel-tranx-annot": 0.1379, "rougel-best-tranx": 0.2353, "rougel-best-tranx-rerank": 0.2353}, {"intent": "python regular expression to remove repeated words", "rewritten_intent": "Remove duplicate words from a string `text` using regex", "snippet": "text = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', text)", "question_id": 17238587, "baseline-bleu": 0.0295, "tranx-annot-bleu": 0.0483, "best-tranx-bleu": 0.0558, "best-tranx-bleu-rerank": 0.0473, "baseline": "\"\"\"\"\"\" . join ( chr ( s ) )", "tranx-annot": "` ` ` ` ` ` . join ( re . split ( text ) )", "best-tranx": "text = ` ` . join ( sorted ( text . split ( ) , key = len ) )", "best-tranx-rerank": "text = text . decode ( ` utf - 8 ` ) . split ( )", "meteor-baseline": 0.1368, "meteor-tranx-annot": 0.2075, "meteor-best-tranx": 0.194, "meteor-best-tranx-rerank": 0.192, "rougel-baseline": 0.3673, "rougel-tranx-annot": 0.4314, "rougel-best-tranx": 0.4727, "rougel-best-tranx-rerank": 0.3922}, {"intent": "Counting non zero values in each column of a dataframe in python", "rewritten_intent": "count non zero values in each column in pandas data frame", "snippet": "df.astype(bool).sum(axis=1)", "question_id": 26053849, "baseline-bleu": 0.1322, "tranx-annot-bleu": 0.1988, "best-tranx-bleu": 0.1967, "best-tranx-bleu-rerank": 0.1967, "baseline": "df . groupby ( [ 'stock' , 'same2' ] )", "tranx-annot": "pd . Data Frame ( pd . Data Frame ( df . values . sum ( ) ) , axis = 1 ) . click ( )", "best-tranx": "df . groupby ( ` index ` ) . head ( 1 )", "best-tranx-rerank": "df . groupby ( ` index ` ) . head ( 1 )", "meteor-baseline": 0.1527, "meteor-tranx-annot": 0.617, "meteor-best-tranx": 0.5403, "meteor-best-tranx-rerank": 0.5403, "rougel-baseline": 0.2963, "rougel-tranx-annot": 0.55, "rougel-best-tranx": 0.6154, "rougel-best-tranx-rerank": 0.6154}, {"intent": "Python match string if it does not start with X", "rewritten_intent": "search for string that matches regular expression pattern '(?<!Distillr)\\\\\\\\AcroTray\\\\.exe' in string 'C:\\\\SomeDir\\\\AcroTray.exe'", "snippet": "re.search('(?<!Distillr)\\\\\\\\AcroTray\\\\.exe', 'C:\\\\SomeDir\\\\AcroTray.exe')", "question_id": 15534223, "baseline-bleu": 0.067, "tranx-annot-bleu": 0.939, "best-tranx-bleu": 0.939, "best-tranx-bleu-rerank": 0.939, "baseline": "soup . find_all ( '<unk>' , href = re . compile ( '<unk>' ) )", "tranx-annot": "re . compile ( ` ( ? < ! Distillr ) \\ \\ \\ \\ Acro Tray \\ \\ . exe ` , ` C : \\ \\ Some Dir \\ \\ Acro Tray . exe ` )", "best-tranx": "re . findall ( ` ( ? < ! Distillr ) \\ \\ \\ \\ Acro Tray \\ \\ . exe ` , ` C : \\ \\ Some Dir \\ \\ Acro Tray . exe ` )", "best-tranx-rerank": "re . findall ( ` ( ? < ! Distillr ) \\ \\ \\ \\ Acro Tray \\ \\ . exe ` , ` C : \\ \\ Some Dir \\ \\ Acro Tray . exe ` )", "meteor-baseline": 0.2483, "meteor-tranx-annot": 0.9736, "meteor-best-tranx": 0.9736, "meteor-best-tranx-rerank": 0.9736, "rougel-baseline": 0.4262, "rougel-tranx-annot": 0.9737, "rougel-best-tranx": 0.9737, "rougel-best-tranx-rerank": 0.9737}, {"intent": "String to list in Python", "rewritten_intent": "split string 'QH QD JC KD JS' into a list on white spaces", "snippet": "\"\"\"QH QD JC KD JS\"\"\".split()", "question_id": 5453026, "baseline-bleu": 0.1268, "tranx-annot-bleu": 0.397, "best-tranx-bleu": 0.3685, "best-tranx-bleu-rerank": 0.3685, "baseline": "re . split ( '(ddd)' , 'aaa#SPACE#' , '#SPACE#' )", "tranx-annot": "QH QD JC KD JS . list ( on = ` QH QD JC KD JS ` )", "best-tranx": "re . match ( ` < unk > ` , ` QH QD JC KD JS ` ) . split ( ` ` )", "best-tranx-rerank": "re . match ( ` < unk > ` , ` QH QD JC KD JS ` ) . split ( ` ` )", "meteor-baseline": 0.4022, "meteor-tranx-annot": 0.583, "meteor-best-tranx": 0.9132, "meteor-best-tranx-rerank": 0.9132, "rougel-baseline": 0.5263, "rougel-tranx-annot": 0.6061, "rougel-best-tranx": 0.7692, "rougel-best-tranx-rerank": 0.7692}, {"intent": "Parsing XML in Python with regex", "rewritten_intent": "search for occurrences of regex pattern '>.*<' in xml string `line`", "snippet": "print(re.search('>.*<', line).group(0))", "question_id": 18168684, "baseline-bleu": 0.2008, "tranx-annot-bleu": 0.5713, "best-tranx-bleu": 0.6453, "best-tranx-bleu-rerank": 0.6453, "baseline": "re . findall ( 'a-zA-Z]' , line )", "tranx-annot": "print ( re . sub ( ` > . * < ` , ` \\ \\ 1 ` , line ) . group ( 1 ) )", "best-tranx": "re . match ( ` > . * < ` , line ) . group ( 1 )", "best-tranx-rerank": "re . match ( ` > . * < ` , line ) . group ( 1 )", "meteor-baseline": 0.3079, "meteor-tranx-annot": 0.8658, "meteor-best-tranx": 0.7612, "meteor-best-tranx-rerank": 0.7612, "rougel-baseline": 0.4324, "rougel-tranx-annot": 0.7917, "rougel-best-tranx": 0.8205, "rougel-best-tranx-rerank": 0.8205}, {"intent": "How to empty a file using Python", "rewritten_intent": "erase all the contents of a file `filename`", "snippet": "open(filename, 'w').close()", "question_id": 4914277, "baseline-bleu": 0.1119, "tranx-annot-bleu": 0.6866, "best-tranx-bleu": 0.6866, "best-tranx-bleu-rerank": 0.6866, "baseline": "with open ( 'filename.txt' ) as f : #NEWLINE# #INDENT# f . read ( )", "tranx-annot": "open ( ` filename ` , ` w ` ) . close ( )", "best-tranx": "open ( ` filename ` , ` w ` ) . close ( )", "best-tranx-rerank": "open ( ` filename ` , ` w ` ) . close ( )", "meteor-baseline": 0.5852, "meteor-tranx-annot": 0.9759, "meteor-best-tranx": 0.9759, "meteor-best-tranx-rerank": 0.9759, "rougel-baseline": 0.5143, "rougel-tranx-annot": 0.9231, "rougel-best-tranx": 0.9231, "rougel-best-tranx-rerank": 0.9231}, {"intent": "how to convert a string date into datetime format in python?", "rewritten_intent": "convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'", "snippet": "datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "question_id": 19068269, "baseline-bleu": 0.4264, "tranx-annot-bleu": 0.4751, "best-tranx-bleu": 0.529, "best-tranx-bleu-rerank": 0.529, "baseline": "datetime . datetime . strptime ( 'Jun#SPACE#1#SPACE#1#SPACE#%H:%M:%S' )", "tranx-annot": "datetime . datetime . strptime ( ` % Y - % m - % d % H : % M : % S . % f ` , ` ` ) . strftime ( ` % Y - % m - % d % H : % M : % S . % f ` )", "best-tranx": "datetime . strptime ( ` % Y - % m - % d % H : % M : % S . % f ` , ` % Y - % m - % d % H : % M : % S . % f ` )", "best-tranx-rerank": "datetime . strptime ( ` % Y - % m - % d % H : % M : % S . % f ` , ` % Y - % m - % d % H : % M : % S . % f ` )", "meteor-baseline": 0.4414, "meteor-tranx-annot": 0.8802, "meteor-best-tranx": 0.878, "meteor-best-tranx-rerank": 0.878, "rougel-baseline": 0.5763, "rougel-tranx-annot": 0.6744, "rougel-best-tranx": 0.7179, "rougel-best-tranx-rerank": 0.7179}, {"intent": "What's the fastest way to locate a list element within a list in python?", "rewritten_intent": "find the index of a list with the first element equal to '332' within the list of lists `thelist`", "snippet": "[index for index, item in enumerate(thelist) if item[0] == '332']", "question_id": 20683167, "baseline-bleu": 0.0889, "tranx-annot-bleu": 0.0865, "best-tranx-bleu": 0.2247, "best-tranx-bleu-rerank": 0.2247, "baseline": "[ x [ 'value' ] for item in list_list ]", "tranx-annot": "[ x [ 0 ] for x in thelist ]", "best-tranx": "[ x for x in thelist if x [ 0 ] = = 1 ]", "best-tranx-rerank": "[ x for x in thelist if x [ 0 ] = = 1 ]", "meteor-baseline": 0.2143, "meteor-tranx-annot": 0.3035, "meteor-best-tranx": 0.4499, "meteor-best-tranx-rerank": 0.4499, "rougel-baseline": 0.5294, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.5946, "rougel-best-tranx-rerank": 0.5946}, {"intent": "Python: trying to lower a string and remove non-alphanumeric characters aside from space", "rewritten_intent": "lower a string `text` and remove non-alphanumeric characters aside from space", "snippet": "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()", "question_id": 30693804, "baseline-bleu": 0.2815, "tranx-annot-bleu": 0.1226, "best-tranx-bleu": 0.4233, "best-tranx-bleu-rerank": 0.4233, "baseline": "re . split ( 'a-zA-Z]' , '' , text )", "tranx-annot": "` ` ` ` ` ` . join ( c for c in text if c . lower ( ) )", "best-tranx": "re . sub ( ` [ ^ 0 - 9a - z A - Z ] + ` , ` ` , text )", "best-tranx-rerank": "re . sub ( ` [ ^ 0 - 9a - z A - Z ] + ` , ` ` , text )", "meteor-baseline": 0.4613, "meteor-tranx-annot": 0.232, "meteor-best-tranx": 0.5558, "meteor-best-tranx-rerank": 0.5558, "rougel-baseline": 0.6154, "rougel-tranx-annot": 0.4444, "rougel-best-tranx": 0.7018, "rougel-best-tranx-rerank": 0.7018}, {"intent": "Python: trying to lower a string and remove non-alphanumeric characters aside from space", "rewritten_intent": "remove all non-alphanumeric characters except space from a string `text` and lower it", "snippet": "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()", "question_id": 30693804, "baseline-bleu": 0.1905, "tranx-annot-bleu": 0.0036, "best-tranx-bleu": 0.0616, "best-tranx-bleu-rerank": 0.3082, "baseline": "re . sub ( '($' , '' , s )", "tranx-annot": "text . strip ( )", "best-tranx": "return ` ` . join ( c for c in text if c . isdigit ( ) )", "best-tranx-rerank": "re . sub ( ` [ ^ 0 - 9a - z A - Z ] + ` , ` ` , text )", "meteor-baseline": 0.359, "meteor-tranx-annot": 0.1652, "meteor-best-tranx": 0.1908, "meteor-best-tranx-rerank": 0.3891, "rougel-baseline": 0.5652, "rougel-tranx-annot": 0.2703, "rougel-best-tranx": 0.36, "rougel-best-tranx-rerank": 0.5}, {"intent": "Subscripting text in matplotlib labels", "rewritten_intent": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.", "snippet": "plt.plot(x, y, label='H\\u2082O')", "question_id": 17138464, "baseline-bleu": 0.1066, "tranx-annot-bleu": 0.1086, "best-tranx-bleu": 0.129, "best-tranx-bleu-rerank": 0.129, "baseline": "data [ 'a' ] = df [ 'a' ] == 'a' )", "tranx-annot": "plt . execute ( ` x ` , 0 , { ` 2 ` : ` 2 ` } )", "best-tranx": "plt . savefig ( ` H20 ` , dpi = 300 )", "best-tranx-rerank": "plt . savefig ( ` H20 ` , dpi = 300 )", "meteor-baseline": 0.2301, "meteor-tranx-annot": 0.3561, "meteor-best-tranx": 0.341, "meteor-best-tranx-rerank": 0.341, "rougel-baseline": 0.2286, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.5714, "rougel-best-tranx-rerank": 0.5714}, {"intent": "Subscripting text in matplotlib labels", "rewritten_intent": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.", "snippet": "plt.plot(x, y, label='$H_2O$')", "question_id": 17138464, "baseline-bleu": 0.1066, "tranx-annot-bleu": 0.1086, "best-tranx-bleu": 0.129, "best-tranx-bleu-rerank": 0.129, "baseline": "data [ 'a' ] = df [ 'a' ] == 'a' )", "tranx-annot": "plt . execute ( ` x ` , 0 , { ` 2 ` : ` 2 ` } )", "best-tranx": "plt . savefig ( ` H20 ` , dpi = 300 )", "best-tranx-rerank": "plt . savefig ( ` H20 ` , dpi = 300 )", "meteor-baseline": 0.2301, "meteor-tranx-annot": 0.3561, "meteor-best-tranx": 0.341, "meteor-best-tranx-rerank": 0.341, "rougel-baseline": 0.2286, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.5714, "rougel-best-tranx-rerank": 0.5714}, {"intent": "Looping over a list in Python", "rewritten_intent": "loop over a list `mylist` if sublists length equals 3", "snippet": "[x for x in mylist if len(x) == 3]", "question_id": 9138112, "baseline-bleu": 0.1215, "tranx-annot-bleu": 0.0992, "best-tranx-bleu": 0.4121, "best-tranx-bleu-rerank": 0.4121, "baseline": "[ item [ 0 ] for item in range ( 0 , len ( l ) ]", "tranx-annot": "mylist = [ ( i , j ) for i in zip ( f , mylist ) ]", "best-tranx": "[ item for item in mylist if len ( item ) = = 1 ]", "best-tranx-rerank": "[ item for item in mylist if len ( item ) = = 1 ]", "meteor-baseline": 0.3155, "meteor-tranx-annot": 0.2614, "meteor-best-tranx": 0.6989, "meteor-best-tranx-rerank": 0.6989, "rougel-baseline": 0.4375, "rougel-tranx-annot": 0.4848, "rougel-best-tranx": 0.7333, "rougel-best-tranx-rerank": 0.7333}, {"intent": "Initialize a list of objects in Python", "rewritten_intent": "initialize a list `lst` of 100 objects Object()", "snippet": "lst = [Object() for _ in range(100)]", "question_id": 1807026, "baseline-bleu": 0.4656, "tranx-annot-bleu": 0.248, "best-tranx-bleu": 0.4709, "best-tranx-bleu-rerank": 0.4709, "baseline": "[ ( x , y ) for i in range ( 100 ) ]", "tranx-annot": "lst = [ [ ] for i in range ( len ( lst ) ) ]", "best-tranx": "lst = [ ( p + 0 ) for i in range ( 100 ) ]", "best-tranx-rerank": "lst = [ ( p + 0 ) for i in range ( 100 ) ]", "meteor-baseline": 0.6914, "meteor-tranx-annot": 0.5625, "meteor-best-tranx": 0.8294, "meteor-best-tranx-rerank": 0.8294, "rougel-baseline": 0.7143, "rougel-tranx-annot": 0.7333, "rougel-best-tranx": 0.8, "rougel-best-tranx-rerank": 0.8}, {"intent": "Initialize a list of objects in Python", "rewritten_intent": "create list `lst` containing 100 instances of object `Object`", "snippet": "lst = [Object() for i in range(100)]", "question_id": 1807026, "baseline-bleu": 0.1175, "tranx-annot-bleu": 0.1703, "best-tranx-bleu": 0.2535, "best-tranx-bleu-rerank": 0.2535, "baseline": "[ ( x [ 0 ] for item in<unk><unk> ) ]", "tranx-annot": "lst = [ item for item in Object if Object ! = ` lst ` ]", "best-tranx": "lst = [ Object for Object in lst ]", "best-tranx-rerank": "lst = [ Object for Object in lst ]", "meteor-baseline": 0.2982, "meteor-tranx-annot": 0.2465, "meteor-best-tranx": 0.3553, "meteor-best-tranx-rerank": 0.3553, "rougel-baseline": 0.3871, "rougel-tranx-annot": 0.4667, "rougel-best-tranx": 0.6087, "rougel-best-tranx-rerank": 0.6087}, {"intent": "selenium how to get the content of href within some targeted class", "rewritten_intent": "get the content of child tag with`href` attribute whose parent has css `someclass`", "snippet": "self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')", "question_id": 19664253, "baseline-bleu": 0.1121, "tranx-annot-bleu": 0.0753, "best-tranx-bleu": 0.0845, "best-tranx-bleu-rerank": 0.1876, "baseline": "print ( soup . get ( '<unk>' ) )", "tranx-annot": "print ( subprocess . Popen ( someclass , someclass ) )", "best-tranx": "min ( enumerate ( someclass ) , key = lambda x : x [ 1 ] )", "best-tranx-rerank": "print ( content . get_attribute ( ` div ` ) )", "meteor-baseline": 0.2606, "meteor-tranx-annot": 0.1648, "meteor-best-tranx": 0.133, "meteor-best-tranx-rerank": 0.3859, "rougel-baseline": 0.4375, "rougel-tranx-annot": 0.4, "rougel-best-tranx": 0.2778, "rougel-best-tranx-rerank": 0.5333}, {"intent": "Joining Table/DataFrames with common Column in Python", "rewritten_intent": "joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes", "snippet": "df1.merge(df2, on='Date_Time')", "question_id": 13793321, "baseline-bleu": 0.1137, "tranx-annot-bleu": 0.1617, "best-tranx-bleu": 0.1175, "best-tranx-bleu-rerank": 0.2166, "baseline": "df [ pd . DataFrame ( df [ 'col_name' ] , how = 'inner' )", "tranx-annot": "pd . merge ( df1 , df2 , args = [ ` Date_Time ` , ` Date_Time ` ] , how = ` d ` )", "best-tranx": "df1 . apply ( lambda x : x . tolist ( ) , axis = 1 )", "best-tranx-rerank": "pd . merge ( df1 , df2 , how = ` inner ` , on = [ ` Date_Time ` ] )", "meteor-baseline": 0.4472, "meteor-tranx-annot": 0.7151, "meteor-best-tranx": 0.24, "meteor-best-tranx-rerank": 0.8654, "rougel-baseline": 0.4375, "rougel-tranx-annot": 0.5789, "rougel-best-tranx": 0.4138, "rougel-best-tranx-rerank": 0.7059}, {"intent": "insert variable values into a string in python", "rewritten_intent": "use `%s` operator to print variable values `str1` inside a string", "snippet": "'first string is: %s, second one is: %s' % (str1, 'geo.tif')", "question_id": 3367288, "baseline-bleu": 0.0481, "tranx-annot-bleu": 0.1189, "best-tranx-bleu": 0.2332, "best-tranx-bleu-rerank": 0.2332, "baseline": "print ( '#SPACE#' . join ( s )", "tranx-annot": "` ` ` % s ` ` ` . apply ( lambda x : x * y )", "best-tranx": "print ( ` < unk > % s , < unk > ` % ( str1 , str1 ) )", "best-tranx-rerank": "print ( ` < unk > % s , < unk > ` % ( str1 , str1 ) )", "meteor-baseline": 0.1266, "meteor-tranx-annot": 0.2615, "meteor-best-tranx": 0.3037, "meteor-best-tranx-rerank": 0.3037, "rougel-baseline": 0.3243, "rougel-tranx-annot": 0.4651, "rougel-best-tranx": 0.4444, "rougel-best-tranx-rerank": 0.4444}, {"intent": "Split a string by a delimiter in python", "rewritten_intent": null, "snippet": "[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]", "question_id": 3475251, "baseline-bleu": 0.0518, "tranx-annot-bleu": 0.2264, "best-tranx-bleu": 0.0653, "best-tranx-bleu-rerank": 0.0709, "baseline": "\"\"\"\"\"\" . join ( lambda x : : : - 1 ]", "tranx-annot": "[ x . split ( ` ` ) for x in s . split ( ` , ` ) ]", "best-tranx": "` ` ` ` ` ` . join ( map ( str , s [ : : 2 ] ) )", "best-tranx-rerank": "` ` ` ` ` ` . join ( re . findall ( ` < unk > ` , s ) )", "meteor-baseline": 0.1311, "meteor-tranx-annot": 0.5232, "meteor-best-tranx": 0.1942, "meteor-best-tranx-rerank": 0.205, "rougel-baseline": 0.3265, "rougel-tranx-annot": 0.6538, "rougel-best-tranx": 0.4528, "rougel-best-tranx-rerank": 0.3704}, {"intent": "check if a directory exists and create it if necessary", "rewritten_intent": "check if directory `directory ` exists and create it if necessary", "snippet": "if (not os.path.exists(directory)):\n    os.makedirs(directory)", "question_id": 273192, "baseline-bleu": 0.0248, "tranx-annot-bleu": 0.1604, "best-tranx-bleu": 0.3503, "best-tranx-bleu-rerank": 0.3172, "baseline": "os . chdir ( )", "tranx-annot": "os . path . isfile ( ` directory ` )", "best-tranx": "print ( type ( os . path . exists ( ` directory ` ) ) )", "best-tranx-rerank": "print ( os . path . exists ( ` directory ` ) )", "meteor-baseline": 0.1793, "meteor-tranx-annot": 0.1934, "meteor-best-tranx": 0.3946, "meteor-best-tranx-rerank": 0.2717, "rougel-baseline": 0.3333, "rougel-tranx-annot": 0.4828, "rougel-best-tranx": 0.6857, "rougel-best-tranx-rerank": 0.625}, {"intent": "check if a directory exists and create it if necessary", "rewritten_intent": "check if a directory `path` exists and create it if necessary", "snippet": "try:\n    os.makedirs(path)\nexcept OSError:\n    if (not os.path.isdir(path)):\n        raise", "question_id": 273192, "baseline-bleu": 0.1422, "tranx-annot-bleu": 0.0713, "best-tranx-bleu": 0.0111, "best-tranx-bleu-rerank": 0.0206, "baseline": "os . path . split ( [ '<unk>' , '/r' ] )", "tranx-annot": "os . path . isfile ( path )", "best-tranx": "sys . exit ( 0 )", "best-tranx-rerank": "os . walk ( path )", "meteor-baseline": 0.1747, "meteor-tranx-annot": 0.2886, "meteor-best-tranx": 0.0649, "meteor-best-tranx-rerank": 0.161, "rougel-baseline": 0.2727, "rougel-tranx-annot": 0.4242, "rougel-best-tranx": 0.1935, "rougel-best-tranx-rerank": 0.3226}, {"intent": "check if a directory exists and create it if necessary", "rewritten_intent": "check if a directory `path` exists and create it if necessary", "snippet": "distutils.dir_util.mkpath(path)", "question_id": 273192, "baseline-bleu": 0.0848, "tranx-annot-bleu": 0.3303, "best-tranx-bleu": 0.1882, "best-tranx-bleu-rerank": 0.3115, "baseline": "os . path . split ( [ '<unk>' , '/r' ] )", "tranx-annot": "os . path . isfile ( path )", "best-tranx": "sys . exit ( 0 )", "best-tranx-rerank": "os . walk ( path )", "meteor-baseline": 0.2747, "meteor-tranx-annot": 0.5575, "meteor-best-tranx": 0.1923, "meteor-best-tranx-rerank": 0.4808, "rougel-baseline": 0.3704, "rougel-tranx-annot": 0.625, "rougel-best-tranx": 0.4286, "rougel-best-tranx-rerank": 0.5714}, {"intent": "check if a directory exists and create it if necessary", "rewritten_intent": "check if a directory `path` exists and create it if necessary", "snippet": "try:\n    os.makedirs(path)\nexcept OSError as exception:\n    if (exception.errno != errno.EEXIST):\n        raise", "question_id": 273192, "baseline-bleu": 0.0725, "tranx-annot-bleu": 0.0389, "best-tranx-bleu": 0.0094, "best-tranx-bleu-rerank": 0.0174, "baseline": "os . path . split ( [ '<unk>' , '/r' ] )", "tranx-annot": "os . path . isfile ( path )", "best-tranx": "sys . exit ( 0 )", "best-tranx-rerank": "os . walk ( path )", "meteor-baseline": 0.1186, "meteor-tranx-annot": 0.124, "meteor-best-tranx": 0.0625, "meteor-best-tranx-rerank": 0.1042, "rougel-baseline": 0.2667, "rougel-tranx-annot": 0.3529, "rougel-best-tranx": 0.1875, "rougel-best-tranx-rerank": 0.3125}, {"intent": "Replace a substring when it is a separate word", "rewritten_intent": "Replace a separate word 'H3' by 'H1' in a string 'text'", "snippet": "re.sub('\\\\bH3\\\\b', 'H1', text)", "question_id": 18785032, "baseline-bleu": 0.2715, "tranx-annot-bleu": 0.1485, "best-tranx-bleu": 0.1722, "best-tranx-bleu-rerank": 0.1722, "baseline": "re . sub ( '[a-zA-Z]' , 'a#SPACE#' )", "tranx-annot": "re . findall ( ` H3 ` , ` text ` )", "best-tranx": "` ` ` ` ` ` . join ( map ( ` ` . join , map ( str . replace , ` H3 ` , ` H1 ` ) ) )", "best-tranx-rerank": "` ` ` ` ` ` . join ( map ( ` ` . join , map ( str . replace , ` H3 ` , ` H1 ` ) ) )", "meteor-baseline": 0.4416, "meteor-tranx-annot": 0.416, "meteor-best-tranx": 0.3768, "meteor-best-tranx-rerank": 0.3768, "rougel-baseline": 0.4762, "rougel-tranx-annot": 0.6875, "rougel-best-tranx": 0.4231, "rougel-best-tranx-rerank": 0.4231}, {"intent": "Python: removing characters except digits from string", "rewritten_intent": "substitute ASCII letters in string 'aas30dsa20' with empty string ''", "snippet": "re.sub('\\\\D', '', 'aas30dsa20')", "question_id": 1450897, "baseline-bleu": 0.4104, "tranx-annot-bleu": 0.2945, "best-tranx-bleu": 0.1323, "best-tranx-bleu-rerank": 0.1323, "baseline": "re . split ( ',' , '' , '' , text )", "tranx-annot": "re . search ( ` aas30dsa20 ` , ` ` )", "best-tranx": "` ` ` ` ` ` . join ( map ( chr , int ( ` ` ) ) )", "best-tranx-rerank": "` ` ` ` ` ` . join ( map ( chr , int ( ` ` ) ) )", "meteor-baseline": 0.5603, "meteor-tranx-annot": 0.5439, "meteor-best-tranx": 0.3673, "meteor-best-tranx-rerank": 0.3673, "rougel-baseline": 0.7273, "rougel-tranx-annot": 0.7143, "rougel-best-tranx": 0.5405, "rougel-best-tranx-rerank": 0.5405}, {"intent": "Python: removing characters except digits from string", "rewritten_intent": "get digits only from a string `aas30dsa20` using lambda function", "snippet": "\"\"\"\"\"\".join([x for x in 'aas30dsa20' if x.isdigit()])", "question_id": 1450897, "baseline-bleu": 0.1241, "tranx-annot-bleu": 0.1758, "best-tranx-bleu": 0.3137, "best-tranx-bleu-rerank": 0.0638, "baseline": "[ int ( x ) for x in s . split ( ) ]", "tranx-annot": "print ( ` ` . join ( map ( str , aas30dsa20 ) ) )", "best-tranx": "print ( [ ` ` . join ( c for c in aas30dsa20 if c . isdigit ( ) ) for c in aas30dsa20 ] )", "best-tranx-rerank": "list ( re . findall ( ` \\ \\ d + ` , aas30dsa20 ) )", "meteor-baseline": 0.2301, "meteor-tranx-annot": 0.2433, "meteor-best-tranx": 0.5339, "meteor-best-tranx-rerank": 0.166, "rougel-baseline": 0.5641, "rougel-tranx-annot": 0.45, "rougel-best-tranx": 0.6275, "rougel-best-tranx-rerank": 0.3902}, {"intent": "How to access a tag called \"name\" in BeautifulSoup", "rewritten_intent": "access a tag called \"name\" in beautifulsoup `soup`", "snippet": "print(soup.find('name').string)", "question_id": 14435268, "baseline-bleu": 0.1681, "tranx-annot-bleu": 0.2873, "best-tranx-bleu": 0.3243, "best-tranx-bleu-rerank": 0.3243, "baseline": "soup . find_all ( 'div' , s )", "tranx-annot": "urllib . request . strptime ( soup , ` name ` ) . read ( ) [ 0 ]", "best-tranx": "soup . find ( ` div ` , href = re . compile ( ` name ` ) ) [ ` name ` ]", "best-tranx-rerank": "soup . find ( ` div ` , href = re . compile ( ` name ` ) ) [ ` name ` ]", "meteor-baseline": 0.3357, "meteor-tranx-annot": 0.6893, "meteor-best-tranx": 0.6796, "meteor-best-tranx-rerank": 0.6796, "rougel-baseline": 0.5217, "rougel-tranx-annot": 0.625, "rougel-best-tranx": 0.5946, "rougel-best-tranx-rerank": 0.5946}, {"intent": "Iterate through PyMongo Cursor as key-value pair", "rewritten_intent": "get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`", "snippet": "records = dict((record['_id'], record) for record in cursor)", "question_id": 4928274, "baseline-bleu": 0.1357, "tranx-annot-bleu": 0.1329, "best-tranx-bleu": 0.1624, "best-tranx-bleu-rerank": 0.1624, "baseline": "dict ( ( k , v ) for k , v in list ( myDict . items ( ) ) )", "tranx-annot": "dict ( ( k , v ) for k , v in records . items ( ) if v ! = ` cursor ` )", "best-tranx": "dict ( ( k , v ) for k , v in cursor . items ( ) if v )", "best-tranx-rerank": "dict ( ( k , v ) for k , v in cursor . items ( ) if v )", "meteor-baseline": 0.2073, "meteor-tranx-annot": 0.3316, "meteor-best-tranx": 0.3057, "meteor-best-tranx-rerank": 0.3057, "rougel-baseline": 0.3902, "rougel-tranx-annot": 0.5909, "rougel-best-tranx": 0.4615, "rougel-best-tranx-rerank": 0.4615}, {"intent": "Python how to combine two matrices in numpy", "rewritten_intent": "Create new matrix object  by concatenating data from matrix A and matrix B", "snippet": "np.concatenate((A, B))", "question_id": 20180210, "baseline-bleu": 0.1626, "tranx-annot-bleu": 0.0693, "best-tranx-bleu": 0.0614, "best-tranx-bleu-rerank": 0.1367, "baseline": "np . dot ( [ 1 , 2 , 3 ] )", "tranx-annot": "plt . array ( list ( range ( 0 , 0 ) , axis = 1 ) , axis = 0 ) . T", "best-tranx": "numpy . loadtxt ( open ( ` file . txt ` , ` rb ` ) , delimiter = ` , ` , skiprows = 1 )", "best-tranx-rerank": "numpy . matrix ( [ a ] ) . ravel ( )", "meteor-baseline": 0.3647, "meteor-tranx-annot": 0.2632, "meteor-best-tranx": 0.2564, "meteor-best-tranx-rerank": 0.2941, "rougel-baseline": 0.4545, "rougel-tranx-annot": 0.3529, "rougel-best-tranx": 0.3243, "rougel-best-tranx-rerank": 0.4545}, {"intent": "Python how to combine two matrices in numpy", "rewritten_intent": "concat two matrices `A` and `B` in numpy", "snippet": "np.vstack((A, B))", "question_id": 20180210, "baseline-bleu": 0.1383, "tranx-annot-bleu": 0.11, "best-tranx-bleu": 0.1514, "best-tranx-bleu-rerank": 0.1514, "baseline": "np . array ( [ : , ( None ) , axis = 0 )", "tranx-annot": "( numpy . array ( [ A , B ] ) [ 0 ] + B ) . replace ( ` A ` , ` ` )", "best-tranx": "np . importlib ( A < B , axis = 0 ) . B ( )", "best-tranx-rerank": "np . importlib ( A < B , axis = 0 ) . B ( )", "meteor-baseline": 0.4568, "meteor-tranx-annot": 0.4547, "meteor-best-tranx": 0.4245, "meteor-best-tranx-rerank": 0.4245, "rougel-baseline": 0.56, "rougel-tranx-annot": 0.4324, "rougel-best-tranx": 0.6923, "rougel-best-tranx-rerank": 0.6923}, {"intent": "how to check the character count of a file in python", "rewritten_intent": "Get the characters count in a file `filepath`", "snippet": "os.stat(filepath).st_size", "question_id": 2011048, "baseline-bleu": 0.1287, "tranx-annot-bleu": 0.212, "best-tranx-bleu": 0.1136, "best-tranx-bleu-rerank": 0.1136, "baseline": "os . path . dirname ( os . path . abspath ( filename ) )", "tranx-annot": "sum ( 1 for line in open ( filepath ) )", "best-tranx": "sum ( 1 for line in open ( ` filepath ` ) )", "best-tranx-rerank": "sum ( 1 for line in open ( ` filepath ` ) )", "meteor-baseline": 0.4276, "meteor-tranx-annot": 0.3079, "meteor-best-tranx": 0.1765, "meteor-best-tranx-rerank": 0.1765, "rougel-baseline": 0.4348, "rougel-tranx-annot": 0.3158, "rougel-best-tranx": 0.2857, "rougel-best-tranx-rerank": 0.2857}, {"intent": "count the occurrences of a list item", "rewritten_intent": "count the occurrences of item \"a\" in list `l`", "snippet": "l.count('a')", "question_id": 2600191, "baseline-bleu": 0.1261, "tranx-annot-bleu": 0.2045, "best-tranx-bleu": 0.1432, "best-tranx-bleu-rerank": 0.1432, "baseline": "[ item [ 0 ] for x in l ]", "tranx-annot": "sum ( x [ ` a ` ] for item in l )", "best-tranx": "sum ( a = = a for a in l )", "best-tranx-rerank": "sum ( a = = a for a in l )", "meteor-baseline": 0.061, "meteor-tranx-annot": 0.6013, "meteor-best-tranx": 0.241, "meteor-best-tranx-rerank": 0.241, "rougel-baseline": 0.1111, "rougel-tranx-annot": 0.5714, "rougel-best-tranx": 0.4211, "rougel-best-tranx-rerank": 0.4211}, {"intent": "count the occurrences of a list item", "rewritten_intent": "count the occurrences of items in list `l`", "snippet": "Counter(l)", "question_id": 2600191, "baseline-bleu": 0.2445, "tranx-annot-bleu": 0.1996, "best-tranx-bleu": 0.1611, "best-tranx-bleu-rerank": 0.1611, "baseline": "len ( s , it )", "tranx-annot": "sum ( not i for i in l )", "best-tranx": "sum ( len ( x ) for x in l )", "best-tranx-rerank": "sum ( tuple ( x ) for x in l )", "meteor-baseline": 0.2381, "meteor-tranx-annot": 0.5679, "meteor-best-tranx": 0.5437, "meteor-best-tranx-rerank": 0.5437, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.4615, "rougel-best-tranx": 0.4, "rougel-best-tranx-rerank": 0.4}, {"intent": "count the occurrences of a list item", "rewritten_intent": "count the occurrences of items in list `l`", "snippet": "[[x, l.count(x)] for x in set(l)]", "question_id": 2600191, "baseline-bleu": 0.0301, "tranx-annot-bleu": 0.0727, "best-tranx-bleu": 0.1695, "best-tranx-bleu-rerank": 0.1695, "baseline": "len ( s , it )", "tranx-annot": "sum ( not i for i in l )", "best-tranx": "sum ( len ( x ) for x in l )", "best-tranx-rerank": "sum ( tuple ( x ) for x in l )", "meteor-baseline": 0.0847, "meteor-tranx-annot": 0.2067, "meteor-best-tranx": 0.4521, "meteor-best-tranx-rerank": 0.4521, "rougel-baseline": 0.24, "rougel-tranx-annot": 0.3571, "rougel-best-tranx": 0.6, "rougel-best-tranx-rerank": 0.6}, {"intent": "count the occurrences of a list item", "rewritten_intent": "count the occurrences of items in list `l`", "snippet": "dict(((x, l.count(x)) for x in set(l)))", "question_id": 2600191, "baseline-bleu": 0.0183, "tranx-annot-bleu": 0.0521, "best-tranx-bleu": 0.1714, "best-tranx-bleu-rerank": 0.1714, "baseline": "len ( s , it )", "tranx-annot": "sum ( not i for i in l )", "best-tranx": "sum ( len ( x ) for x in l )", "best-tranx-rerank": "sum ( tuple ( x ) for x in l )", "meteor-baseline": 0.0735, "meteor-tranx-annot": 0.1208, "meteor-best-tranx": 0.3293, "meteor-best-tranx-rerank": 0.3293, "rougel-baseline": 0.2143, "rougel-tranx-annot": 0.3226, "rougel-best-tranx": 0.5455, "rougel-best-tranx-rerank": 0.5455}, {"intent": "count the occurrences of a list item", "rewritten_intent": "count the occurrences of item \"b\" in list `l`", "snippet": "l.count('b')", "question_id": 2600191, "baseline-bleu": 0.1354, "tranx-annot-bleu": 0.2045, "best-tranx-bleu": 0.1432, "best-tranx-bleu-rerank": 0.1432, "baseline": "x [ : : - 1 ]", "tranx-annot": "sum ( x [ ` b ` ] for item in l )", "best-tranx": "sum ( a = = b for a in l )", "best-tranx-rerank": "sum ( a = = b for a in l )", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.6013, "meteor-best-tranx": 0.241, "meteor-best-tranx-rerank": 0.241, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.5714, "rougel-best-tranx": 0.4211, "rougel-best-tranx-rerank": 0.4211}, {"intent": "How to copy a file using python?", "rewritten_intent": "copy file `srcfile` to directory `dstdir`", "snippet": "shutil.copy(srcfile, dstdir)", "question_id": 12842997, "baseline-bleu": 0.0859, "tranx-annot-bleu": 0.1967, "best-tranx-bleu": 0.1585, "best-tranx-bleu-rerank": 0.1585, "baseline": "os . path . dirname ( os . path . dirname ( 'file' ) )", "tranx-annot": "f = open ( open ( srcfile , ` dstdir ` ) )", "best-tranx": "dstdir = os . listdir ( ` dstdir ` )", "best-tranx-rerank": "dstdir = os . listdir ( ` dstdir ` )", "meteor-baseline": 0.1685, "meteor-tranx-annot": 0.5247, "meteor-best-tranx": 0.2439, "meteor-best-tranx-rerank": 0.2439, "rougel-baseline": 0.24, "rougel-tranx-annot": 0.4762, "rougel-best-tranx": 0.4444, "rougel-best-tranx-rerank": 0.4444}, {"intent": "Efficient way to find the largest key in a dictionary with non-zero value", "rewritten_intent": "find the key associated with the largest value in dictionary `x` whilst key is non-zero value", "snippet": "max(k for k, v in x.items() if v != 0)", "question_id": 1555968, "baseline-bleu": 0.0814, "tranx-annot-bleu": 0.0911, "best-tranx-bleu": 0.5873, "best-tranx-bleu-rerank": 0.5873, "baseline": "sorted ( my_dict , key = lambda x : x [ 1 ] )", "tranx-annot": "max ( ( item [ 0 ] for item in list ( x . values ( ) ) ) , key = lambda x : x [ 1 ] )", "best-tranx": "max ( ( k , v ) for k , v in x . items ( ) )", "best-tranx-rerank": "max ( ( k , v ) for k , v in x . items ( ) )", "meteor-baseline": 0.1351, "meteor-tranx-annot": 0.3234, "meteor-best-tranx": 0.7533, "meteor-best-tranx-rerank": 0.7533, "rougel-baseline": 0.303, "rougel-tranx-annot": 0.4898, "rougel-best-tranx": 0.8108, "rougel-best-tranx-rerank": 0.8108}, {"intent": "Efficient way to find the largest key in a dictionary with non-zero value", "rewritten_intent": "get the largest key whose not associated with value of 0 in dictionary `x`", "snippet": "(k for k, v in x.items() if v != 0)", "question_id": 1555968, "baseline-bleu": 0.0989, "tranx-annot-bleu": 0.2476, "best-tranx-bleu": 0.1897, "best-tranx-bleu-rerank": 0.1897, "baseline": "max ( x , key = operator . itemgetter ( 'resultType' ) )", "tranx-annot": "max ( list ( x . items ( ) ) , key = lambda x : x [ 0 ] )", "best-tranx": "max ( abs ( x ) for x in list ( x . values ( ) ) if x [ 0 ] ! = 0 )", "best-tranx-rerank": "max ( abs ( x ) for x in list ( x . values ( ) ) if x [ 0 ] ! = 0 )", "meteor-baseline": 0.2247, "meteor-tranx-annot": 0.4066, "meteor-best-tranx": 0.5437, "meteor-best-tranx-rerank": 0.5437, "rougel-baseline": 0.4706, "rougel-tranx-annot": 0.5128, "rougel-best-tranx": 0.5455, "rougel-best-tranx-rerank": 0.5455}, {"intent": "Efficient way to find the largest key in a dictionary with non-zero value", "rewritten_intent": "get the largest key in a dictionary `x` with non-zero value", "snippet": "max(k for k, v in x.items() if v != 0)", "question_id": 1555968, "baseline-bleu": 0.0814, "tranx-annot-bleu": 0.231, "best-tranx-bleu": 0.2592, "best-tranx-bleu-rerank": 0.2168, "baseline": "sorted ( a , key = lambda x : x [ 1 ] )", "tranx-annot": "max ( list ( x . items ( ) ) , key = lambda x : x [ 1 ] ) [ 0 ]", "best-tranx": "max ( list ( x . items ( ) ) , key = lambda x : x [ 1 ] )", "best-tranx-rerank": "max ( tuple ( list ( x . items ( ) ) ) for x in list ( x . values ( ) ) )", "meteor-baseline": 0.1351, "meteor-tranx-annot": 0.4096, "meteor-best-tranx": 0.3875, "meteor-best-tranx-rerank": 0.3242, "rougel-baseline": 0.303, "rougel-tranx-annot": 0.5116, "rougel-best-tranx": 0.5, "rougel-best-tranx-rerank": 0.4545}, {"intent": "Re-read an open file Python", "rewritten_intent": "Put the curser at beginning of the file", "snippet": "file.seek(0)", "question_id": 17021863, "baseline-bleu": 0.0515, "tranx-annot-bleu": 0.1236, "best-tranx-bleu": 0.2627, "best-tranx-bleu-rerank": 0.2627, "baseline": "os . system ( 'start#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>\\n' )", "tranx-annot": "struct . put ( locale , buf_size , beginning , beginning )", "best-tranx": "os . write ( put )", "best-tranx-rerank": "os . write ( put )", "meteor-baseline": 0.1829, "meteor-tranx-annot": 0.2273, "meteor-best-tranx": 0.25, "meteor-best-tranx-rerank": 0.25, "rougel-baseline": 0.1765, "rougel-tranx-annot": 0.3333, "rougel-best-tranx": 0.5, "rougel-best-tranx-rerank": 0.5}, {"intent": "Coalesce values from 2 columns into a single column in a pandas dataframe", "rewritten_intent": "combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`", "snippet": "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])", "question_id": 38152389, "baseline-bleu": 0.0973, "tranx-annot-bleu": 0.0387, "best-tranx-bleu": 0.4269, "best-tranx-bleu-rerank": 0.4269, "baseline": "df . groupby ( [ 'stock' , 'col2' , 'same2' ] , how = 'inner' )", "tranx-annot": "df . apply ( lambda b : x . values ( ) , axis = 1 )", "best-tranx": "df . apply ( lambda x : x . merge ( df [ ` c ` ] , df [ ` a ` ] ) )", "best-tranx-rerank": "df . apply ( lambda x : x . merge ( df [ ` c ` ] , df [ ` a ` ] ) )", "meteor-baseline": 0.2576, "meteor-tranx-annot": 0.1238, "meteor-best-tranx": 0.5184, "meteor-best-tranx-rerank": 0.5184, "rougel-baseline": 0.5862, "rougel-tranx-annot": 0.3137, "rougel-best-tranx": 0.6, "rougel-best-tranx-rerank": 0.6}, {"intent": "python: Is this a wrong way to remove an element from a dict?", "rewritten_intent": "remove key 'ele' from dictionary `d`", "snippet": "del d['ele']", "question_id": 4175686, "baseline-bleu": 0.0581, "tranx-annot-bleu": 0.2045, "best-tranx-bleu": 0.2481, "best-tranx-bleu-rerank": 0.2481, "baseline": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )", "tranx-annot": "d . pop ( ` ele ` , ` None ` )", "best-tranx": "d . pop ( ` ele ` , None )", "best-tranx-rerank": "d . pop ( ` ele ` , None )", "meteor-baseline": 0.0595, "meteor-tranx-annot": 0.2667, "meteor-best-tranx": 0.5137, "meteor-best-tranx-rerank": 0.5137, "rougel-baseline": 0.0714, "rougel-tranx-annot": 0.4211, "rougel-best-tranx": 0.4706, "rougel-best-tranx-rerank": 0.4706}, {"intent": "How can I subtract or add 100 years to a datetime field in the database in Django?", "rewritten_intent": "Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years", "snippet": "MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))", "question_id": 5871168, "baseline-bleu": 0.0945, "tranx-annot-bleu": 0, "best-tranx-bleu": 0.097, "best-tranx-bleu-rerank": 0.097, "baseline": "datetime . datetime . now ( ) . date_date ( '%Y-%m-%Y' )", "tranx-annot": "", "best-tranx": "datetime . datetime . fromtimestamp ( My Model ) . strftime ( ` is ` )", "best-tranx-rerank": "datetime . datetime . fromtimestamp ( My Model ) . strftime ( ` is ` )", "meteor-baseline": 0.1829, "meteor-tranx-annot": 0.0, "meteor-best-tranx": 0.285, "meteor-best-tranx-rerank": 0.285, "rougel-baseline": 0.3913, "rougel-tranx-annot": 0.0, "rougel-best-tranx": 0.5366, "rougel-best-tranx-rerank": 0.5366}, {"intent": "How to merge multiple lists into one list in python?", "rewritten_intent": "merge list `['it']` and list `['was']` and list `['annoying']` into one list", "snippet": "['it'] + ['was'] + ['annoying']", "question_id": 11574195, "baseline-bleu": 0.1051, "tranx-annot-bleu": 0.3327, "best-tranx-bleu": 0.3011, "best-tranx-bleu-rerank": 0.3011, "baseline": "zip ( [ [ 'a' , 'c' ] , [ 'a' , 'c' ] , inplace = True )", "tranx-annot": "[ [ ` was ` ] , [ ` was ` ] ]", "best-tranx": "[ list ( t ) for t in zip ( [ ` it ` ] , [ ` was ` ] , [ ` [ ` annoying ` ] ` , ` str_3 ` ] ) ]", "best-tranx-rerank": "[ list ( t ) for t in zip ( [ ` it ` ] , [ ` was ` ] , [ ` [ ` annoying ` ] ` , ` str_3 ` ] ) ]", "meteor-baseline": 0.3815, "meteor-tranx-annot": 0.4812, "meteor-best-tranx": 0.3947, "meteor-best-tranx-rerank": 0.3947, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.7333, "rougel-best-tranx": 0.5556, "rougel-best-tranx-rerank": 0.5556}, {"intent": "How to increment a value with leading zeroes?", "rewritten_intent": "increment a value with leading zeroes in a number `x`", "snippet": "str(int(x) + 1).zfill(len(x))", "question_id": 587647, "baseline-bleu": 0.3187, "tranx-annot-bleu": 0.3616, "best-tranx-bleu": 0.1142, "best-tranx-bleu-rerank": 0.1142, "baseline": "x = [ x [ 0 ] for i in range ( len ( x ) ) ]", "tranx-annot": "x ( 1 for i in range ( len ( x ) ) )", "best-tranx": "np . sum ( 1 for i in range ( 100 ) )", "best-tranx-rerank": "np . sum ( 1 for i in range ( 100 ) )", "meteor-baseline": 0.4555, "meteor-tranx-annot": 0.5341, "meteor-best-tranx": 0.2569, "meteor-best-tranx-rerank": 0.2569, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.6452, "rougel-best-tranx": 0.4, "rougel-best-tranx-rerank": 0.4}, {"intent": "How can I check if a Pandas dataframe's index is sorted", "rewritten_intent": "check if a pandas dataframe `df`'s index is sorted", "snippet": "all(df.index[:-1] <= df.index[1:])", "question_id": 17315881, "baseline-bleu": 0.1103, "tranx-annot-bleu": 0.2924, "best-tranx-bleu": 0.1099, "best-tranx-bleu-rerank": 0.0868, "baseline": "df [ 'value' ] = df [ 'positions' ] . asform ( )", "tranx-annot": "df . index . sorted ( ) = = df . index ( df . index ( df ) )", "best-tranx": "pd . sorted ( df . values . tolist ( ) )", "best-tranx-rerank": "df . groupby ( level = 0 ) . max ( )", "meteor-baseline": 0.3226, "meteor-tranx-annot": 0.3441, "meteor-best-tranx": 0.1302, "meteor-best-tranx-rerank": 0.1562, "rougel-baseline": 0.5405, "rougel-tranx-annot": 0.45, "rougel-best-tranx": 0.3125, "rougel-best-tranx-rerank": 0.375}, {"intent": "Convert tuple to list", "rewritten_intent": "Convert tuple `t` to list", "snippet": "list(t)", "question_id": 16296643, "baseline-bleu": 0.1349, "tranx-annot-bleu": 0.1051, "best-tranx-bleu": 0.6148, "best-tranx-bleu-rerank": 0.6148, "baseline": "x = [ : : - 1 ]", "tranx-annot": "[ tuple ( i ) for i in t . split ( ) ]", "best-tranx": "t = list ( t )", "best-tranx-rerank": "t = list ( t )", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.3, "meteor-best-tranx": 0.9449, "meteor-best-tranx-rerank": 0.9449, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.3333, "rougel-best-tranx": 0.8, "rougel-best-tranx-rerank": 0.8}, {"intent": "Convert tuple to list", "rewritten_intent": "Convert list `t` to tuple", "snippet": "tuple(l)", "question_id": 16296643, "baseline-bleu": 0.1349, "tranx-annot-bleu": 0.1783, "best-tranx-bleu": 0.1395, "best-tranx-bleu-rerank": 0.1395, "baseline": "x = [ : : - 1 ]", "tranx-annot": "[ tuple ( i ) for i in t ]", "best-tranx": "map ( list , zip ( * t ) )", "best-tranx-rerank": "map ( list , zip ( * t ) )", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.5556, "meteor-best-tranx": 0.2174, "meteor-best-tranx-rerank": 0.2174, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.4286, "rougel-best-tranx": 0.2857, "rougel-best-tranx-rerank": 0.2857}, {"intent": "Convert tuple to list and back", "rewritten_intent": "Convert tuple `level1` to list", "snippet": "level1 = map(list, level1)", "question_id": 16296643, "baseline-bleu": 0.1499, "tranx-annot-bleu": 0.1051, "best-tranx-bleu": 0.2849, "best-tranx-bleu-rerank": 0.2849, "baseline": "l = lambda x : x . isnan ( )", "tranx-annot": "[ tuple ( i ) for i in level1 . split ( ) ]", "best-tranx": "level1 = list ( level1 )", "best-tranx-rerank": "level1 = list ( level1 )", "meteor-baseline": 0.1829, "meteor-tranx-annot": 0.1744, "meteor-best-tranx": 0.6553, "meteor-best-tranx-rerank": 0.6553, "rougel-baseline": 0.3333, "rougel-tranx-annot": 0.2727, "rougel-best-tranx": 0.8571, "rougel-best-tranx-rerank": 0.8571}, {"intent": "how to send the output of pprint module to a log file", "rewritten_intent": "send the output of pprint object `dataobject` to file `logFile`", "snippet": "pprint.pprint(dataobject, logFile)", "question_id": 3880399, "baseline-bleu": 0.0978, "tranx-annot-bleu": 0.1487, "best-tranx-bleu": 0.2003, "best-tranx-bleu-rerank": 0.2003, "baseline": "print ( os . args . get ( '<unk>' ) )", "tranx-annot": "log File = dataobject . send ( log File , dataobject = dataobject )", "best-tranx": "dataobject . write ( dataobject )", "best-tranx-rerank": "dataobject . write ( dataobject )", "meteor-baseline": 0.1562, "meteor-tranx-annot": 0.5048, "meteor-best-tranx": 0.3628, "meteor-best-tranx-rerank": 0.3628, "rougel-baseline": 0.25, "rougel-tranx-annot": 0.6087, "rougel-best-tranx": 0.5333, "rougel-best-tranx-rerank": 0.5333}, {"intent": "Python Pandas: Get index of rows which column matches certain value", "rewritten_intent": "get index of rows in column 'BoolCol'", "snippet": "df.loc[df['BoolCol']]", "question_id": 21800169, "baseline-bleu": 0.1488, "tranx-annot-bleu": 0.5483, "best-tranx-bleu": 0.2619, "best-tranx-bleu-rerank": 0.2619, "baseline": "df . groupby ( [ 'year' , '<unk>' ] )", "tranx-annot": "index . loc [ ` Bool Col ` ]", "best-tranx": "Bool Col . iloc [ Bool Col [ ` Bool Col ` ] . isin ( [ 1 , 6 ] ) ]", "best-tranx-rerank": "Bool Col . iloc [ Bool Col [ ` Bool Col ` ] . isin ( [ 1 , 1 ] ) ]", "meteor-baseline": 0.2419, "meteor-tranx-annot": 0.6657, "meteor-best-tranx": 0.5852, "meteor-best-tranx-rerank": 0.5852, "rougel-baseline": 0.4286, "rougel-tranx-annot": 0.7619, "rougel-best-tranx": 0.5143, "rougel-best-tranx-rerank": 0.5143}, {"intent": "Python Pandas: Get index of rows which column matches certain value", "rewritten_intent": "Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True", "snippet": "df.iloc[np.flatnonzero(df['BoolCol'])]", "question_id": 21800169, "baseline-bleu": 0.1285, "tranx-annot-bleu": 0.1656, "best-tranx-bleu": 0.1867, "best-tranx-bleu-rerank": 0.1867, "baseline": "df . groupby ( 'User' ) [ : - 1 ] . sum ( )", "tranx-annot": "df . groupby ( df . apply ( lambda Bool Col : abs ( df [ i ] ) ) )", "best-tranx": "df . groupby ( [ ` Bool Col ` , ` Bool Col ` ] ) [ [ ` Bool Col ` , ` Bool Col ` ] ] . update ( { ` Bool Col ` : df [ ` Bool Col ` ] } )", "best-tranx-rerank": "df . groupby ( [ ` Bool Col ` , ` Bool Col ` ] ) [ [ ` Bool Col ` , ` Bool Col ` ] ] . update ( { ` Bool Col ` : df [ ` Bool Col ` ] } )", "meteor-baseline": 0.2647, "meteor-tranx-annot": 0.4761, "meteor-best-tranx": 0.6347, "meteor-best-tranx-rerank": 0.6347, "rougel-baseline": 0.5294, "rougel-tranx-annot": 0.5263, "rougel-best-tranx": 0.4375, "rougel-best-tranx-rerank": 0.4375}, {"intent": "Python Pandas: Get index of rows which column matches certain value", "rewritten_intent": "get list of indexes of rows where column 'BoolCol' values match True", "snippet": "df[df['BoolCol'] == True].index.tolist()", "question_id": 21800169, "baseline-bleu": 0.0846, "tranx-annot-bleu": 0.2875, "best-tranx-bleu": 0.4301, "best-tranx-bleu-rerank": 0.3128, "baseline": "sorted ( [ x [ 1 ] , x [ 1 ] ) )", "tranx-annot": "print ( enumerate ( Bool Col , key = lambda x : x [ ` Bool Col ` ] ) )", "best-tranx": "Bool Col [ df [ ` Bool Col ` ] . isin ( [ 1 , 1 ] ) ]", "best-tranx-rerank": "Bool Col [ Bool Col [ ` Bool Col ` ] . isin ( [ 1 , 1 ] ) ]", "meteor-baseline": 0.1622, "meteor-tranx-annot": 0.4286, "meteor-best-tranx": 0.4957, "meteor-best-tranx-rerank": 0.4627, "rougel-baseline": 0.3636, "rougel-tranx-annot": 0.45, "rougel-best-tranx": 0.6154, "rougel-best-tranx-rerank": 0.55}, {"intent": "Python Pandas: Get index of rows which column matches certain value", "rewritten_intent": "get index of rows in dataframe `df` which column 'BoolCol' matches value True", "snippet": "df[df['BoolCol']].index.tolist()", "question_id": 21800169, "baseline-bleu": 0.1179, "tranx-annot-bleu": 0.3651, "best-tranx-bleu": 0.4239, "best-tranx-bleu-rerank": 0.4239, "baseline": "df . groupby ( 'User' ) . agg ( lambda x : x . index )", "tranx-annot": "df [ ` Bool Col ` ] . apply ( lambda value : x [ ` Bool Col ` ] )", "best-tranx": "df . loc [ df [ ` Bool Col ` ] . isin ( [ 1 , 1 ] ) ]", "best-tranx-rerank": "df . loc [ df [ ` Bool Col ` ] . isin ( [ 1 , 1 ] ) ]", "meteor-baseline": 0.2469, "meteor-tranx-annot": 0.6195, "meteor-best-tranx": 0.6427, "meteor-best-tranx-rerank": 0.6427, "rougel-baseline": 0.4706, "rougel-tranx-annot": 0.6486, "rougel-best-tranx": 0.7568, "rougel-best-tranx-rerank": 0.7568}, {"intent": "How do I change directory back to my original working directory with Python?", "rewritten_intent": "change working directory to the directory `owd`", "snippet": "os.chdir(owd)", "question_id": 299446, "baseline-bleu": 0.2104, "tranx-annot-bleu": 1.0, "best-tranx-bleu": 0.3439, "best-tranx-bleu-rerank": 0.3439, "baseline": "os . chdir ( os . path . abspath ( '<unk>' ) )", "tranx-annot": "os . chdir ( owd )", "best-tranx": "os . chdir ( os . path . dirname ( owd ) )", "best-tranx-rerank": "os . chdir ( os . path . dirname ( owd ) )", "meteor-baseline": 0.3521, "meteor-tranx-annot": 0.9977, "meteor-best-tranx": 0.6364, "meteor-best-tranx-rerank": 0.6364, "rougel-baseline": 0.4348, "rougel-tranx-annot": 1.0, "rougel-best-tranx": 0.6316, "rougel-best-tranx-rerank": 0.6316}, {"intent": "How to insert strings with quotes and newlines into sqlite db with Python?", "rewritten_intent": "insert data from a string `testfield` to sqlite db `c`", "snippet": "c.execute(\"INSERT INTO test VALUES (?, 'bar')\", (testfield,))", "question_id": 14695134, "baseline-bleu": 0.1382, "tranx-annot-bleu": 0.0659, "best-tranx-bleu": 0.0708, "best-tranx-bleu-rerank": 0.0708, "baseline": "re . findall ( 'a-zA)' , '' , text )", "tranx-annot": "testfield . insert ( 0 , ` c ` )", "best-tranx": "c . insert ( 0 , ` testfield ` )", "best-tranx-rerank": "c . insert ( 0 , ` testfield ` )", "meteor-baseline": 0.2232, "meteor-tranx-annot": 0.2074, "meteor-best-tranx": 0.2691, "meteor-best-tranx-rerank": 0.2691, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.4848, "rougel-best-tranx": 0.4848, "rougel-best-tranx-rerank": 0.4848}, {"intent": "Python - how to convert a \"raw\" string into a normal string", "rewritten_intent": "decode string \"\\\\x89\\\\n\" into a normal string", "snippet": "\"\"\"\\\\x89\\\\n\"\"\".decode('string_escape')", "question_id": 24242433, "baseline-bleu": 0.5588, "tranx-annot-bleu": 0.7884, "best-tranx-bleu": 0.1563, "best-tranx-bleu-rerank": 0.3518, "baseline": "\"\"\"\\\\u003b4<unk>\"\"\" . decode ( 'unicode_escape' )", "tranx-annot": "` ` ` \\ \\ x89 \\ \\ n ` ` ` . decode ( ` utf - 8 ` )", "best-tranx": "` ` ` ` ` ` . join ( x [ 0 ] . strftime ( ` ` ) for x in normal . find ( ` str_3 ` ) . split ( ` , ` ) ) . decode ( ` utf8 ` )", "best-tranx-rerank": "` ` ` \\ \\ xc3 \\ \\ x85 \u3042 ` ` ` . encode ( ` utf - 8 ` ) . decode ( ` n ` )", "meteor-baseline": 0.7282, "meteor-tranx-annot": 0.9369, "meteor-best-tranx": 0.5004, "meteor-best-tranx-rerank": 0.7635, "rougel-baseline": 0.7368, "rougel-tranx-annot": 0.9, "rougel-best-tranx": 0.375, "rougel-best-tranx-rerank": 0.7083}, {"intent": "Python - how to convert a \"raw\" string into a normal string", "rewritten_intent": "convert a raw string `raw_string` into a normal string", "snippet": "raw_string.decode('string_escape')", "question_id": 24242433, "baseline-bleu": 0.1179, "tranx-annot-bleu": 0.0881, "best-tranx-bleu": 0.0556, "best-tranx-bleu-rerank": 0.18, "baseline": "\"\"\"\"\"\" . join ( chr . split ( ',' ) )", "tranx-annot": "output = ` ` . join ( c for c in raw_string if c . isdigit ( ) )", "best-tranx": "n = ` ` . join ( ` ` . join ( i [ 0 ] . astype ( int ) for s in raw_string . split ( ) ) for s in raw_string . split ( ) )", "best-tranx-rerank": "pattern = re . compile ( ` < unk > ` )", "meteor-baseline": 0.4133, "meteor-tranx-annot": 0.3297, "meteor-best-tranx": 0.3841, "meteor-best-tranx-rerank": 0.531, "rougel-baseline": 0.3846, "rougel-tranx-annot": 0.4444, "rougel-best-tranx": 0.2553, "rougel-best-tranx-rerank": 0.5}, {"intent": "Python - how to convert a \"raw\" string into a normal string", "rewritten_intent": "convert a raw string `raw_byte_string` into a normal string", "snippet": "raw_byte_string.decode('unicode_escape')", "question_id": 24242433, "baseline-bleu": 0.4336, "tranx-annot-bleu": 0.0881, "best-tranx-bleu": 0.0556, "best-tranx-bleu-rerank": 0.18, "baseline": "print ( s . encode ( 'unicode_escape' ) )", "tranx-annot": "output = ` ` . join ( c for c in raw_byte_string if c . isdigit ( ) )", "best-tranx": "n = ` ` . join ( ` ` . join ( i [ 0 ] . astype ( int ) for s in raw_byte_string . split ( ) ) for s in raw_byte_string . split ( ) )", "best-tranx-rerank": "pattern = re . compile ( ` < unk > ` )", "meteor-baseline": 0.6777, "meteor-tranx-annot": 0.3297, "meteor-best-tranx": 0.3841, "meteor-best-tranx-rerank": 0.531, "rougel-baseline": 0.6316, "rougel-tranx-annot": 0.4444, "rougel-best-tranx": 0.2553, "rougel-best-tranx-rerank": 0.5}, {"intent": "Splitting a string with repeated characters into a list using regex", "rewritten_intent": "split a string `s` with into all strings of repeated characters", "snippet": "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', s)]", "question_id": 22882922, "baseline-bleu": 0.2143, "tranx-annot-bleu": 0.0621, "best-tranx-bleu": 0.1213, "best-tranx-bleu-rerank": 0.1213, "baseline": "re . split ( '(00-\\\\s)' , '\\\\1' , s )", "tranx-annot": "` ` ` ` ` ` . join ( c for c in s if c . c ( ) )", "best-tranx": "print ( re . findall ( ` < unk > ` , s ) )", "best-tranx-rerank": "print ( re . findall ( ` < unk > ` , s ) )", "meteor-baseline": 0.4898, "meteor-tranx-annot": 0.195, "meteor-best-tranx": 0.3002, "meteor-best-tranx-rerank": 0.3002, "rougel-baseline": 0.5882, "rougel-tranx-annot": 0.44, "rougel-best-tranx": 0.4545, "rougel-best-tranx-rerank": 0.4545}, {"intent": "How to do a scatter plot with empty circles in Python?", "rewritten_intent": "scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none", "snippet": "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')", "question_id": 4143502, "baseline-bleu": 0.0712, "tranx-annot-bleu": 0.3311, "best-tranx-bleu": 0.1179, "best-tranx-bleu-rerank": 0.391, "baseline": "plt . savefig ( 'font.png' , s = [ 1 , 1 ] )", "tranx-annot": "datetime . strptime ( np . random . randn ( 100 ) ) . plot ( { ` a ` : 2 , ` s ` : 3 } )", "best-tranx": "plt . scatter ( * zip ( * plot ) , * * color )", "best-tranx-rerank": "plt . scatter ( x , y , color = ` np . random . randn ( 100 ) ` )", "meteor-baseline": 0.1852, "meteor-tranx-annot": 0.3014, "meteor-best-tranx": 0.1993, "meteor-best-tranx-rerank": 0.6181, "rougel-baseline": 0.4348, "rougel-tranx-annot": 0.5862, "rougel-best-tranx": 0.3721, "rougel-best-tranx-rerank": 0.7347}, {"intent": "How to do a scatter plot with empty circles in Python?", "rewritten_intent": "do a scatter plot with empty circles", "snippet": "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')", "question_id": 4143502, "baseline-bleu": 0.0334, "tranx-annot-bleu": 0.0015, "best-tranx-bleu": 0.049, "best-tranx-bleu-rerank": 0.0284, "baseline": "logging . <unk><unk> ( ) . date ( )", "tranx-annot": "circles . scatter ( )", "best-tranx": "plt . scatter ( x , y , vmin = 0 , vmax = 15 )", "best-tranx-rerank": "plt . scatter ( * zip ( * plot ) )", "meteor-baseline": 0.0993, "meteor-tranx-annot": 0.0512, "meteor-best-tranx": 0.1316, "meteor-best-tranx-rerank": 0.1171, "rougel-baseline": 0.2609, "rougel-tranx-annot": 0.1622, "rougel-best-tranx": 0.3333, "rougel-best-tranx-rerank": 0.3256}, {"intent": "Deleting a div with a particlular class using BeautifulSoup", "rewritten_intent": "remove a div with a id `main-content` using beautifulsoup", "snippet": "soup.find('div', id='main-content').decompose()", "question_id": 32063985, "baseline-bleu": 0.1201, "tranx-annot-bleu": 0.3418, "best-tranx-bleu": 0.4018, "best-tranx-bleu-rerank": 0.4018, "baseline": "soup . find_all ( 'div-escape' )", "tranx-annot": "beautifulsoup = pd . Series ( div = json . compile ( ` main - content ` ) )", "best-tranx": "div . find_all ( ` main - content ` , class_ = ` main - content ` )", "best-tranx-rerank": "div . find_all ( ` main - content ` , class_ = ` main - content ` )", "meteor-baseline": 0.2105, "meteor-tranx-annot": 0.5771, "meteor-best-tranx": 0.6053, "meteor-best-tranx-rerank": 0.6053, "rougel-baseline": 0.5333, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.6842, "rougel-best-tranx-rerank": 0.6842}, {"intent": "How to filter rows containing a string pattern from a Pandas dataframe", "rewritten_intent": "filter rows containing key word `ball` in column `ids`", "snippet": "df[df['ids'].str.contains('ball')]", "question_id": 27975069, "baseline-bleu": 0.1307, "tranx-annot-bleu": 0.1582, "best-tranx-bleu": 0.1167, "best-tranx-bleu-rerank": 0.1167, "baseline": "pd . concat ( [ 'foo' , 'foo' ] )", "tranx-annot": "ids [ ( ball [ ball ] = = ` ids ` ) + ( ball ! = ids ) ]", "best-tranx": "ids . filter ( ` < unk > ` , str ( ball ) )", "best-tranx-rerank": "ids . filter ( ` < unk > ` , str ( ball ) )", "meteor-baseline": 0.3318, "meteor-tranx-annot": 0.3473, "meteor-best-tranx": 0.226, "meteor-best-tranx-rerank": 0.226, "rougel-baseline": 0.5625, "rougel-tranx-annot": 0.5128, "rougel-best-tranx": 0.4848, "rougel-best-tranx-rerank": 0.4848}, {"intent": "How to convert pandas index in a dataframe to a column?", "rewritten_intent": "convert index at level 0 into a column in dataframe `df`", "snippet": "df.reset_index(level=0, inplace=True)", "question_id": 20461165, "baseline-bleu": 0.1383, "tranx-annot-bleu": 0.1209, "best-tranx-bleu": 0.2723, "best-tranx-bleu-rerank": 0.2723, "baseline": "df . groupby ( [ 'stock' , 'same2' ] )", "tranx-annot": "df [ var_3 ] = df [ 0 ] . fillna ( 0 )", "best-tranx": "df . set_index ( ` Date ` ) . unstack ( level = 0 )", "best-tranx-rerank": "df . set_index ( ` Date ` ) . unstack ( level = 0 )", "meteor-baseline": 0.3049, "meteor-tranx-annot": 0.2459, "meteor-best-tranx": 0.3899, "meteor-best-tranx-rerank": 0.3899, "rougel-baseline": 0.3846, "rougel-tranx-annot": 0.4615, "rougel-best-tranx": 0.5185, "rougel-best-tranx-rerank": 0.5185}, {"intent": "How to convert pandas index in a dataframe to a column?", "rewritten_intent": "Add indexes in a data frame `df` to a column `index1`", "snippet": "df['index1'] = df.index", "question_id": 20461165, "baseline-bleu": 0.2397, "tranx-annot-bleu": 0.1502, "best-tranx-bleu": 0.2782, "best-tranx-bleu-rerank": 0.2782, "baseline": "df [ 'a' ] = df [ 'a' ] == 'a' ]", "tranx-annot": "del df [ index1 ]", "best-tranx": "df = pd . Data Frame ( index = df . index )", "best-tranx-rerank": "df = pd . Data Frame ( index = df . index )", "meteor-baseline": 0.44, "meteor-tranx-annot": 0.2105, "meteor-best-tranx": 0.4699, "meteor-best-tranx-rerank": 0.4699, "rougel-baseline": 0.4828, "rougel-tranx-annot": 0.5333, "rougel-best-tranx": 0.4348, "rougel-best-tranx-rerank": 0.4348}, {"intent": "How to convert pandas index in a dataframe to a column?", "rewritten_intent": "convert pandas index in a dataframe to columns", "snippet": "df.reset_index(level=['tick', 'obs'])", "question_id": 20461165, "baseline-bleu": 0.2567, "tranx-annot-bleu": 0.0901, "best-tranx-bleu": 0.1175, "best-tranx-bleu-rerank": 0.2024, "baseline": "df . apply ( [ 'a' , 'B' ] )", "tranx-annot": "df . apply ( lambda x : x . fillna ( x . mean ( ) ) , axis = 0 )", "best-tranx": "df . apply ( lambda x : x . tolist ( ) , axis = 1 )", "best-tranx-rerank": "df . set_index ( [ ` A ` , ` B ` ] , axis = 1 )", "meteor-baseline": 0.6635, "meteor-tranx-annot": 0.1807, "meteor-best-tranx": 0.1863, "meteor-best-tranx-rerank": 0.5845, "rougel-baseline": 0.7333, "rougel-tranx-annot": 0.3158, "rougel-best-tranx": 0.3636, "rougel-best-tranx-rerank": 0.7059}, {"intent": "Generic reverse of list items in Python", "rewritten_intent": "Get reverse of list items from list 'b' using extended slicing", "snippet": "[x[::-1] for x in b]", "question_id": 4685571, "baseline-bleu": 0.081, "tranx-annot-bleu": 0.0951, "best-tranx-bleu": 0.1175, "best-tranx-bleu-rerank": 0.1175, "baseline": "s . sort ( key = lambda x : x . startswith ( 's' ) )", "tranx-annot": "[ i for i in range ( len ( b ) ) for y in pair ]", "best-tranx": "[ i for i , j in enumerate ( b ) if i ! = 1 ]", "best-tranx-rerank": "[ i for i , j in enumerate ( b ) if i ! = 1 ]", "meteor-baseline": 0.1111, "meteor-tranx-annot": 0.2239, "meteor-best-tranx": 0.2239, "meteor-best-tranx-rerank": 0.2239, "rougel-baseline": 0.1935, "rougel-tranx-annot": 0.3333, "rougel-best-tranx": 0.4, "rougel-best-tranx-rerank": 0.4}, {"intent": "in Numpy, how to zip two 2-D arrays?", "rewritten_intent": "join each element in array `a` with element at the same index in array `b` as a tuple", "snippet": "np.array([zip(x, y) for x, y in zip(a, b)])", "question_id": 17960441, "baseline-bleu": 0.1813, "tranx-annot-bleu": 0.3433, "best-tranx-bleu": 0.7017, "best-tranx-bleu-rerank": 0.1785, "baseline": "a = np . concatenate ( [ a , b , b ) ]", "tranx-annot": "np . array ( [ ( i , j ) for k , v in enumerate ( a , b [ 1 ] ) ] )", "best-tranx": "a = [ ( x , y ) for x , y in zip ( a , b ) ]", "best-tranx-rerank": "np . vstack ( np . meshgrid ( a , b ) )", "meteor-baseline": 0.3235, "meteor-tranx-annot": 0.6973, "meteor-best-tranx": 0.7486, "meteor-best-tranx-rerank": 0.3758, "rougel-baseline": 0.5263, "rougel-tranx-annot": 0.72, "rougel-best-tranx": 0.8182, "rougel-best-tranx-rerank": 0.4865}, {"intent": "in Numpy, how to zip two 2-D arrays?", "rewritten_intent": "zip two 2-d arrays `a` and `b`", "snippet": "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)", "question_id": 17960441, "baseline-bleu": 0.0033, "tranx-annot-bleu": 0.0048, "best-tranx-bleu": 0.0762, "best-tranx-bleu-rerank": 0.0762, "baseline": "a , b , b )", "tranx-annot": "a . zip ( a )", "best-tranx": "[ ( a + b ) for a , b in zip ( a , b ) ]", "best-tranx-rerank": "[ ( a + b ) for a , b in zip ( a , b ) ]", "meteor-baseline": 0.0801, "meteor-tranx-annot": 0.1367, "meteor-best-tranx": 0.1961, "meteor-best-tranx-rerank": 0.1961, "rougel-baseline": 0.25, "rougel-tranx-annot": 0.3, "rougel-best-tranx": 0.3846, "rougel-best-tranx-rerank": 0.3846}, {"intent": "How to convert a list of longs into a comma separated string in python", "rewritten_intent": "convert list `list_of_ints` into a comma separated string", "snippet": "\"\"\",\"\"\".join([str(i) for i in list_of_ints])", "question_id": 438684, "baseline-bleu": 0.0726, "tranx-annot-bleu": 0.4765, "best-tranx-bleu": 0.7821, "best-tranx-bleu-rerank": 0.7821, "baseline": "print ( my_list , key = lambda x : int ( x ) ) )", "tranx-annot": "print ( ` ` . join ( chr ( i ) for i in list_of_ints ) )", "best-tranx": "` ` ` , ` ` ` . join ( str ( i ) for i in list_of_ints )", "best-tranx-rerank": "` ` ` , ` ` ` . join ( str ( i ) for i in list_of_ints )", "meteor-baseline": 0.1225, "meteor-tranx-annot": 0.6131, "meteor-best-tranx": 0.9117, "meteor-best-tranx-rerank": 0.9117, "rougel-baseline": 0.2778, "rougel-tranx-annot": 0.6842, "rougel-best-tranx": 0.95, "rougel-best-tranx-rerank": 0.95}, {"intent": "Posting raw data with Python", "rewritten_intent": "Send a post request with raw data `DATA` and basic authentication with `username` and `password`", "snippet": "requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))", "question_id": 8519922, "baseline-bleu": 0.0578, "tranx-annot-bleu": 0.2056, "best-tranx-bleu": 0.1914, "best-tranx-bleu-rerank": 0.1914, "baseline": "request = requests . get ( 'https://<unk>.<unk>/post#SPACE#<unk>#SPACE#<unk>' )", "tranx-annot": "request = DATA = requests . post ( DATA , password = password )", "best-tranx": "data = requests . post ( ` DATA ` , cookies = password )", "best-tranx-rerank": "data = requests . post ( ` DATA ` , cookies = password )", "meteor-baseline": 0.1293, "meteor-tranx-annot": 0.4275, "meteor-best-tranx": 0.3768, "meteor-best-tranx-rerank": 0.3768, "rougel-baseline": 0.2143, "rougel-tranx-annot": 0.6111, "rougel-best-tranx": 0.6111, "rougel-best-tranx-rerank": 0.6111}, {"intent": "Find last occurrence of character", "rewritten_intent": "Find last occurrence of character '}' in string \"abcd}def}\"", "snippet": "'abcd}def}'.rfind('}')", "question_id": 26443308, "baseline-bleu": 0.1332, "tranx-annot-bleu": 0.4448, "best-tranx-bleu": 0.2823, "best-tranx-bleu-rerank": 0.2823, "baseline": "parser . parse ( 'monkey#SPACE#love#SPACE#banana' )", "tranx-annot": "` ` ` abcd } def } ` ` ` . format ( ` } ` , 1 )", "best-tranx": "re . findall ( ` < unk > ` , ` abcd } def } ` ) [ - 1 ] . replace ( ` } ` , ` } ` )", "best-tranx-rerank": "re . findall ( ` < unk > ` , ` abcd } def } ` ) [ - 1 ] . replace ( ` } ` , ` } ` )", "meteor-baseline": 0.3353, "meteor-tranx-annot": 0.8504, "meteor-best-tranx": 0.6861, "meteor-best-tranx-rerank": 0.6861, "rougel-baseline": 0.3448, "rougel-tranx-annot": 0.75, "rougel-best-tranx": 0.5333, "rougel-best-tranx-rerank": 0.5333}, {"intent": "Ending with a for loop in python", "rewritten_intent": "Iterate ove list `[1, 2, 3]` using list comprehension", "snippet": "print([item for item in [1, 2, 3]])", "question_id": 22365172, "baseline-bleu": 0.1036, "tranx-annot-bleu": 0.3102, "best-tranx-bleu": 0.3626, "best-tranx-bleu-rerank": 0.3911, "baseline": "np . dot ( [ 1 , 2 , 3 , 4 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ]", "tranx-annot": "print ( list ( itertools . product ( [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] ) ) )", "best-tranx": "print ( [ y for x in zip ( * [ 1 , 2 , 3 ] ) for y in x ] )", "best-tranx-rerank": "[ list ( x ) for x in zip ( * [ 1 , 2 , 3 ] ) ]", "meteor-baseline": 0.31, "meteor-tranx-annot": 0.6618, "meteor-best-tranx": 0.7812, "meteor-best-tranx-rerank": 0.7308, "rougel-baseline": 0.2597, "rougel-tranx-annot": 0.5714, "rougel-best-tranx": 0.7, "rougel-best-tranx-rerank": 0.7222}, {"intent": "transpose dictionary (extract all the values for one key from a list of dictionaries)", "rewritten_intent": "extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples", "snippet": "[(x['x'], x['y']) for x in d]", "question_id": 12300912, "baseline-bleu": 0.0945, "tranx-annot-bleu": 0.1186, "best-tranx-bleu": 0.1876, "best-tranx-bleu-rerank": 0.3345, "baseline": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )", "tranx-annot": "[ ( k , v ) for k , v in zip ( x , d [ : : - 1 ] ) ]", "best-tranx": "[ tuple ( x ) for x in zip ( * d ) ]", "best-tranx-rerank": "[ d [ ` x ` ] for d in d if ` y ` in d ]", "meteor-baseline": 0.1429, "meteor-tranx-annot": 0.3224, "meteor-best-tranx": 0.3391, "meteor-best-tranx-rerank": 0.5238, "rougel-baseline": 0.2857, "rougel-tranx-annot": 0.4889, "rougel-best-tranx": 0.5143, "rougel-best-tranx-rerank": 0.6667}, {"intent": "How to get the filename without the extension from a path in Python?", "rewritten_intent": "get the filename without the extension from file 'hemanth.txt'", "snippet": "print(os.path.splitext(os.path.basename('hemanth.txt'))[0])", "question_id": 678236, "baseline-bleu": 0.1222, "tranx-annot-bleu": 0.3309, "best-tranx-bleu": 0.1656, "best-tranx-bleu-rerank": 0.1656, "baseline": "<unk><unk> = os . getdir ( '<unk>' , '<unk>' ) )", "tranx-annot": "f = os . path . dirname ( os . path . realpath ( hemanth . txt ) )", "best-tranx": "os . listdir ( ` hemanth . txt ` )", "best-tranx-rerank": "os . listdir ( ` hemanth . txt ` )", "meteor-baseline": 0.1406, "meteor-tranx-annot": 0.5951, "meteor-best-tranx": 0.3662, "meteor-best-tranx-rerank": 0.3662, "rougel-baseline": 0.2857, "rougel-tranx-annot": 0.6818, "rougel-best-tranx": 0.5143, "rougel-best-tranx-rerank": 0.5143}, {"intent": "Make dictionary from list with python", "rewritten_intent": "create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it", "snippet": "dict(x[i:i + 2] for i in range(0, len(x), 2))", "question_id": 2597166, "baseline-bleu": 0.1075, "tranx-annot-bleu": 0.144, "best-tranx-bleu": 0.0921, "best-tranx-bleu-rerank": 0.0921, "baseline": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) , reverse = True )", "tranx-annot": "dict ( zip ( x [ : : 2 ] , x [ 1 : : 2 ] ) )", "best-tranx": "dict ( ( k , v ) for k , v in x . items ( ) if v = = 1 )", "best-tranx-rerank": "dict ( ( k , v ) for k , v in x . items ( ) if v = = 1 )", "meteor-baseline": 0.22, "meteor-tranx-annot": 0.3427, "meteor-best-tranx": 0.318, "meteor-best-tranx-rerank": 0.318, "rougel-baseline": 0.44, "rougel-tranx-annot": 0.5778, "rougel-best-tranx": 0.5, "rougel-best-tranx-rerank": 0.5}, {"intent": "Merging a list of lists", "rewritten_intent": "create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`", "snippet": "values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])", "question_id": 7895449, "baseline-bleu": 0.1068, "tranx-annot-bleu": 0.8053, "best-tranx-bleu": 0.787, "best-tranx-bleu-rerank": 0.4553, "baseline": "set ( [ 'a' , 'b' , 'b' , 'b' , 'b' , 'b' ] )", "tranx-annot": "[ [ ] for i in list ( len ( [ [ ` A ` , ` B ` , ` C ` ] , [ ` D ` , ` E ` , ` F ` ] , [ ` G ` , ` H ` , ` I ` ] ] ) ) ]", "best-tranx": "[ list ( x ) for x in zip ( * [ [ ` A ` , ` B ` , ` C ` ] , [ ` D ` , ` E ` , ` F ` ] , [ ` G ` , ` H ` , ` I ` ] ] ) ]", "best-tranx-rerank": "[ ( a + b ) for a , b in zip ( [ [ ` A ` , ` B ` , ` C ` ] , [ ` D ` , ` E ` , ` F ` ] , [ ` G ` , ` H ` , ` I ` ] ] , [ [ ` A ` , ` B ` , ` C ` ] , [ ` D ` , ` E ` , ` F ` ] , [ ` G ` , ` H ` , ` I ` ] ] ) ]", "meteor-baseline": 0.2656, "meteor-tranx-annot": 0.8439, "meteor-best-tranx": 0.8439, "meteor-best-tranx-rerank": 0.7876, "rougel-baseline": 0.5316, "rougel-tranx-annot": 0.8785, "rougel-best-tranx": 0.8785, "rougel-best-tranx-rerank": 0.6275}, {"intent": "How to select rows in a DataFrame between two values, in Python Pandas?", "rewritten_intent": "select rows in a dataframe `df` column 'closing_price' between two values 99 and 101", "snippet": "df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]", "question_id": 31617845, "baseline-bleu": 0.0787, "tranx-annot-bleu": 0.1353, "best-tranx-bleu": 0.0504, "best-tranx-bleu-rerank": 0.3897, "baseline": "df . groupby ( [ 'grade' , 'Weeks' ] , inplace = True )", "tranx-annot": "df . loc [ df . columns [ ` closing_price ` ] , ]", "best-tranx": "df . groupby ( level = 0 ) . cumcount ( ) = = 0", "best-tranx-rerank": "df . loc [ ( df [ ` closing_price ` ] = = 101 ) . startswith ( ` closing_price ` ) ]", "meteor-baseline": 0.1852, "meteor-tranx-annot": 0.3093, "meteor-best-tranx": 0.1498, "meteor-best-tranx-rerank": 0.6039, "rougel-baseline": 0.4348, "rougel-tranx-annot": 0.4286, "rougel-best-tranx": 0.3721, "rougel-best-tranx-rerank": 0.7451}, {"intent": "Replace all occurrences of a string in a pandas dataframe (Python)", "rewritten_intent": "replace all occurences of newlines `\\n` with `<br>` in dataframe `df`", "snippet": "df.replace({'\\n': '<br>'}, regex=True)", "question_id": 25698710, "baseline-bleu": 0.1276, "tranx-annot-bleu": 0.4247, "best-tranx-bleu": 0.4247, "best-tranx-bleu-rerank": 0.4247, "baseline": "df . drop ( [ '<unk>' , '<unk>' ] )", "tranx-annot": "df . replace ( ` \\ n ` , ` < br > ` )", "best-tranx": "df . replace ( ` \\ n ` , ` < br > ` )", "best-tranx-rerank": "df . replace ( ` \\ n ` , ` < br > ` )", "meteor-baseline": 0.4292, "meteor-tranx-annot": 0.7217, "meteor-best-tranx": 0.7217, "meteor-best-tranx-rerank": 0.7217, "rougel-baseline": 0.5641, "rougel-tranx-annot": 0.8333, "rougel-best-tranx": 0.8333, "rougel-best-tranx-rerank": 0.8333}, {"intent": "Replace all occurrences of a string in a pandas dataframe (Python)", "rewritten_intent": "replace all occurrences of a string `\\n` by string `<br>` in a pandas data frame `df`", "snippet": "df.replace({'\\n': '<br>'}, regex=True)", "question_id": 25698710, "baseline-bleu": 0.1246, "tranx-annot-bleu": 0.3579, "best-tranx-bleu": 0.3126, "best-tranx-bleu-rerank": 0.3126, "baseline": "df . drop ( [ 'a' , '<unk>' ] )", "tranx-annot": "pd . to_datetime ( [ ` \\ n ` , ` < br > ` ] , axis = 1 )", "best-tranx": "df . replace ( ` < br > ` , ` ` )", "best-tranx-rerank": "df . replace ( ` < br > ` , ` ` )", "meteor-baseline": 0.4334, "meteor-tranx-annot": 0.625, "meteor-best-tranx": 0.5686, "meteor-best-tranx-rerank": 0.5686, "rougel-baseline": 0.5946, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.7647, "rougel-best-tranx-rerank": 0.7647}, {"intent": "Mapping a string into a list of pairs", "rewritten_intent": "create a list containing each two adjacent letters in string `word` as its elements", "snippet": "[(x + y) for x, y in zip(word, word[1:])]", "question_id": 41923858, "baseline-bleu": 0.1202, "tranx-annot-bleu": 0.0723, "best-tranx-bleu": 0.1498, "best-tranx-bleu-rerank": 0.4938, "baseline": "\"\"\"\"\"\" . join ( [ str ( i ) for x in s . split ( ',' ) ]", "tranx-annot": "list ( word . rsplit ( ` ` . join ( ` ` . join ( [ ` ` . join ( k ) for k , v in word . items ( ) ] ) ) ) )", "best-tranx": "[ ` ` . join ( x ) for x in word . split ( ) ]", "best-tranx-rerank": "[ ` ` . join ( x ) for x in zip ( bin , word [ 1 : ] ) ]", "meteor-baseline": 0.3966, "meteor-tranx-annot": 0.2321, "meteor-best-tranx": 0.4457, "meteor-best-tranx-rerank": 0.7629, "rougel-baseline": 0.4167, "rougel-tranx-annot": 0.3607, "rougel-best-tranx": 0.5641, "rougel-best-tranx-rerank": 0.7727}, {"intent": "Mapping a string into a list of pairs", "rewritten_intent": "Get a list of pairs from a string `word` using lambda function", "snippet": "list(map(lambda x, y: x + y, word[:-1], word[1:]))", "question_id": 41923858, "baseline-bleu": 0.0584, "tranx-annot-bleu": 0.0856, "best-tranx-bleu": 0.0614, "best-tranx-bleu-rerank": 0.0614, "baseline": "[ item [ i : i + n ] for i in range ( 3 ) ]", "tranx-annot": "max ( word , key = lambda x : x [ 1 ] )", "best-tranx": "[ x [ 0 ] for x in word . split ( ` , ` ) ]", "best-tranx-rerank": "[ x [ 0 ] for x in word . split ( ` , ` ) ]", "meteor-baseline": 0.1923, "meteor-tranx-annot": 0.3108, "meteor-best-tranx": 0.1923, "meteor-best-tranx-rerank": 0.1923, "rougel-baseline": 0.3636, "rougel-tranx-annot": 0.5366, "rougel-best-tranx": 0.4545, "rougel-best-tranx-rerank": 0.4545}, {"intent": "How do you extract a url from a string using python?", "rewritten_intent": "extract a url from a string `myString`", "snippet": "print(re.findall('(https?://[^\\\\s]+)', myString))", "question_id": 9760588, "baseline-bleu": 0.0104, "tranx-annot-bleu": 0.0688, "best-tranx-bleu": 0.0606, "best-tranx-bleu-rerank": 0.0606, "baseline": "myString . strip ( )", "tranx-annot": "[ m . split ( ) for item in my String . split ( ) ]", "best-tranx": "urllib . parse . quote ( my String . headers ( ) )", "best-tranx-rerank": "urllib . parse . quote ( my String . headers ( ) )", "meteor-baseline": 0.1494, "meteor-tranx-annot": 0.2255, "meteor-best-tranx": 0.2236, "meteor-best-tranx-rerank": 0.2236, "rougel-baseline": 0.303, "rougel-tranx-annot": 0.4186, "rougel-best-tranx": 0.35, "rougel-best-tranx-rerank": 0.35}, {"intent": "How do you extract a url from a string using python?", "rewritten_intent": "extract a url from a string `myString`", "snippet": "print(re.search('(?P<url>https?://[^\\\\s]+)', myString).group('url'))", "question_id": 9760588, "baseline-bleu": 0.0014, "tranx-annot-bleu": 0.0333, "best-tranx-bleu": 0.0248, "best-tranx-bleu-rerank": 0.0248, "baseline": "myString . strip ( )", "tranx-annot": "[ m . split ( ) for item in my String . split ( ) ]", "best-tranx": "urllib . parse . quote ( my String . headers ( ) )", "best-tranx-rerank": "urllib . parse . quote ( my String . headers ( ) )", "meteor-baseline": 0.1042, "meteor-tranx-annot": 0.1732, "meteor-best-tranx": 0.1734, "meteor-best-tranx-rerank": 0.1734, "rougel-baseline": 0.2222, "rougel-tranx-annot": 0.3636, "rougel-best-tranx": 0.3077, "rougel-best-tranx-rerank": 0.3077}, {"intent": "Remove all special characters, punctuation and spaces from string", "rewritten_intent": "remove all special characters, punctuation and spaces from a string `mystring` using regex", "snippet": "re.sub('[^A-Za-z0-9]+', '', mystring)", "question_id": 5843518, "baseline-bleu": 0.1056, "tranx-annot-bleu": 0.3855, "best-tranx-bleu": 0.3953, "best-tranx-bleu-rerank": 0.3953, "baseline": "re . findall ( '\\\\w\\\\w<unk>)' , re . UNICODE )", "tranx-annot": "pattern = re . sub ( ` ` , ` ` , mystring , re . UNICODE )", "best-tranx": "re . sub ( ` < unk > ` , ` ` , mystring )", "best-tranx-rerank": "re . sub ( ` < unk > ` , ` ` , mystring )", "meteor-baseline": 0.2511, "meteor-tranx-annot": 0.4543, "meteor-best-tranx": 0.5393, "meteor-best-tranx-rerank": 0.5393, "rougel-baseline": 0.3182, "rougel-tranx-annot": 0.5854, "rougel-best-tranx": 0.6316, "rougel-best-tranx-rerank": 0.6316}, {"intent": "How to get a daterange of the 2nd Fridays of each month?", "rewritten_intent": "create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'", "snippet": "pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)", "question_id": 36674519, "baseline-bleu": 0.0817, "tranx-annot-bleu": 0.3076, "best-tranx-bleu": 0.0286, "best-tranx-bleu-rerank": 0.0286, "baseline": "datetime . datetime . strptime ( '<unk>' ) . date ( '<unk>' ) . date ( )", "tranx-annot": "soup . execute ( ` a ` , ` 2016 - 01 - 01 ` )", "best-tranx": "calendar . monthrange ( 13 , 1 )", "best-tranx-rerank": "calendar . monthrange ( 13 , 1 )", "meteor-baseline": 0.1452, "meteor-tranx-annot": 0.34, "meteor-best-tranx": 0.1116, "meteor-best-tranx-rerank": 0.1116, "rougel-baseline": 0.2857, "rougel-tranx-annot": 0.65, "rougel-best-tranx": 0.3125, "rougel-best-tranx-rerank": 0.3125}, {"intent": "Multidimensional array in Python", "rewritten_intent": "Create multidimensional array `matrix` with 3 rows and 2 columns in python", "snippet": "matrix = [[a, b], [c, d], [e, f]]", "question_id": 508657, "baseline-bleu": 0.1314, "tranx-annot-bleu": 0.0817, "best-tranx-bleu": 0.0884, "best-tranx-bleu-rerank": 0.0884, "baseline": "np . dot ( [ 1 , 2 , 3 ] , [ 1 , 2 ] )", "tranx-annot": "matrix = np . array ( [ ( i , j ) for i , j in enumerate ( matrix , 3 ) ] )", "best-tranx": "[ [ [ x [ 0 ] ] for x in matrix [ i ] ] for i in range ( len ( matrix ) ) ]", "best-tranx-rerank": "[ [ [ x [ 0 ] ] for x in matrix [ i ] ] for i in range ( len ( matrix ) ) ]", "meteor-baseline": 0.257, "meteor-tranx-annot": 0.1636, "meteor-best-tranx": 0.2703, "meteor-best-tranx-rerank": 0.2703, "rougel-baseline": 0.4103, "rougel-tranx-annot": 0.3043, "rougel-best-tranx": 0.375, "rougel-best-tranx-rerank": 0.375}, {"intent": "How do I replace whitespaces with underscore and vice versa?", "rewritten_intent": "replace spaces with underscore", "snippet": "mystring.replace(' ', '_')", "question_id": 1007481, "baseline-bleu": 0.0691, "tranx-annot-bleu": 0.1575, "best-tranx-bleu": 0.0807, "best-tranx-bleu-rerank": 0.0807, "baseline": "print ( s )", "tranx-annot": "` ` ` ` ` ` . join ( compile ( c . split ( ` , ` ) ) )", "best-tranx": "` ` ` ` ` ` . join ( x . strip ( ) or x . isdigit ( ) for x in re . sub ( ` [ \\ \\ W_ ] + ` , ` ` , para ) . split ( ` ` ) )", "best-tranx-rerank": "` ` ` ` ` ` . join ( x . strip ( ) or x . isdigit ( ) for x in re . sub ( ` [ \\ \\ W_ ] + ` , ` ` , para ) . split ( ` ` ) )", "meteor-baseline": 0.0971, "meteor-tranx-annot": 0.4434, "meteor-best-tranx": 0.4294, "meteor-best-tranx-rerank": 0.4294, "rougel-baseline": 0.2667, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.2712, "rougel-best-tranx-rerank": 0.2712}, {"intent": "How to get an absolute file path in Python", "rewritten_intent": "get an absolute file path of file 'mydir/myfile.txt'", "snippet": "os.path.abspath('mydir/myfile.txt')", "question_id": 51520, "baseline-bleu": 0.2797, "tranx-annot-bleu": 0.5245, "best-tranx-bleu": 0.3283, "best-tranx-bleu-rerank": 0.4139, "baseline": "shutil . copy ( 'file.txt' )", "tranx-annot": "os . path . join ( os . path . abspath ( __file__ ) , ` mydir / myfile . txt ` )", "best-tranx": "print ( os . path . dirname ( os . path . abspath ( __file__ ) ) )", "best-tranx-rerank": "print ( os . path . dirname ( os . path . abspath ( mydir / myfile . txt ) ) )", "meteor-baseline": 0.4944, "meteor-tranx-annot": 0.9382, "meteor-best-tranx": 0.3695, "meteor-best-tranx-rerank": 0.8045, "rougel-baseline": 0.5833, "rougel-tranx-annot": 0.7568, "rougel-best-tranx": 0.5, "rougel-best-tranx-rerank": 0.6667}, {"intent": "Is there a string-collapse library function in python?", "rewritten_intent": "split string `my_string` on white spaces", "snippet": "\"\"\" \"\"\".join(my_string.split())", "question_id": 1249786, "baseline-bleu": 0.2545, "tranx-annot-bleu": 0.1961, "best-tranx-bleu": 0.1961, "best-tranx-bleu-rerank": 0.1961, "baseline": "print ( s . split ( ) )", "tranx-annot": "my_string . split ( ` ` )", "best-tranx": "my_string . split ( ` ` )", "best-tranx-rerank": "my_string . split ( ` ` )", "meteor-baseline": 0.4118, "meteor-tranx-annot": 0.4736, "meteor-best-tranx": 0.4736, "meteor-best-tranx-rerank": 0.4736, "rougel-baseline": 0.5217, "rougel-tranx-annot": 0.6364, "rougel-best-tranx": 0.6364, "rougel-best-tranx-rerank": 0.6364}, {"intent": "Get Filename Without Extension in Python", "rewritten_intent": "get filename without extension from file `filename`", "snippet": "os.path.splitext(filename)[0]", "question_id": 4444923, "baseline-bleu": 0.169, "tranx-annot-bleu": 0.4207, "best-tranx-bleu": 0.123, "best-tranx-bleu-rerank": 0.3146, "baseline": "os . walk ( '\\n' )", "tranx-annot": "return os . path . realpath ( filename )", "best-tranx": "os . getcwd ( )", "best-tranx-rerank": "os . path . split ( os . getcwd ( ) )", "meteor-baseline": 0.1852, "meteor-tranx-annot": 0.6406, "meteor-best-tranx": 0.1923, "meteor-best-tranx-rerank": 0.2703, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.7, "rougel-best-tranx": 0.5, "rougel-best-tranx-rerank": 0.5217}, {"intent": "How to sum elements in functional way", "rewritten_intent": "get a list containing the sum of each element `i` in list `l` plus the previous elements", "snippet": "[sum(l[:i]) for i, _ in enumerate(l)]", "question_id": 13728486, "baseline-bleu": 0.1737, "tranx-annot-bleu": 0.1793, "best-tranx-bleu": 0.0953, "best-tranx-bleu-rerank": 0.0953, "baseline": "[ ( x , y ) for k , v in enumerate ( my_list ) ]", "tranx-annot": "[ ( y * b ) for a , b in zip ( i , l ) ]", "best-tranx": "[ i for i in l if i in l ]", "best-tranx-rerank": "[ i for i in l if i in l ]", "meteor-baseline": 0.477, "meteor-tranx-annot": 0.507, "meteor-best-tranx": 0.2198, "meteor-best-tranx-rerank": 0.2198, "rougel-baseline": 0.5714, "rougel-tranx-annot": 0.5946, "rougel-best-tranx": 0.5333, "rougel-best-tranx-rerank": 0.5333}, {"intent": "Python Regex Split Keeps Split Pattern Characters", "rewritten_intent": "split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result", "snippet": "\"\"\"Docs/src/Scripts/temp\"\"\".replace('/', '/\\x00/').split('\\x00')", "question_id": 9743134, "baseline-bleu": 0.0759, "tranx-annot-bleu": 0.6769, "best-tranx-bleu": 0.3281, "best-tranx-bleu-rerank": 0.3281, "baseline": "print ( os . path . split ( 'utf-8' ) )", "tranx-annot": "` ` ` Docs / src / Scripts / temp ` ` ` . replace ( ` / ` , ` ` ) . replace ( ` / ` , ` ` ) . split ( ` / ` )", "best-tranx": "re . split ( ` / ` , ` Docs / src / Scripts / temp ` )", "best-tranx-rerank": "re . split ( ` / ` , ` Docs / src / Scripts / temp ` )", "meteor-baseline": 0.2323, "meteor-tranx-annot": 0.8479, "meteor-best-tranx": 0.3679, "meteor-best-tranx-rerank": 0.3679, "rougel-baseline": 0.36, "rougel-tranx-annot": 0.8267, "rougel-best-tranx": 0.6415, "rougel-best-tranx-rerank": 0.6415}, {"intent": "Shuffle columns of an array with Numpy", "rewritten_intent": "shuffle columns of an numpy array 'r'", "snippet": "np.random.shuffle(np.transpose(r))", "question_id": 20546419, "baseline-bleu": 0.1284, "tranx-annot-bleu": 0.519, "best-tranx-bleu": 0.1163, "best-tranx-bleu-rerank": 0.1343, "baseline": "np . delete ( 0 , 1 )", "tranx-annot": "np . shuffle ( np . in1d ( r ) ) [ 0 ]", "best-tranx": "np . array ( np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) )", "best-tranx-rerank": "np . array ( [ r ] )", "meteor-baseline": 0.2525, "meteor-tranx-annot": 0.7531, "meteor-best-tranx": 0.4877, "meteor-best-tranx-rerank": 0.2976, "rougel-baseline": 0.381, "rougel-tranx-annot": 0.7407, "rougel-best-tranx": 0.4, "rougel-best-tranx-rerank": 0.4762}, {"intent": "Copy all values in a column to a new column in a pandas dataframe", "rewritten_intent": "copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'", "snippet": "df['D'] = df['B']", "question_id": 32675861, "baseline-bleu": 0.2915, "tranx-annot-bleu": 0.3083, "best-tranx-bleu": 0.3833, "best-tranx-bleu-rerank": 0.3833, "baseline": "df [ 'value' ] = df [ 'value' ] = df [ 'value' ] . astype ( df )", "tranx-annot": "pd . Data Frame ( [ ` B ` , ` D ` ] , axis = 1 )", "best-tranx": "df [ ` D ` ] = df [ ` B ` ] . apply ( lambda x : x [ ` D ` ] + x [ ` df ` ] )", "best-tranx-rerank": "df [ ` D ` ] = df [ ` B ` ] . apply ( lambda x : x [ ` D ` ] + x [ ` df ` ] )", "meteor-baseline": 0.7118, "meteor-tranx-annot": 0.4294, "meteor-best-tranx": 0.799, "meteor-best-tranx-rerank": 0.799, "rougel-baseline": 0.5789, "rougel-tranx-annot": 0.5625, "rougel-best-tranx": 0.5652, "rougel-best-tranx-rerank": 0.5652}, {"intent": "Find a value within nested json dictionary in python", "rewritten_intent": "find a value within nested json 'data' where the key inside another key 'B' is unknown.", "snippet": "list(data['A']['B'].values())[0]['maindata'][0]['Info']", "question_id": 14227561, "baseline-bleu": 0.1162, "tranx-annot-bleu": 0.2396, "best-tranx-bleu": 0.1304, "best-tranx-bleu-rerank": 0.1304, "baseline": "data [ 'a' ] = df [ 'a' ] . replace ( 'My#SPACE#' )", "tranx-annot": "json . dumps ( data , key = lambda x : x [ ` B ` ] [ ` B ` ] , reverse = ` True ` )", "best-tranx": "[ x for x in data if x [ ` B ` ] = = ` B ` ]", "best-tranx-rerank": "[ x for x in data if x [ ` B ` ] = = ` B ` ]", "meteor-baseline": 0.228, "meteor-tranx-annot": 0.2657, "meteor-best-tranx": 0.1955, "meteor-best-tranx-rerank": 0.1955, "rougel-baseline": 0.4912, "rougel-tranx-annot": 0.4762, "rougel-best-tranx": 0.3774, "rougel-best-tranx-rerank": 0.3774}, {"intent": "True for all characters of a string", "rewritten_intent": "check characters of string `string` are true predication of function `predicate`", "snippet": "all(predicate(x) for x in string)", "question_id": 14858916, "baseline-bleu": 0.1546, "tranx-annot-bleu": 0.1257, "best-tranx-bleu": 0.0978, "best-tranx-bleu-rerank": 0.0978, "baseline": "[ x [ 0 ] for x in s . split ( ',' ) ]", "tranx-annot": "print ( string . encode ( ` ? ` , 1 ) )", "best-tranx": "string . isdigit ( )", "best-tranx-rerank": "string . isdigit ( )", "meteor-baseline": 0.4406, "meteor-tranx-annot": 0.2232, "meteor-best-tranx": 0.1442, "meteor-best-tranx-rerank": 0.1442, "rougel-baseline": 0.4286, "rougel-tranx-annot": 0.4167, "rougel-best-tranx": 0.375, "rougel-best-tranx-rerank": 0.375}, {"intent": "How to determine number of files on a drive with Python?", "rewritten_intent": "determine number of files on a drive with python", "snippet": "os.statvfs('/').f_files - os.statvfs('/').f_ffree", "question_id": 574236, "baseline-bleu": 0.0975, "tranx-annot-bleu": 0.0514, "best-tranx-bleu": 0.0961, "best-tranx-bleu-rerank": 0.1124, "baseline": "print ( '{0:.2f}' . format ( s ) )", "tranx-annot": "print ( os . getcwd ( ) )", "best-tranx": "print ( glob . glob ( ` < unk > ` ) )", "best-tranx-rerank": "print ( ` < unk > ` . format ( os . getcwd ( ) ) )", "meteor-baseline": 0.1951, "meteor-tranx-annot": 0.1523, "meteor-best-tranx": 0.2374, "meteor-best-tranx-rerank": 0.2184, "rougel-baseline": 0.4324, "rougel-tranx-annot": 0.4138, "rougel-best-tranx": 0.4118, "rougel-best-tranx-rerank": 0.4737}, {"intent": "how to get a single result from a SQLite query in python?", "rewritten_intent": null, "snippet": "cursor.fetchone()[0]", "question_id": 7011291, "baseline-bleu": 0.0299, "tranx-annot-bleu": 0.1783, "best-tranx-bleu": 0.0435, "best-tranx-bleu-rerank": 0.0501, "baseline": "cursor . execute ( 'INSERT#SPACE#INTO#SPACE#INTO#SPACE#INTO#SPACE#table#SPACE#%s,#SPACE#%s,#SPACE#%s,#SPACE#%s,#SPACE#%s,#SPACE#%s)' )", "tranx-annot": "session . query ( n ) . click ( )", "best-tranx": "cursor . execute ( ` INSERT INTO table VALUES ( % s , % s , % s ) ` , ( var1 , var2 , var3 ) ) . update ( key = lambda i : int ( i [ 1 ] ) )", "best-tranx-rerank": "cursor . execute ( ` all ` ) . execute ( ` INSERT INTO table VALUES ( % s , % s , % s ) ` , ( var1 , var2 , var3 ) )", "meteor-baseline": 0.2391, "meteor-tranx-annot": 0.3117, "meteor-best-tranx": 0.2564, "meteor-best-tranx-rerank": 0.1852, "rougel-baseline": 0.1176, "rougel-tranx-annot": 0.3333, "rougel-best-tranx": 0.2264, "rougel-best-tranx-rerank": 0.1818}, {"intent": "How to convert a string list into an integer in python", "rewritten_intent": "convert string `user_input` into a list of integers `user_list`", "snippet": "user_list = [int(number) for number in user_input.split(',')]", "question_id": 6378889, "baseline-bleu": 0.0846, "tranx-annot-bleu": 0.6134, "best-tranx-bleu": 0.4675, "best-tranx-bleu-rerank": 0.4675, "baseline": "print ( [ x for x in my_list if x > 0 ] )", "tranx-annot": "[ int ( x ) for x in user_input . split ( ` , ` ) ]", "best-tranx": "user_list = [ int ( i ) for i in user_input . split ( ) ]", "best-tranx-rerank": "user_list = [ int ( x ) for x in user_input . split ( ) ]", "meteor-baseline": 0.1622, "meteor-tranx-annot": 0.7947, "meteor-best-tranx": 0.7399, "meteor-best-tranx-rerank": 0.7399, "rougel-baseline": 0.3636, "rougel-tranx-annot": 0.8333, "rougel-best-tranx": 0.8, "rougel-best-tranx-rerank": 0.8}, {"intent": "How to convert a string list into an integer in python", "rewritten_intent": "Get a list of integers by splitting  a string `user` with comma", "snippet": "[int(s) for s in user.split(',')]", "question_id": 6378889, "baseline-bleu": 0.1626, "tranx-annot-bleu": 0.006, "best-tranx-bleu": 0.4329, "best-tranx-bleu-rerank": 0.163, "baseline": "\"\"\"\"\"\" . join ( list ( s ) )", "tranx-annot": "[ user ]", "best-tranx": "list ( user . split ( ` , ` ) )", "best-tranx-rerank": "list ( user . split ( ) )", "meteor-baseline": 0.2395, "meteor-tranx-annot": 0.0962, "meteor-best-tranx": 0.5902, "meteor-best-tranx-rerank": 0.3942, "rougel-baseline": 0.5161, "rougel-tranx-annot": 0.3, "rougel-best-tranx": 0.7143, "rougel-best-tranx-rerank": 0.56}, {"intent": "Sorting a Python list by two criteria", "rewritten_intent": null, "snippet": "sorted(list, key=lambda x: (x[0], -x[1]))", "question_id": 5212870, "baseline-bleu": 0.3892, "tranx-annot-bleu": 0.2334, "best-tranx-bleu": 0.3892, "best-tranx-bleu-rerank": 0.3892, "baseline": "sorted ( a , key = lambda x : x [ 1 ] )", "tranx-annot": "sorted ( a , key = lambda x : x . lower ( ) if x . startswith ( ` . ` ) else x . lower ( ) )", "best-tranx": "sorted ( l , key = lambda x : x [ 1 ] )", "best-tranx-rerank": "sorted ( l , key = lambda x : x [ 1 ] )", "meteor-baseline": 0.5418, "meteor-tranx-annot": 0.4404, "meteor-best-tranx": 0.5418, "meteor-best-tranx-rerank": 0.5418, "rougel-baseline": 0.7222, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.7222, "rougel-best-tranx-rerank": 0.7222}, {"intent": "How to sort a list of objects , based on an attribute of the objects?", "rewritten_intent": "sort a list of objects `ut`, based on a function `cmpfun` in descending order", "snippet": "ut.sort(key=cmpfun, reverse=True)", "question_id": 403421, "baseline-bleu": 0.1204, "tranx-annot-bleu": 0.1844, "best-tranx-bleu": 0.249, "best-tranx-bleu-rerank": 0.3965, "baseline": "sorted ( a , key = lambda x : ( x [ 1 ] ) )", "tranx-annot": "sorted ( ut , key = cmpfun . on , axis = ` True ` )", "best-tranx": "ut . sort ( * * operator . attrgetter ( ` cmpfun ` ) )", "best-tranx-rerank": "ut . sort ( key = operator . attrgetter ( ` cmpfun ` ) )", "meteor-baseline": 0.2823, "meteor-tranx-annot": 0.7636, "meteor-best-tranx": 0.2439, "meteor-best-tranx-rerank": 0.3252, "rougel-baseline": 0.3571, "rougel-tranx-annot": 0.7143, "rougel-best-tranx": 0.4444, "rougel-best-tranx-rerank": 0.5926}, {"intent": "How to sort a list of objects , based on an attribute of the objects?", "rewritten_intent": "reverse list `ut` based on the `count` attribute of each object", "snippet": "ut.sort(key=lambda x: x.count, reverse=True)", "question_id": 403421, "baseline-bleu": 0.2844, "tranx-annot-bleu": 0.4944, "best-tranx-bleu": 0.3579, "best-tranx-bleu-rerank": 0.6885, "baseline": "mylist . sort ( key = operator . itemgetter ( 'resultType' ) )", "tranx-annot": "ut . reverse ( key = lambda x : x . ut )", "best-tranx": "list ( ut . keys ( ) ) . get ( key = lambda x : x [ 1 ] )", "best-tranx-rerank": "ut . sort ( key = lambda x : x . count )", "meteor-baseline": 0.2838, "meteor-tranx-annot": 0.6511, "meteor-best-tranx": 0.5809, "meteor-best-tranx-rerank": 0.7717, "rougel-baseline": 0.4242, "rougel-tranx-annot": 0.8, "rougel-best-tranx": 0.5789, "rougel-best-tranx-rerank": 0.8667}, {"intent": "How to sort a list of objects , based on an attribute of the objects?", "rewritten_intent": "sort a list of objects `ut` in reverse order by their `count` property", "snippet": "ut.sort(key=lambda x: x.count, reverse=True)", "question_id": 403421, "baseline-bleu": 0.3563, "tranx-annot-bleu": 0.1114, "best-tranx-bleu": 0.0795, "best-tranx-bleu-rerank": 0.1247, "baseline": "sorted ( li , key = lambda x : x [ 1 ] ) )", "tranx-annot": "sorted ( ut , key = itemgetter ( ` ` ) )", "best-tranx": "sorted ( ut , * * sorted ( set ( itertools . chain . from_iterable ( ut ) ) ) )", "best-tranx-rerank": "sorted ( ut , key = operator . attrgetter ( ` count ` ) )", "meteor-baseline": 0.5704, "meteor-tranx-annot": 0.2424, "meteor-best-tranx": 0.2299, "meteor-best-tranx-rerank": 0.2976, "rougel-baseline": 0.5625, "rougel-tranx-annot": 0.4138, "rougel-best-tranx": 0.3158, "rougel-best-tranx-rerank": 0.5}, {"intent": "Click a href button with selenium and python?", "rewritten_intent": "click a href button 'Send' with selenium", "snippet": "driver.find_element_by_partial_link_text('Send').click()", "question_id": 19601086, "baseline-bleu": 0.2023, "tranx-annot-bleu": 0.7911, "best-tranx-bleu": 0.7539, "best-tranx-bleu-rerank": 0.7539, "baseline": "driver . find_element_by_css_selector ( 'button' ) )", "tranx-annot": "driver . find_element_by_css_selector ( ` Send ` ) . click ( )", "best-tranx": "browser . find_element_by_class_name ( ` Send ` ) . click ( )", "best-tranx-rerank": "browser . find_element_by_class_name ( ` Send ` ) . click ( )", "meteor-baseline": 0.4099, "meteor-tranx-annot": 0.9139, "meteor-best-tranx": 0.83, "meteor-best-tranx-rerank": 0.83, "rougel-baseline": 0.6667, "rougel-tranx-annot": 0.9167, "rougel-best-tranx": 0.8333, "rougel-best-tranx-rerank": 0.8333}, {"intent": "Click a href button with selenium and python?", "rewritten_intent": "click a href button having text `Send InMail` with selenium", "snippet": "driver.findElement(By.linkText('Send InMail')).click()", "question_id": 19601086, "baseline-bleu": 0.2643, "tranx-annot-bleu": 0.4573, "best-tranx-bleu": 0.4392, "best-tranx-bleu-rerank": 0.4392, "baseline": "driver . find_element_by_xpath ( '<check_box_id-Z' ) . click ( )", "tranx-annot": "driver . find_element_by_css_selector ( ` Send In Mail ` ) . click ( )", "best-tranx": "browser . find_element_by_class_name ( ` Send In Mail ` ) . click ( )", "best-tranx-rerank": "browser . find_element_by_class_name ( ` Send In Mail ` ) . click ( )", "meteor-baseline": 0.4596, "meteor-tranx-annot": 0.6311, "meteor-best-tranx": 0.5865, "meteor-best-tranx-rerank": 0.5865, "rougel-baseline": 0.5556, "rougel-tranx-annot": 0.7429, "rougel-best-tranx": 0.6857, "rougel-best-tranx-rerank": 0.6857}, {"intent": "Click a href button with selenium and python?", "rewritten_intent": "click a href button with text 'Send InMail' with selenium", "snippet": "driver.find_element_by_link_text('Send InMail').click()", "question_id": 19601086, "baseline-bleu": 0.3327, "tranx-annot-bleu": 0.8242, "best-tranx-bleu": 0.7917, "best-tranx-bleu-rerank": 0.7917, "baseline": "driver . find_element_by_css_selector ( '<check_box_id-<unk><unk>' ) . click ( )", "tranx-annot": "driver . find_element_by_css_selector ( ` Send In Mail ` ) . click ( )", "best-tranx": "browser . find_element_by_class_name ( ` Send In Mail ` ) . click ( )", "best-tranx-rerank": "browser . find_element_by_class_name ( ` Send In Mail ` ) . click ( )", "meteor-baseline": 0.6757, "meteor-tranx-annot": 0.9269, "meteor-best-tranx": 0.8552, "meteor-best-tranx-rerank": 0.8552, "rougel-baseline": 0.5882, "rougel-tranx-annot": 0.9286, "rougel-best-tranx": 0.8571, "rougel-best-tranx-rerank": 0.8571}, {"intent": "Casting an int to a string in Python", "rewritten_intent": "cast an int `i` to a string and concat to string 'ME'", "snippet": "'ME' + str(i)", "question_id": 3944876, "baseline-bleu": 0.0731, "tranx-annot-bleu": 0.1584, "best-tranx-bleu": 0.0909, "best-tranx-bleu-rerank": 0.1677, "baseline": "\"\"\"<unk>\"\"\" . join ( [ '<unk>' , 16 )", "tranx-annot": "` ` ` ME ` ` ` . encode ( ` utf - 8 ` )", "best-tranx": "print ( ` ` . join ( str ( ord ( c ) ) for c in ` ` ) )", "best-tranx-rerank": "print ( ` ` . join ( str ( ` ` . join ( str ( i ) ) ) ) )", "meteor-baseline": 0.2151, "meteor-tranx-annot": 0.2841, "meteor-best-tranx": 0.2688, "meteor-best-tranx-rerank": 0.5437, "rougel-baseline": 0.2759, "rougel-tranx-annot": 0.4167, "rougel-best-tranx": 0.3448, "rougel-best-tranx-rerank": 0.4}, {"intent": "Sorting data in DataFrame Pandas", "rewritten_intent": null, "snippet": "df.sort_values(['System_num', 'Dis'])", "question_id": 40903174, "baseline-bleu": 0.1294, "tranx-annot-bleu": 0.1066, "best-tranx-bleu": 0.3481, "best-tranx-bleu-rerank": 0.3481, "baseline": "df . sort ( lambda x : x [ 1 ] , ascending = False )", "tranx-annot": "pd . Data Frame ( list ( df . items ( ) ) , axis = 0 )", "best-tranx": "df . sort_values ( [ ` x ` , ` y ` ] , ascending = [ True , False ] )", "best-tranx-rerank": "df . sort_values ( [ ` x ` , ` y ` ] , ascending = [ True , False ] )", "meteor-baseline": 0.3377, "meteor-tranx-annot": 0.2583, "meteor-best-tranx": 0.6907, "meteor-best-tranx-rerank": 0.6907, "rougel-baseline": 0.4667, "rougel-tranx-annot": 0.3125, "rougel-best-tranx": 0.6667, "rougel-best-tranx-rerank": 0.6667}, {"intent": "Prepend a line to an existing file in Python", "rewritten_intent": "prepend the line '#test firstline\\n' to the contents of file 'infile' and save as the file 'outfile'", "snippet": "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())", "question_id": 4454298, "baseline-bleu": 0.0509, "tranx-annot-bleu": 0.2322, "best-tranx-bleu": 0.1325, "best-tranx-bleu-rerank": 0.2572, "baseline": "os . system ( 'some_command#SPACE#with#SPACE#World' )", "tranx-annot": "f = open ( ` infile ` , ` f ` ) . read ( )", "best-tranx": "os . listdir ( ` # test firstline \\ n ` )", "best-tranx-rerank": "os . chmod ( ` # test firstline \\ n ` , ` infile ` )", "meteor-baseline": 0.0987, "meteor-tranx-annot": 0.3303, "meteor-best-tranx": 0.2973, "meteor-best-tranx-rerank": 0.4424, "rougel-baseline": 0.25, "rougel-tranx-annot": 0.5417, "rougel-best-tranx": 0.4545, "rougel-best-tranx-rerank": 0.5833}, {"intent": "Python sort a List by length of value in tuple", "rewritten_intent": "sort a list `l` by length of value in tuple", "snippet": "l.sort(key=lambda t: len(t[1]), reverse=True)", "question_id": 19729928, "baseline-bleu": 0.2272, "tranx-annot-bleu": 0.156, "best-tranx-bleu": 0.1913, "best-tranx-bleu-rerank": 0.1913, "baseline": "sorted ( a , key = lambda x : x [ 1 ] ) )", "tranx-annot": "sorted ( l , key = lambda x : map ( int , x [ x : ] ) )", "best-tranx": "sorted ( l , key = lambda x : len ( l [ i ] ) )", "best-tranx-rerank": "sorted ( l , key = lambda x : len ( l [ i ] ) )", "meteor-baseline": 0.4922, "meteor-tranx-annot": 0.4589, "meteor-best-tranx": 0.6819, "meteor-best-tranx-rerank": 0.6819, "rougel-baseline": 0.6111, "rougel-tranx-annot": 0.5854, "rougel-best-tranx": 0.6842, "rougel-best-tranx-rerank": 0.6842}, {"intent": "Split by suffix with Python regular expression", "rewritten_intent": "split string `s` by words that ends with 'd'", "snippet": "re.findall('\\\\b(\\\\w+)d\\\\b', s)", "question_id": 31371879, "baseline-bleu": 0.0519, "tranx-annot-bleu": 0.1088, "best-tranx-bleu": 0.1611, "best-tranx-bleu-rerank": 0.1611, "baseline": "s . split ( ',' )", "tranx-annot": "[ s . split ( ` ` ) for x in s . split ( ` , ` ) ]", "best-tranx": "re . split ( ` < unk > ` , s )", "best-tranx-rerank": "re . split ( ` < unk > ` , s )", "meteor-baseline": 0.1699, "meteor-tranx-annot": 0.2064, "meteor-best-tranx": 0.3571, "meteor-best-tranx-rerank": 0.3571, "rougel-baseline": 0.4667, "rougel-tranx-annot": 0.4286, "rougel-best-tranx": 0.4706, "rougel-best-tranx-rerank": 0.4706}, {"intent": "python's re: return True if regex contains in the string", "rewritten_intent": "return `True` if string `foobarrrr` contains regex `ba[rzd]`", "snippet": "bool(re.search('ba[rzd]', 'foobarrrr'))", "question_id": 9012008, "baseline-bleu": 0.1811, "tranx-annot-bleu": 0.2498, "best-tranx-bleu": 0.4969, "best-tranx-bleu-rerank": 0.497, "baseline": "re . findall ( '[a-zA-Z]' , s )", "tranx-annot": "if foobarrrr = = ` ba [ rzd ] ` : print ( ` ba [ rzd ] ` ) else : print ( ` ba [ rzd ] ` )", "best-tranx": "re . match ( ` ba [ rzd ] ` , foobarrrr ) . group ( 0 )", "best-tranx-rerank": "re . match ( ` ba [ rzd ] ` , foobarrrr ) . start ( )", "meteor-baseline": 0.3262, "meteor-tranx-annot": 0.5203, "meteor-best-tranx": 0.5891, "meteor-best-tranx-rerank": 0.5924, "rougel-baseline": 0.5143, "rougel-tranx-annot": 0.5306, "rougel-best-tranx": 0.7778, "rougel-best-tranx-rerank": 0.8}, {"intent": "Removing duplicates in lists", "rewritten_intent": "Removing duplicates in list `t`", "snippet": "list(set(t))", "question_id": 7961363, "baseline-bleu": 0.1236, "tranx-annot-bleu": 0.2379, "best-tranx-bleu": 0.1222, "best-tranx-bleu-rerank": 0.1222, "baseline": "print ( [ i for i in range ( 100 ) ]", "tranx-annot": "return all ( set ( itertools . chain ( * t ) ) )", "best-tranx": "[ list ( item ) for item in set ( len ( item ) for item in t ) ]", "best-tranx-rerank": "[ list ( item ) for item in set ( len ( item ) for item in t ) ]", "meteor-baseline": 0.2, "meteor-tranx-annot": 0.5538, "meteor-best-tranx": 0.4217, "meteor-best-tranx-rerank": 0.4217, "rougel-baseline": 0.3158, "rougel-tranx-annot": 0.5714, "rougel-best-tranx": 0.5185, "rougel-best-tranx-rerank": 0.5185}, {"intent": "Removing duplicates in lists", "rewritten_intent": "Removing duplicates in list `source_list`", "snippet": "list(set(source_list))", "question_id": 7961363, "baseline-bleu": 0.1562, "tranx-annot-bleu": 0.2379, "best-tranx-bleu": 0.1222, "best-tranx-bleu-rerank": 0.1222, "baseline": "some_list [ : : - 1 ]", "tranx-annot": "return all ( set ( itertools . chain ( * source_list ) ) )", "best-tranx": "[ list ( item ) for item in set ( len ( item ) for item in source_list ) ]", "best-tranx-rerank": "[ list ( item ) for item in set ( len ( item ) for item in source_list ) ]", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.5538, "meteor-best-tranx": 0.4217, "meteor-best-tranx-rerank": 0.4217, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.5714, "rougel-best-tranx": 0.5185, "rougel-best-tranx-rerank": 0.5185}, {"intent": "Removing duplicates in lists", "rewritten_intent": "Removing duplicates in list `abracadabra`", "snippet": "list(OrderedDict.fromkeys('abracadabra'))", "question_id": 7961363, "baseline-bleu": 0.0909, "tranx-annot-bleu": 0.1438, "best-tranx-bleu": 0.0994, "best-tranx-bleu-rerank": 0.0994, "baseline": "print ( set ( d . items ( ) ) , key = lambda x : x [ 1 ] )", "tranx-annot": "return all ( set ( itertools . chain ( * abracadabra ) ) )", "best-tranx": "[ list ( item ) for item in set ( len ( item ) for item in abracadabra ) ]", "best-tranx-rerank": "[ list ( item ) for item in set ( len ( item ) for item in abracadabra ) ]", "meteor-baseline": 0.1938, "meteor-tranx-annot": 0.3495, "meteor-best-tranx": 0.2344, "meteor-best-tranx-rerank": 0.2344, "rougel-baseline": 0.303, "rougel-tranx-annot": 0.4615, "rougel-best-tranx": 0.375, "rougel-best-tranx-rerank": 0.375}, {"intent": "How to make List from Numpy Matrix in Python", "rewritten_intent": "Convert array `a` into a list", "snippet": "numpy.array(a).reshape(-1).tolist()", "question_id": 5183533, "baseline-bleu": 0.097, "tranx-annot-bleu": 0.1352, "best-tranx-bleu": 0.0333, "best-tranx-bleu-rerank": 0.0333, "baseline": "a . shape [ : : - 1 ]", "tranx-annot": "print ( [ i for i in range ( len ( a ) ) for y in x ] )", "best-tranx": "list ( a )", "best-tranx-rerank": "list ( a )", "meteor-baseline": 0.2063, "meteor-tranx-annot": 0.3561, "meteor-best-tranx": 0.1014, "meteor-best-tranx-rerank": 0.1014, "rougel-baseline": 0.32, "rougel-tranx-annot": 0.3889, "rougel-best-tranx": 0.3, "rougel-best-tranx-rerank": 0.3}, {"intent": "How to make List from Numpy Matrix in Python", "rewritten_intent": "Convert the first row of numpy matrix `a` to a list", "snippet": "numpy.array(a)[0].tolist()", "question_id": 5183533, "baseline-bleu": 0.1421, "tranx-annot-bleu": 0.2102, "best-tranx-bleu": 0.3676, "best-tranx-bleu-rerank": 0.2827, "baseline": "np . dot ( a , a )", "tranx-annot": "np . matrix ( a ) . reshape ( a )", "best-tranx": "a = numpy . array ( a , 0 )", "best-tranx-rerank": "a = np . array ( a , 0 )", "meteor-baseline": 0.16, "meteor-tranx-annot": 0.2734, "meteor-best-tranx": 0.2756, "meteor-best-tranx-rerank": 0.2362, "rougel-baseline": 0.381, "rougel-tranx-annot": 0.5833, "rougel-best-tranx": 0.6087, "rougel-best-tranx-rerank": 0.5217}, {"intent": "Beautifulsoup - nextSibling", "rewritten_intent": "In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`", "snippet": "print(soup.find(text='Address:').findNext('td').contents[0])", "question_id": 5999747, "baseline-bleu": 0.0731, "tranx-annot-bleu": 0.2317, "best-tranx-bleu": 0.3117, "best-tranx-bleu-rerank": 0.2877, "baseline": "soup . find_all ( 'monkey#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>' )", "tranx-annot": "content = open ( ` soup ` , ` r ` ) . write ( ` Address : ` )", "best-tranx": "print ( soup . find ( ` Address : ` , * * re . compile ( ` Address : ` ) ) . replace ( ` M ` , ` ` ) )", "best-tranx-rerank": "print ( soup . replace ( ` Address : ` , ` ` ) . replace ( ` Address : ` , ` ` ) )", "meteor-baseline": 0.1551, "meteor-tranx-annot": 0.4032, "meteor-best-tranx": 0.4618, "meteor-best-tranx-rerank": 0.5222, "rougel-baseline": 0.2034, "rougel-tranx-annot": 0.5532, "rougel-best-tranx": 0.5902, "rougel-best-tranx-rerank": 0.6038}, {"intent": "Converting lists of tuples to strings Python", "rewritten_intent": "convert elements of each tuple in list `l` into a string  separated by character `@`", "snippet": "\"\"\" \"\"\".join([('%d@%d' % t) for t in l])", "question_id": 4284648, "baseline-bleu": 0.0713, "tranx-annot-bleu": 0.1685, "best-tranx-bleu": 0.1901, "best-tranx-bleu-rerank": 0.3961, "baseline": "[ item [ 0 ] for x in s . split ( ',' ) ]", "tranx-annot": "[ ` ` . join ( x ) for x in l ]", "best-tranx": "[ ` ` . join ( x ) for x in zip ( * l ) ]", "best-tranx-rerank": "` ` ` ` ` ` . join ( ` ` . join ( map ( str , x ) ) for x in l )", "meteor-baseline": 0.2246, "meteor-tranx-annot": 0.347, "meteor-best-tranx": 0.3862, "meteor-best-tranx-rerank": 0.599, "rougel-baseline": 0.4091, "rougel-tranx-annot": 0.55, "rougel-best-tranx": 0.5909, "rougel-best-tranx-rerank": 0.6415}, {"intent": "Converting lists of tuples to strings Python", "rewritten_intent": "convert each tuple in list `l` to a string with '@' separating the tuples' elements", "snippet": "\"\"\" \"\"\".join([('%d@%d' % (t[0], t[1])) for t in l])", "question_id": 4284648, "baseline-bleu": 0.0466, "tranx-annot-bleu": 0.1678, "best-tranx-bleu": 0.081, "best-tranx-bleu-rerank": 0.0917, "baseline": "[ ( x , y ) for k , v in zip ( a , b ) ]", "tranx-annot": "` ` ` @ ` ` ` . join ( str ( x ) for i in l )", "best-tranx": "print ( ` ` . join ( zip ( * l ) ) )", "best-tranx-rerank": "print ( ` ` . join ( zip ( l , l ) ) )", "meteor-baseline": 0.1664, "meteor-tranx-annot": 0.398, "meteor-best-tranx": 0.2302, "meteor-best-tranx-rerank": 0.2451, "rougel-baseline": 0.3273, "rougel-tranx-annot": 0.5714, "rougel-best-tranx": 0.4314, "rougel-best-tranx-rerank": 0.4615}, {"intent": "Splinter or Selenium: Can we get current html page after clicking a button?", "rewritten_intent": "get the html from the current web page of a Selenium driver", "snippet": "driver.execute_script('return document.documentElement.outerHTML;')", "question_id": 26809954, "baseline-bleu": 0.1365, "tranx-annot-bleu": 0.0496, "best-tranx-bleu": 0.1533, "best-tranx-bleu-rerank": 0.1533, "baseline": "print ( os . path . get ( 'raw_unicode_escape' ) )", "tranx-annot": "print ( sys . __file__ )", "best-tranx": "driver . find_element_by_id ( ` < unk > ` ) . getcode ( )", "best-tranx-rerank": "driver . find_element_by_xpath ( ` < unk > ` ) . get_text ( )", "meteor-baseline": 0.2716, "meteor-tranx-annot": 0.1, "meteor-best-tranx": 0.2215, "meteor-best-tranx-rerank": 0.2215, "rougel-baseline": 0.4138, "rougel-tranx-annot": 0.2727, "rougel-best-tranx": 0.4667, "rougel-best-tranx-rerank": 0.4667}, {"intent": "Find a specific pattern (regular expression) in a list of strings (Python)", "rewritten_intent": "Get all matches with regex pattern `\\\\d+[xX]` in list of string `teststr`", "snippet": "[i for i in teststr if re.search('\\\\d+[xX]', i)]", "question_id": 29696641, "baseline-bleu": 0.1277, "tranx-annot-bleu": 0.4738, "best-tranx-bleu": 0.4738, "best-tranx-bleu-rerank": 0.4738, "baseline": "re . sub ( '([a-zA-Z]' , '' , s )", "tranx-annot": "re . findall ( ` \\ \\ d + [ x X ] ` , teststr )", "best-tranx": "re . findall ( ` \\ \\ d + [ x X ] ` , teststr )", "best-tranx-rerank": "re . findall ( ` \\ \\ d + [ x X ] ` , teststr )", "meteor-baseline": 0.2798, "meteor-tranx-annot": 0.6437, "meteor-best-tranx": 0.6437, "meteor-best-tranx-rerank": 0.6437, "rougel-baseline": 0.3913, "rougel-tranx-annot": 0.7619, "rougel-best-tranx": 0.7619, "rougel-best-tranx-rerank": 0.7619}, {"intent": "Selecting with complex criteria from pandas.DataFrame", "rewritten_intent": "select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`", "snippet": "df['A'][(df['B'] > 50) & (df['C'] == 900)]", "question_id": 15315452, "baseline-bleu": 0.0705, "tranx-annot-bleu": 0.2107, "best-tranx-bleu": 0.2073, "best-tranx-bleu-rerank": 0.2073, "baseline": "df . groupby ( [ 'stock' , 'col2' ] , inplace = True )", "tranx-annot": "df . groupby ( [ ` A ` , ` C ` ] ) . size ( ) . reset_index ( axis = 0 )", "best-tranx": "df . loc [ df [ ` B ` ] . isin ( [ 1 , 1 ] ) ]", "best-tranx-rerank": "df . loc [ df [ ` B ` ] . isin ( [ 1 , 1 ] ) ]", "meteor-baseline": 0.1736, "meteor-tranx-annot": 0.3251, "meteor-best-tranx": 0.272, "meteor-best-tranx-rerank": 0.272, "rougel-baseline": 0.4167, "rougel-tranx-annot": 0.5091, "rougel-best-tranx": 0.52, "rougel-best-tranx-rerank": 0.52}, {"intent": "How to sort dictionaries by keys in Python", "rewritten_intent": "Sort dictionary `o` in ascending order based on its keys and items", "snippet": "sorted(o.items())", "question_id": 4642501, "baseline-bleu": 0.2282, "tranx-annot-bleu": 0.2313, "best-tranx-bleu": 0.333, "best-tranx-bleu-rerank": 0.333, "baseline": "sorted ( list ( my_dict . items ( ) ) , key = lambda x : x [ 1 ] ) )", "tranx-annot": "sorted ( list ( o . items ( ) ) , key = lambda tup : map ( int , x . split ( ` : ` ) ) )", "best-tranx": "sorted ( list ( o . items ( ) ) , key = lambda x : x [ 1 ] )", "best-tranx-rerank": "sorted ( list ( o . items ( ) ) , key = lambda x : x [ 1 ] )", "meteor-baseline": 0.6752, "meteor-tranx-annot": 0.5216, "meteor-best-tranx": 0.8065, "meteor-best-tranx-rerank": 0.8065, "rougel-baseline": 0.4667, "rougel-tranx-annot": 0.4211, "rougel-best-tranx": 0.5517, "rougel-best-tranx-rerank": 0.5517}, {"intent": "How to sort dictionaries by keys in Python", "rewritten_intent": "get sorted list of keys of dict `d`", "snippet": "sorted(d)", "question_id": 4642501, "baseline-bleu": 0.125, "tranx-annot-bleu": 0.0961, "best-tranx-bleu": 0.2481, "best-tranx-bleu-rerank": 0.2481, "baseline": "list ( d , key = lambda x : x [ 1 ] )", "tranx-annot": "sorted ( list ( d . items ( ) ) , key = lambda x : x [ 1 ] )", "best-tranx": "sorted ( d , key = d . get )", "best-tranx-rerank": "sorted ( d , key = d . get )", "meteor-baseline": 0.5111, "meteor-tranx-annot": 0.3509, "meteor-best-tranx": 0.6861, "meteor-best-tranx-rerank": 0.6861, "rougel-baseline": 0.3333, "rougel-tranx-annot": 0.32, "rougel-best-tranx": 0.5714, "rougel-best-tranx-rerank": 0.5714}, {"intent": "How to sort dictionaries by keys in Python", "rewritten_intent": null, "snippet": "sorted(d.items())", "question_id": 4642501, "baseline-bleu": 0.3128, "tranx-annot-bleu": 0.2393, "best-tranx-bleu": 0.2393, "best-tranx-bleu-rerank": 0.2393, "baseline": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )", "tranx-annot": "sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] )", "best-tranx": "sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] )", "best-tranx-rerank": "sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] )", "meteor-baseline": 0.7439, "meteor-tranx-annot": 0.6155, "meteor-best-tranx": 0.6155, "meteor-best-tranx-rerank": 0.6155, "rougel-baseline": 0.4828, "rougel-tranx-annot": 0.4828, "rougel-best-tranx": 0.4828, "rougel-best-tranx-rerank": 0.4828}, {"intent": "convert strings into integers", "rewritten_intent": "convert string \"1\" into integer", "snippet": "int('1')", "question_id": 642154, "baseline-bleu": 0.3303, "tranx-annot-bleu": 0.6105, "best-tranx-bleu": 0.6105, "best-tranx-bleu-rerank": 0.6105, "baseline": "int ( 'a' , 16 )", "tranx-annot": "int ( ` 1 ` , 2 )", "best-tranx": "int ( ` 1 ` , 2 )", "best-tranx-rerank": "int ( ` 1 ` , 2 )", "meteor-baseline": 0.7194, "meteor-tranx-annot": 0.9498, "meteor-best-tranx": 0.9498, "meteor-best-tranx-rerank": 0.9498, "rougel-baseline": 0.7143, "rougel-tranx-annot": 0.8571, "rougel-best-tranx": 0.8571, "rougel-best-tranx-rerank": 0.8571}, {"intent": "convert strings into integers", "rewritten_intent": "function to convert strings into integers", "snippet": "int()", "question_id": 642154, "baseline-bleu": 0.1996, "tranx-annot-bleu": 0.7071, "best-tranx-bleu": 0.0687, "best-tranx-bleu-rerank": 0.1355, "baseline": "int ( map ( int , s ) )", "tranx-annot": "ord ( )", "best-tranx": "sum ( int ( x ) for x in list ( ` ` . join ( map ( str , x ) ) ) )", "best-tranx-rerank": "list ( map ( int , [ strings ] ) )", "meteor-baseline": 0.4167, "meteor-tranx-annot": 0.625, "meteor-best-tranx": 0.2885, "meteor-best-tranx-rerank": 0.3947, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.2143, "rougel-best-tranx-rerank": 0.4286}, {"intent": "convert strings into integers", "rewritten_intent": "convert items in `T1` to integers", "snippet": "T2 = [map(int, x) for x in T1]", "question_id": 642154, "baseline-bleu": 0.0732, "tranx-annot-bleu": 0.1267, "best-tranx-bleu": 0.3079, "best-tranx-bleu-rerank": 0.3079, "baseline": "int ( s , 16 )", "tranx-annot": "b = int ( int ( T1 ) )", "best-tranx": "[ int ( x ) for x in list ( T1 . values ( ) ) ]", "best-tranx-rerank": "[ int ( x ) for x in list ( T1 . values ( ) ) ]", "meteor-baseline": 0.1515, "meteor-tranx-annot": 0.1852, "meteor-best-tranx": 0.5203, "meteor-best-tranx-rerank": 0.5203, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.4348, "rougel-best-tranx": 0.6452, "rougel-best-tranx-rerank": 0.6452}, {"intent": "How to call a shell script from python code?", "rewritten_intent": "call a shell script `./test.sh` using subprocess", "snippet": "subprocess.call(['./test.sh'])", "question_id": 3777301, "baseline-bleu": 0.4689, "tranx-annot-bleu": 0.5089, "best-tranx-bleu": 0.3565, "best-tranx-bleu-rerank": 0.3565, "baseline": "subprocess . call ( [ 'shutdown' , '/r' ] )", "tranx-annot": "subprocess . call ( ` . / test . sh ` , shell = ` True ` )", "best-tranx": "subprocess . call ( ` test . sh < unk > ` )", "best-tranx-rerank": "subprocess . call ( ` test . sh < unk > ` )", "meteor-baseline": 0.6326, "meteor-tranx-annot": 0.8032, "meteor-best-tranx": 0.596, "meteor-best-tranx-rerank": 0.596, "rougel-baseline": 0.6897, "rougel-tranx-annot": 0.75, "rougel-best-tranx": 0.7407, "rougel-best-tranx-rerank": 0.7407}, {"intent": "How to call a shell script from python code?", "rewritten_intent": "call a shell script `notepad` using subprocess", "snippet": "subprocess.call(['notepad'])", "question_id": 3777301, "baseline-bleu": 0.4579, "tranx-annot-bleu": 0.3476, "best-tranx-bleu": 0.3392, "best-tranx-bleu-rerank": 0.3392, "baseline": "subprocess . call ( [ 'shutdown' , '/r' ] )", "tranx-annot": "os . call ( ` notepad ` )", "best-tranx": "subprocess . call ( [ ` test . sh ` , subprocess . PIPE ( notepad ) ] )", "best-tranx-rerank": "subprocess . call ( [ ` test . sh ` , subprocess . PIPE ( notepad ) ] )", "meteor-baseline": 0.8413, "meteor-tranx-annot": 0.6862, "meteor-best-tranx": 0.7601, "meteor-best-tranx-rerank": 0.7601, "rougel-baseline": 0.72, "rougel-tranx-annot": 0.7778, "rougel-best-tranx": 0.6897, "rougel-best-tranx-rerank": 0.6897}, {"intent": "Interleaving two lists in Python", "rewritten_intent": "combine lists `l1` and `l2`  by alternating their elements", "snippet": "[val for pair in zip(l1, l2) for val in pair]", "question_id": 7946798, "baseline-bleu": 0.0856, "tranx-annot-bleu": 0.3433, "best-tranx-bleu": 0.2935, "best-tranx-bleu-rerank": 0.2935, "baseline": "users . sort ( key = lambda x : ( x [ 1 : 3 ] ) )", "tranx-annot": "l2 = map ( lists , zip ( l1 , l2 ) )", "best-tranx": "print ( zip ( l1 , l2 ) )", "best-tranx-rerank": "print ( zip ( l1 , l2 ) )", "meteor-baseline": 0.1235, "meteor-tranx-annot": 0.3751, "meteor-best-tranx": 0.3849, "meteor-best-tranx-rerank": 0.3849, "rougel-baseline": 0.2353, "rougel-tranx-annot": 0.4138, "rougel-best-tranx": 0.48, "rougel-best-tranx-rerank": 0.48}, {"intent": "Base64 encoding in Python 3", "rewritten_intent": "encode string 'data to be encoded'", "snippet": "encoded = base64.b64encode('data to be encoded')", "question_id": 8908287, "baseline-bleu": 0.1332, "tranx-annot-bleu": 0.4005, "best-tranx-bleu": 0.1531, "best-tranx-bleu-rerank": 0.0809, "baseline": "int ( '<unk>' ) . encode ( 'utf8' ) )", "tranx-annot": "` ` ` data to be encoded ` ` ` . encode ( ` data to be encoded ` )", "best-tranx": "` ` ` Hello ` ` ` . encode ( ` UTF8 ` )", "best-tranx-rerank": "` ` ` \\ \\ xc3 \\ \\ x85 \u3042 ` ` ` . encode ( ` utf - 8 ` , ` ignore ` )", "meteor-baseline": 0.3206, "meteor-tranx-annot": 0.7201, "meteor-best-tranx": 0.3902, "meteor-best-tranx-rerank": 0.2982, "rougel-baseline": 0.3448, "rougel-tranx-annot": 0.6061, "rougel-best-tranx": 0.3704, "rougel-best-tranx-rerank": 0.2564}, {"intent": "Base64 encoding in Python 3", "rewritten_intent": "encode a string `data to be encoded` to `ascii` encoding", "snippet": "encoded = 'data to be encoded'.encode('ascii')", "question_id": 8908287, "baseline-bleu": 0.2622, "tranx-annot-bleu": 0.6266, "best-tranx-bleu": 0.536, "best-tranx-bleu-rerank": 0.536, "baseline": "print ( s . encode ( 'utf-8' ) )", "tranx-annot": "ascii = ` data to be encoded ` . encode ( ` ascii ` ) . encode ( ` utf8 ` )", "best-tranx": "ascii . encode ( ` data to be encoded ` )", "best-tranx-rerank": "ascii . encode ( ` data to be encoded ` )", "meteor-baseline": 0.3801, "meteor-tranx-annot": 0.8829, "meteor-best-tranx": 0.7353, "meteor-best-tranx-rerank": 0.7353, "rougel-baseline": 0.4286, "rougel-tranx-annot": 0.7568, "rougel-best-tranx": 0.8462, "rougel-best-tranx-rerank": 0.8462}, {"intent": "Parsing CSV / tab-delimited txt file with Python", "rewritten_intent": "parse tab-delimited CSV file 'text.txt' into a list", "snippet": "lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\\t'))", "question_id": 7856296, "baseline-bleu": 0.216, "tranx-annot-bleu": 0.2873, "best-tranx-bleu": 0.4118, "best-tranx-bleu-rerank": 0.4118, "baseline": "print ( [ 'test.txt' , 'rb' ) )", "tranx-annot": "try : print ( open ( ` text . txt ` ) . read ( ) ) except Value Error : print ( tab - delimited . readlines ( ) )", "best-tranx": "np . genfromtxt ( ` text . txt ` , delimiter = ` \\ t ` , dtype = None )", "best-tranx-rerank": "np . genfromtxt ( ` text . txt ` , delimiter = ` \\ t ` , dtype = None )", "meteor-baseline": 0.3231, "meteor-tranx-annot": 0.2875, "meteor-best-tranx": 0.4968, "meteor-best-tranx-rerank": 0.4968, "rougel-baseline": 0.5116, "rougel-tranx-annot": 0.4333, "rougel-best-tranx": 0.68, "rougel-best-tranx-rerank": 0.68}, {"intent": "Python - Access object attributes as in a dictionary", "rewritten_intent": "Get attribute `my_str` of object `my_object`", "snippet": "getattr(my_object, my_str)", "question_id": 9035479, "baseline-bleu": 0.1395, "tranx-annot-bleu": 0.2398, "best-tranx-bleu": 1.0, "best-tranx-bleu-rerank": 1.0, "baseline": "new_list = [ obj . get ( my_obj ) )", "tranx-annot": "print ( my_object . my_str - my_object )", "best-tranx": "getattr ( my_object , my_str )", "best-tranx-rerank": "getattr ( my_object , my_str )", "meteor-baseline": 0.1562, "meteor-tranx-annot": 0.3226, "meteor-best-tranx": 0.9977, "meteor-best-tranx-rerank": 0.9977, "rougel-baseline": 0.25, "rougel-tranx-annot": 0.5714, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 1.0}, {"intent": "list of dicts to/from dict of lists", "rewritten_intent": "group a list of dicts `LD` into one dict by key", "snippet": "print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))", "question_id": 5558418, "baseline-bleu": 0.1156, "tranx-annot-bleu": 0.0306, "best-tranx-bleu": 0.0662, "best-tranx-bleu-rerank": 0.0662, "baseline": "sorted ( list ( mydict . items ( ) ) , key = lambda x : x [ 1 ] ) )", "tranx-annot": "dict ( zip ( * LD ) )", "best-tranx": "dict ( ( k , LD [ k ] ) for k in LD )", "best-tranx-rerank": "dict ( ( k , LD [ k ] ) for k in LD )", "meteor-baseline": 0.3054, "meteor-tranx-annot": 0.1797, "meteor-best-tranx": 0.2435, "meteor-best-tranx-rerank": 0.2435, "rougel-baseline": 0.4444, "rougel-tranx-annot": 0.4, "rougel-best-tranx": 0.5106, "rougel-best-tranx-rerank": 0.5106}, {"intent": "How do I sum the first value in each tuple in a list of tuples in Python?", "rewritten_intent": null, "snippet": "sum([pair[0] for pair in list_of_pairs])", "question_id": 638048, "baseline-bleu": 0.0997, "tranx-annot-bleu": 0.3237, "best-tranx-bleu": 0.1111, "best-tranx-bleu-rerank": 0.1111, "baseline": "[ ( x [ 1 ] for i in range ( 0 , len ( lambda x : x [ 1 ] ) ]", "tranx-annot": "sum ( x [ 0 ] for x in data )", "best-tranx": "map ( sum , zip ( * tuples ) )", "best-tranx-rerank": "map ( sum , zip ( * tuples ) )", "meteor-baseline": 0.3191, "meteor-tranx-annot": 0.4932, "meteor-best-tranx": 0.1181, "meteor-best-tranx-rerank": 0.1181, "rougel-baseline": 0.4865, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.2609, "rougel-best-tranx-rerank": 0.2609}, {"intent": "Convert unicode string dictionary into dictionary in python", "rewritten_intent": "convert unicode string u\"{'code1':1,'code2':1}\" into dictionary", "snippet": "d = ast.literal_eval(\"{'code1':1,'code2':1}\")", "question_id": 14950260, "baseline-bleu": 0.0223, "tranx-annot-bleu": 0.1141, "best-tranx-bleu": 0.086, "best-tranx-bleu-rerank": 0.086, "baseline": "\"\"\"hello#SPACE#<unk>#SPACE#<unk>#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#ccc#SPACE#ccc#SPACE#ccc", "tranx-annot": "dict ( s . split ( ` unicode_escape ` ) for s in s . split ( ` , ` ) )", "best-tranx": "dict ( unicodedata . encode ( ` latin - 1 ` ) )", "best-tranx-rerank": "dict ( unicodedata . encode ( ` latin - 1 ` ) )", "meteor-baseline": 0.0573, "meteor-tranx-annot": 0.1818, "meteor-best-tranx": 0.1422, "meteor-best-tranx-rerank": 0.1422, "rougel-baseline": 0.0698, "rougel-tranx-annot": 0.3636, "rougel-best-tranx": 0.3429, "rougel-best-tranx-rerank": 0.3429}, {"intent": "Find all words in a string that start with the $ sign in Python", "rewritten_intent": "find all words in a string `mystring` that start with the `$` sign", "snippet": "[word for word in mystring.split() if word.startswith('$')]", "question_id": 11416772, "baseline-bleu": 0.087, "tranx-annot-bleu": 0.2966, "best-tranx-bleu": 0.4175, "best-tranx-bleu-rerank": 0.138, "baseline": "s . split ( ',' )", "tranx-annot": "` ` ` ` ` ` . join ( c . split ( ` ` ) for item in mystring . split ( ` $ ` ) )", "best-tranx": "[ w for w in mystring . split ( ) if w not in ` $ ` ]", "best-tranx-rerank": "[ i for i in re . findall ( ` < unk > ` , mystring ) if i ! = ` $ ` ]", "meteor-baseline": 0.2719, "meteor-tranx-annot": 0.5213, "meteor-best-tranx": 0.4577, "meteor-best-tranx-rerank": 0.416, "rougel-baseline": 0.4286, "rougel-tranx-annot": 0.5417, "rougel-best-tranx": 0.6842, "rougel-best-tranx-rerank": 0.5333}, {"intent": "How to remove any URL within a string in Python", "rewritten_intent": "remove any url within string `text`", "snippet": "text = re.sub('^https?:\\\\/\\\\/.*[\\\\r\\\\n]*', '', text, flags=re.MULTILINE)", "question_id": 11331982, "baseline-bleu": 0.0173, "tranx-annot-bleu": 0.0214, "best-tranx-bleu": 0.0042, "best-tranx-bleu-rerank": 0.1086, "baseline": "print ( line . decode ( 'utf-8' ) )", "tranx-annot": "text . replace ( ` ` , ` ` )", "best-tranx": "text . strftime ( ` any ` )", "best-tranx-rerank": "re . sub ( ` < unk > ` , ` ` , text )", "meteor-baseline": 0.0654, "meteor-tranx-annot": 0.1816, "meteor-best-tranx": 0.0796, "meteor-best-tranx-rerank": 0.2662, "rougel-baseline": 0.1852, "rougel-tranx-annot": 0.3529, "rougel-best-tranx": 0.2449, "rougel-best-tranx-rerank": 0.4286}, {"intent": "How to find all elements in a numpy 2-dimensional array that match a certain list?", "rewritten_intent": "replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros", "snippet": "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)", "question_id": 34945274, "baseline-bleu": 0.1634, "tranx-annot-bleu": 0.2485, "best-tranx-bleu": 0.2127, "best-tranx-bleu-rerank": 0.2127, "baseline": "np . dot ( [ 1 , 2 , 3 ] , [ 1 , 2 ] , [ 1 , 1 ] )", "tranx-annot": "np . concatenate ( [ [ 1 , 3 , 4 ] , A ] , axis = 1 )", "best-tranx": "A = np . where ( np . isnan ( A ) , 0 , A )", "best-tranx-rerank": "A = np . where ( np . isnan ( A ) , 0 , A )", "meteor-baseline": 0.2211, "meteor-tranx-annot": 0.3948, "meteor-best-tranx": 0.3525, "meteor-best-tranx-rerank": 0.3525, "rougel-baseline": 0.4815, "rougel-tranx-annot": 0.56, "rougel-best-tranx": 0.6383, "rougel-best-tranx-rerank": 0.6383}, {"intent": "Calculate mean across dimension in a 2D array", "rewritten_intent": "calculate mean across dimension in a 2d array `a`", "snippet": "np.mean(a, axis=1)", "question_id": 15819980, "baseline-bleu": 0.205, "tranx-annot-bleu": 0.205, "best-tranx-bleu": 0.11, "best-tranx-bleu-rerank": 0.3479, "baseline": "np . dot ( [ 1 , 2 ] )", "tranx-annot": "int ( np . isnan ( a ) ) / 1", "best-tranx": "np . array ( [ 1 , 2 , 3 ] ) . reshape ( 2 , - 1 )", "best-tranx-rerank": "np . array ( a . _data ) . mean ( axis = 1 )", "meteor-baseline": 0.4264, "meteor-tranx-annot": 0.5061, "meteor-best-tranx": 0.3876, "meteor-best-tranx-rerank": 0.8195, "rougel-baseline": 0.6, "rougel-tranx-annot": 0.5714, "rougel-best-tranx": 0.4, "rougel-best-tranx-rerank": 0.72}, {"intent": "Running R script from python", "rewritten_intent": "running r script '/pathto/MyrScript.r' from python", "snippet": "subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])", "question_id": 19894365, "baseline-bleu": 0.1075, "tranx-annot-bleu": 0.2279, "best-tranx-bleu": 0.3159, "best-tranx-bleu-rerank": 0.3159, "baseline": "print ( os . path . exists ( '/usr/to/' ) )", "tranx-annot": "datetime . datetime . strptime ( ` / pathto / Myr Script . r ` )", "best-tranx": "subprocess . call ( ` / pathto / Myr Script . r ` , shell = True )", "best-tranx-rerank": "subprocess . call ( ` / pathto / Myr Script . r ` , shell = True )", "meteor-baseline": 0.1689, "meteor-tranx-annot": 0.3992, "meteor-best-tranx": 0.5003, "meteor-best-tranx-rerank": 0.5003, "rougel-baseline": 0.4167, "rougel-tranx-annot": 0.5106, "rougel-best-tranx": 0.6122, "rougel-best-tranx-rerank": 0.6122}, {"intent": "Running R script from python", "rewritten_intent": "run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'", "snippet": "subprocess.call('/usr/bin/Rscript --vanilla /pathto/MyrScript.r', shell=True)", "question_id": 19894365, "baseline-bleu": 0.179, "tranx-annot-bleu": 0.7072, "best-tranx-bleu": 0.1124, "best-tranx-bleu-rerank": 0.3376, "baseline": "urllib . parse . commonprefix ( 'http://www.google.com/' , '/usr/var' )", "tranx-annot": "sys . exit ( ` / usr / bin / Rscript - - vanilla / pathto / Myr Script . r ` )", "best-tranx": "subprocess . Popen ( [ ` rm ` , ` - r ` , ` some . file ` ] )", "best-tranx-rerank": "subprocess . call ( [ ` / usr / bin / Rscript - - vanilla / pathto / Myr Script . r ` , ` / usr / bin / Rscript - - vanilla / pathto / Myr Script . r ` , ` / usr / bin / Rscript - - vanilla / pathto / Myr Script . r ` ] )", "meteor-baseline": 0.2416, "meteor-tranx-annot": 0.7883, "meteor-best-tranx": 0.2407, "meteor-best-tranx-rerank": 0.7782, "rougel-baseline": 0.4906, "rougel-tranx-annot": 0.84, "rougel-best-tranx": 0.4167, "rougel-best-tranx-rerank": 0.5333}, {"intent": "How to add a header to a csv file in Python?", "rewritten_intent": "add a header to a csv file", "snippet": "writer.writeheader()", "question_id": 15907200, "baseline-bleu": 0.3861, "tranx-annot-bleu": 0.0591, "best-tranx-bleu": 0.0726, "best-tranx-bleu-rerank": 0.0915, "baseline": "np . exit ( )", "tranx-annot": "with open ( ` header ` ) as stream : try : print ( file . split ( ) ) except print as print : print ( line )", "best-tranx": "df = pd . read_csv ( ` < unk > ` , skiprows = 1 , header = None )", "best-tranx-rerank": "df = pd . read_csv ( ` my . csv ` , header = None )", "meteor-baseline": 0.5111, "meteor-tranx-annot": 0.2027, "meteor-best-tranx": 0.2308, "meteor-best-tranx-rerank": 0.2459, "rougel-baseline": 0.6, "rougel-tranx-annot": 0.1765, "rougel-best-tranx": 0.24, "rougel-best-tranx-rerank": 0.2857}, {"intent": "Pandas Dataframe: Replacing NaN with row average", "rewritten_intent": "replacing nan in the dataframe `df` with row average", "snippet": "df.fillna(df.mean(axis=1), axis=1)", "question_id": 33058590, "baseline-bleu": 0.2984, "tranx-annot-bleu": 0.2724, "best-tranx-bleu": 0.1094, "best-tranx-bleu-rerank": 0.1712, "baseline": "df . apply ( np . columns , axis = 1 )", "tranx-annot": "df . apply ( lambda x : x . fillna ( x . mean ( ) ) , axis = 0 )", "best-tranx": "df [ ` average ` ] = df [ ` df ` ] . map ( lambda x : x . fillna ( x . mean ( ) ) ) . mean ( )", "best-tranx-rerank": "df . groupby ( [ ` farm ` , ` radians ` ] ) . mean ( )", "meteor-baseline": 0.4987, "meteor-tranx-annot": 0.6609, "meteor-best-tranx": 0.4271, "meteor-best-tranx-rerank": 0.4025, "rougel-baseline": 0.6207, "rougel-tranx-annot": 0.6154, "rougel-best-tranx": 0.4314, "rougel-best-tranx-rerank": 0.5143}, {"intent": "Python: Converting Epoch time into the datetime", "rewritten_intent": "Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'", "snippet": "time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))", "question_id": 12400256, "baseline-bleu": 0.5245, "tranx-annot-bleu": 0.5852, "best-tranx-bleu": 0.5905, "best-tranx-bleu-rerank": 0.4357, "baseline": "datetime . datetime . strptime (<unk>' , '%Y-%m-%d#SPACE#%H:%M:%S' )", "tranx-annot": "` ` ` 1347517370 ` ` ` . format ( ` 1347517370 ` , ` % Y - % m - % d % H : % M : % S ` )", "best-tranx": "` ` ` { : , } ` ` ` . format ( timestamp ) . strftime ( ` % Y - % m - % d % H : % M : % S ` )", "best-tranx-rerank": "datetime . datetime . strptime ( ` 1347517370 ` , ` % Y - % m - % d % H : % M : % S ` ) . strftime ( ` % Y - % m - % d % H : % M : % S ` )", "meteor-baseline": 0.7484, "meteor-tranx-annot": 0.7523, "meteor-best-tranx": 0.8293, "meteor-best-tranx-rerank": 0.8198, "rougel-baseline": 0.7302, "rougel-tranx-annot": 0.7302, "rougel-best-tranx": 0.7761, "rougel-best-tranx-rerank": 0.6667}, {"intent": "Calling a base class's classmethod in Python", "rewritten_intent": "Call a base class's class method `do` from derived class `Derived`", "snippet": "super(Derived, cls).do(a)", "question_id": 1269217, "baseline-bleu": 0.0731, "tranx-annot-bleu": 0.1234, "best-tranx-bleu": 0.1474, "best-tranx-bleu-rerank": 0.1474, "baseline": "MyModel . objects . filter ( '<unk>' , s = '<unk>' )", "tranx-annot": "set ( [ do , list ( Derived . values ( ) ) ] ) . method ( )", "best-tranx": "super ( do , self ) . __init__ ( * args , * * kwargs )", "best-tranx-rerank": "super ( do , self ) . __init__ ( * args , * * kwargs )", "meteor-baseline": 0.1667, "meteor-tranx-annot": 0.4509, "meteor-best-tranx": 0.5489, "meteor-best-tranx-rerank": 0.5489, "rougel-baseline": 0.25, "rougel-tranx-annot": 0.5333, "rougel-best-tranx": 0.5926, "rougel-best-tranx-rerank": 0.5926}, {"intent": "selecting rows in numpy ndarray based on the value of two columns", "rewritten_intent": "selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1", "snippet": "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]", "question_id": 23359886, "baseline-bleu": 0.062, "tranx-annot-bleu": 0.0722, "best-tranx-bleu": 0.1904, "best-tranx-bleu-rerank": 0.1285, "baseline": "df . sort ( [ 'Peak' , 'Weeks' ] , axis = 1 )", "tranx-annot": "numpy . loc [ a [ 0 ] = = 0 , 0 ]", "best-tranx": "a [ np . arange ( a . shape [ 0 ] ) [ : , ( None ) ] , a ]", "best-tranx-rerank": "np . where ( a = = 0 ) [ 0 ] . unique ( )", "meteor-baseline": 0.1754, "meteor-tranx-annot": 0.27, "meteor-best-tranx": 0.3943, "meteor-best-tranx-rerank": 0.2898, "rougel-baseline": 0.3396, "rougel-tranx-annot": 0.449, "rougel-best-tranx": 0.6552, "rougel-best-tranx-rerank": 0.549}, {"intent": "Python regex separate space-delimited words into a list", "rewritten_intent": "separate words delimited by one or more spaces into a list", "snippet": "re.split(' +', 'hello world sample text')", "question_id": 4383082, "baseline-bleu": 0.2795, "tranx-annot-bleu": 0.1402, "best-tranx-bleu": 0.1028, "best-tranx-bleu-rerank": 0.3561, "baseline": "[ int ( x ) for x in s . split ( ',' ) ]", "tranx-annot": "re . findall ( ` - c ` )", "best-tranx": "` ` ` ` ` ` . join ( ` ` . join ( map ( lambda x : ` ` . join ( x ) , x ) ) for x in mydict . split ( ` ` ) )", "best-tranx-rerank": "` ` ` ` ` ` . join ( itertools . split ( ` + ` , para ) )", "meteor-baseline": 0.4176, "meteor-tranx-annot": 0.3549, "meteor-best-tranx": 0.3911, "meteor-best-tranx-rerank": 0.48, "rougel-baseline": 0.4375, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.3214, "rougel-best-tranx-rerank": 0.5714}, {"intent": "Length of longest word in a list", "rewritten_intent": "length of longest element in list `words`", "snippet": "len(max(words, key=len))", "question_id": 14637696, "baseline-bleu": 0.11, "tranx-annot-bleu": 0.1438, "best-tranx-bleu": 0.3935, "best-tranx-bleu-rerank": 0.3935, "baseline": "[ [ : : - 1 ] for i in range ( 0 , len ( l ) ) ]", "tranx-annot": "list ( map ( lambda x : x * x , words ) )", "best-tranx": "max ( words , key = lambda x : len ( words [ i ] ) )", "best-tranx-rerank": "max ( words , key = lambda x : len ( words [ i ] ) )", "meteor-baseline": 0.3583, "meteor-tranx-annot": 0.3773, "meteor-best-tranx": 0.769, "meteor-best-tranx-rerank": 0.769, "rougel-baseline": 0.3871, "rougel-tranx-annot": 0.48, "rougel-best-tranx": 0.7143, "rougel-best-tranx-rerank": 0.7143}, {"intent": "accessing python dictionary", "rewritten_intent": "get the value associated with unicode key 'from_user' of first dictionary in list `result`", "snippet": "result[0]['from_user']", "question_id": 3933478, "baseline-bleu": 0.0489, "tranx-annot-bleu": 0.1895, "best-tranx-bleu": 0.223, "best-tranx-bleu-rerank": 0.4071, "baseline": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )", "tranx-annot": "sum ( x . split ( ` from_user ` ) [ 0 ] for x in result )", "best-tranx": "print ( str ( result [ ` str_2 ` ] ) [ 0 ] )", "best-tranx-rerank": "print ( str ( result [ ` from_user ` ] ) [ 0 ] )", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.5782, "meteor-best-tranx": 0.5542, "meteor-best-tranx-rerank": 0.7986, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.5185, "rougel-best-tranx": 0.6667, "rougel-best-tranx-rerank": 0.75}, {"intent": "Save line in file to list", "rewritten_intent": "Retrieve each line from a file 'File.txt' as a list", "snippet": "[line.split() for line in open('File.txt')]", "question_id": 39112645, "baseline-bleu": 0.1894, "tranx-annot-bleu": 0.314, "best-tranx-bleu": 0.0719, "best-tranx-bleu-rerank": 0.1754, "baseline": "with open ( 'file.txt' , 'r' )", "tranx-annot": "os . system ( ` File . txt ` )", "best-tranx": "print ( f . readlines ( ) )", "best-tranx-rerank": "print ( re . findall ( ` < unk > ` , File . txt ) )", "meteor-baseline": 0.4286, "meteor-tranx-annot": 0.4615, "meteor-best-tranx": 0.1471, "meteor-best-tranx-rerank": 0.4628, "rougel-baseline": 0.4516, "rougel-tranx-annot": 0.5714, "rougel-best-tranx": 0.3846, "rougel-best-tranx-rerank": 0.5714}, {"intent": "Python: Best Way to Exchange Keys with Values in a Dictionary?", "rewritten_intent": "swap keys with values in a dictionary `a`", "snippet": "res = dict((v, k) for k, v in a.items())", "question_id": 1031851, "baseline-bleu": 0.5077, "tranx-annot-bleu": 0.8948, "best-tranx-bleu": 0.6423, "best-tranx-bleu-rerank": 0.6423, "baseline": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )", "tranx-annot": "dict ( ( v , k ) for k , v in a . items ( ) )", "best-tranx": "dict ( ( k , v ) for k , v in a . items ( ) if v )", "best-tranx-rerank": "dict ( ( k , v ) for k , v in a . items ( ) if v )", "meteor-baseline": 0.7597, "meteor-tranx-annot": 0.909, "meteor-best-tranx": 0.8605, "meteor-best-tranx-rerank": 0.8605, "rougel-baseline": 0.8293, "rougel-tranx-annot": 0.9474, "rougel-best-tranx": 0.9, "rougel-best-tranx-rerank": 0.9}, {"intent": "creating a tmp file in python", "rewritten_intent": "Open a file `path/to/FILE_NAME.ext` in write mode", "snippet": "new_file = open('path/to/FILE_NAME.ext', 'w')", "question_id": 8577137, "baseline-bleu": 0.1226, "tranx-annot-bleu": 0.6016, "best-tranx-bleu": 0.8087, "best-tranx-bleu-rerank": 0.8087, "baseline": "print ( os . path . get ( 'file.<unk>' ) )", "tranx-annot": "output = open ( ` path / to / FILE_NAME . ext ` , ` path / to / FILE_NAME . ext ` )", "best-tranx": "f = open ( ` path / to / FILE_NAME . ext ` , ` wb ` )", "best-tranx-rerank": "f = open ( ` path / to / FILE_NAME . ext ` , ` wb ` )", "meteor-baseline": 0.1676, "meteor-tranx-annot": 0.8535, "meteor-best-tranx": 0.888, "meteor-best-tranx-rerank": 0.888, "rougel-baseline": 0.3429, "rougel-tranx-annot": 0.7619, "rougel-best-tranx": 0.8889, "rougel-best-tranx-rerank": 0.8889}, {"intent": "How to count distinct values in a column of a pandas group by object?", "rewritten_intent": null, "snippet": "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()", "question_id": 17926273, "baseline-bleu": 0.1311, "tranx-annot-bleu": 0.0927, "best-tranx-bleu": 0.0921, "best-tranx-bleu-rerank": 0.2048, "baseline": "df . groupby ( lambda x : x . groupby ( 'ID' ) )", "tranx-annot": "df . apply ( lambda x : x . sum ( x . index ( x [ 0 ] ) ) )", "best-tranx": "df [ ` count ` ] . str . split ( ` ` ) . apply ( lambda x : sum ( x [ 0 ] = = x [ ` count ` ] for x in list ( x . values ( ) ) ) )", "best-tranx-rerank": "df [ ` count ` ] . str . search ( ` - pet__age ` ) . nunique ( )", "meteor-baseline": 0.1931, "meteor-tranx-annot": 0.2784, "meteor-best-tranx": 0.4383, "meteor-best-tranx-rerank": 0.3847, "rougel-baseline": 0.4651, "rougel-tranx-annot": 0.4898, "rougel-best-tranx": 0.5405, "rougel-best-tranx-rerank": 0.6383}, {"intent": "Check for a key pattern in a dictionary in python", "rewritten_intent": "Check if any key in the dictionary `dict1` starts with the string `EMP$$`", "snippet": "any(key.startswith('EMP$$') for key in dict1)", "question_id": 3735814, "baseline-bleu": 0.0931, "tranx-annot-bleu": 0.317, "best-tranx-bleu": 0.3224, "best-tranx-bleu-rerank": 0.3224, "baseline": "print ( ( k , v ) for k , v in list ( myDict . items ( ) ) )", "tranx-annot": "` EMP $ $ ` in iter ( dict1 . values ( ) )", "best-tranx": "any ( k in ` EMP $ $ ` for k in EMP $ $ )", "best-tranx-rerank": "any ( k in ` EMP $ $ ` for k in EMP $ $ )", "meteor-baseline": 0.2, "meteor-tranx-annot": 0.6121, "meteor-best-tranx": 0.4402, "meteor-best-tranx-rerank": 0.4402, "rougel-baseline": 0.359, "rougel-tranx-annot": 0.7742, "rougel-best-tranx": 0.6061, "rougel-best-tranx-rerank": 0.6061}, {"intent": "Check for a key pattern in a dictionary in python", "rewritten_intent": "create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'", "snippet": "[value for key, value in list(dict1.items()) if key.startswith('EMP$$')]", "question_id": 3735814, "baseline-bleu": 0.2773, "tranx-annot-bleu": 0.3539, "best-tranx-bleu": 0.3259, "best-tranx-bleu-rerank": 0.3259, "baseline": "{ k : v for k , v in list ( d . items ( ) if v . startswith ( 'My#SPACE#' ) )", "tranx-annot": "[ value for k , v in dict1 . items ( ) if ` EMP $ $ ` in k ]", "best-tranx": "[ k for k , v in dict1 . items ( ) if v = = ` EMP $ $ ` ]", "best-tranx-rerank": "[ k for k , v in dict1 . items ( ) if v = = ` EMP $ $ ` ]", "meteor-baseline": 0.5786, "meteor-tranx-annot": 0.5, "meteor-best-tranx": 0.4764, "meteor-best-tranx-rerank": 0.4764, "rougel-baseline": 0.6071, "rougel-tranx-annot": 0.7083, "rougel-best-tranx": 0.6531, "rougel-best-tranx-rerank": 0.6531}, {"intent": "python, best way to convert a pandas series into a pandas dataframe", "rewritten_intent": "convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`", "snippet": "pd.DataFrame({'email': sf.index, 'list': sf.values})", "question_id": 26097916, "baseline-bleu": 0.0729, "tranx-annot-bleu": 0.1741, "best-tranx-bleu": 0.3576, "best-tranx-bleu-rerank": 0.3576, "baseline": "df . loc [ : , ( x [ 'one' ] , inplace = True )", "tranx-annot": "df1 = pd . merge ( sf , email , how = ` email ` , list = ` list ` )", "best-tranx": "df = pd . Data Frame ( sf , columns = [ ` email ` , ` list ` ] )", "best-tranx-rerank": "df = pd . Data Frame ( sf , columns = [ ` email ` , ` list ` ] )", "meteor-baseline": 0.1556, "meteor-tranx-annot": 0.4464, "meteor-best-tranx": 0.5757, "meteor-best-tranx-rerank": 0.5757, "rougel-baseline": 0.3415, "rougel-tranx-annot": 0.5333, "rougel-best-tranx": 0.6364, "rougel-best-tranx-rerank": 0.6364}, {"intent": "printing tab-separated values of a list", "rewritten_intent": "print elements of list `list` seperated by tabs `\\t`", "snippet": "print('\\t'.join(map(str, list)))", "question_id": 4048964, "baseline-bleu": 0.059, "tranx-annot-bleu": 0.4703, "best-tranx-bleu": 0.7751, "best-tranx-bleu-rerank": 0.7751, "baseline": "my_list = [ : : - 1 ] for item in my_list ]", "tranx-annot": "print ( ` \\ t ` . join ( ` ` . join ( i ) for i in list ) )", "best-tranx": "print ( ` ` . join ( map ( str , list ) ) )", "best-tranx-rerank": "print ( ` ` . join ( map ( str , list ) ) )", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.6937, "meteor-best-tranx": 0.8918, "meteor-best-tranx-rerank": 0.8918, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.7179, "rougel-best-tranx": 0.9375, "rougel-best-tranx-rerank": 0.9375}, {"intent": "Python unicode string with UTF-8?", "rewritten_intent": "print unicode string '\\xd0\\xbf\\xd1\\x80\\xd0\\xb8' with utf-8", "snippet": "print('\\xd0\\xbf\\xd1\\x80\\xd0\\xb8'.encode('raw_unicode_escape'))", "question_id": 3182716, "baseline-bleu": 0.1476, "tranx-annot-bleu": 0.1749, "best-tranx-bleu": 0.2949, "best-tranx-bleu-rerank": 0.229, "baseline": "\"\"\"\\\\ascii . decode ( 'hex' ) . decode ( 'utf-8' ) )", "tranx-annot": "print ( ` \u00d0 \u00bf \u00d1 \\ x80 \u00d0 \u00b8 ` . decode ( ` utf8 ` ) )", "best-tranx": "print ( ` \u00d0 \u00bf \u00d1 \\ x80 \u00d0 \u00b8 ` . encode ( ` UTF8 ` ) )", "best-tranx-rerank": "print ( ` \u00d0 \u00bf \u00d1 \\ x80 \u00d0 \u00b8 ` . format ( ` \u00d0 \u00bf \u00d1 \\ x80 \u00d0 \u00b8 ` . encode ( ` UTF8 ` ) ) )", "meteor-baseline": 0.4009, "meteor-tranx-annot": 0.4787, "meteor-best-tranx": 0.5375, "meteor-best-tranx-rerank": 0.5118, "rougel-baseline": 0.4681, "rougel-tranx-annot": 0.5581, "rougel-best-tranx": 0.6047, "rougel-best-tranx-rerank": 0.5}, {"intent": "Python unicode string with UTF-8?", "rewritten_intent": "Encode a latin character in string `Sopet\\xc3\\xb3n` properly", "snippet": "'Sopet\\xc3\\xb3n'.encode('latin-1').decode('utf-8')", "question_id": 3182716, "baseline-bleu": 0.463, "tranx-annot-bleu": 0.1121, "best-tranx-bleu": 0.1074, "best-tranx-bleu-rerank": 0.0977, "baseline": "urllib . parse . unquote ( 'utf-8' ) . decode ( 'utf-8' )", "tranx-annot": "` ` ` ` ` ` . join ( reversed ( ` Sopet \u00c3 \u00b3 n ` ) )", "best-tranx": "print ( re . findall ( ` \\ \\ w ` , ` Sopet \u00c3 \u00b3 n ` ) )", "best-tranx-rerank": "re . findall ( ` \\ \\ w ` , ` Sopet \u00c3 \u00b3 n ` )", "meteor-baseline": 0.604, "meteor-tranx-annot": 0.3024, "meteor-best-tranx": 0.2449, "meteor-best-tranx-rerank": 0.2626, "rougel-baseline": 0.6522, "rougel-tranx-annot": 0.5455, "rougel-best-tranx": 0.5333, "rougel-best-tranx-rerank": 0.4762}, {"intent": "How to adjust the quality of a resized image in Python Imaging Library?", "rewritten_intent": "resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`", "snippet": "image = image.resize((x, y), Image.ANTIALIAS)", "question_id": 1405602, "baseline-bleu": 0.0804, "tranx-annot-bleu": 0.0992, "best-tranx-bleu": 0.036, "best-tranx-bleu-rerank": 0.036, "baseline": "df . groupby ( [ 1 , 2 , 3 ] , [ 'A' , 1 ] )", "tranx-annot": "session . query ( image ) . filter ( lambda x : x . mean ( ) )", "best-tranx": "img . show ( )", "best-tranx-rerank": "img . show ( )", "meteor-baseline": 0.1524, "meteor-tranx-annot": 0.2469, "meteor-best-tranx": 0.1007, "meteor-best-tranx-rerank": 0.1007, "rougel-baseline": 0.2778, "rougel-tranx-annot": 0.4706, "rougel-best-tranx": 0.2857, "rougel-best-tranx-rerank": 0.2857}, {"intent": "Regex, find pattern only in middle of string", "rewritten_intent": "regex, find \"n\"s only in the middle of string `s`", "snippet": "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)", "question_id": 35622945, "baseline-bleu": 0.0902, "tranx-annot-bleu": 0.0891, "best-tranx-bleu": 0.2081, "best-tranx-bleu-rerank": 0.1129, "baseline": "\"\"\"\"\"\" . join ( [ '' , '' , s )", "tranx-annot": "re . sub ( ` middle ` , ` \\ \\ 1 ` , s )", "best-tranx": "print ( [ i for i in re . findall ( ` enumerate ` , s ) if i > 0 ] )", "best-tranx-rerank": "print ( re . findall ( ` i ` , s ) )", "meteor-baseline": 0.2168, "meteor-tranx-annot": 0.2555, "meteor-best-tranx": 0.348, "meteor-best-tranx-rerank": 0.3204, "rougel-baseline": 0.3077, "rougel-tranx-annot": 0.32, "rougel-best-tranx": 0.4912, "rougel-best-tranx-rerank": 0.5106}, {"intent": "how to show Percentage in python", "rewritten_intent": "display the float `1/3*100` as a percentage", "snippet": "print('{0:.0f}%'.format(1.0 / 3 * 100))", "question_id": 5306756, "baseline-bleu": 0.0883, "tranx-annot-bleu": 0.2229, "best-tranx-bleu": 0.3313, "best-tranx-bleu-rerank": 0.3313, "baseline": "datetime . datetime . now ( ) . decode ( 'utf-8' )", "tranx-annot": "print ( driver . find_element_by_xpath ( ` 1 / 3 * 100 ` ) . split ( ` \\ n ` ) )", "best-tranx": "struct . unpack ( ` f ` , ` { 0 : . 2f } ` . format ( float ( ` 1 / 3 * 100 ` ) ) )", "best-tranx-rerank": "struct . unpack ( ` f ` , ` { 0 : . 2f } ` . format ( float ( ` 1 / 3 * 100 ` ) ) )", "meteor-baseline": 0.2018, "meteor-tranx-annot": 0.4978, "meteor-best-tranx": 0.6019, "meteor-best-tranx-rerank": 0.6019, "rougel-baseline": 0.4615, "rougel-tranx-annot": 0.6087, "rougel-best-tranx": 0.7037, "rougel-best-tranx-rerank": 0.7037}, {"intent": "Sort a list of dicts by dict values", "rewritten_intent": "sort a list of dictionary `mylist` by the key `title`", "snippet": "mylist.sort(key=lambda x: x['title'])", "question_id": 2878084, "baseline-bleu": 0.3412, "tranx-annot-bleu": 0.4816, "best-tranx-bleu": 0.1703, "best-tranx-bleu-rerank": 0.7673, "baseline": "sorted ( list ( my_dict . items ( ) ) , key = lambda x : x [ 1 ] ) )", "tranx-annot": "sorted ( mylist , key = lambda x : x [ title ] )", "best-tranx": "sorted ( mylist , * * { ` title ` : ` title ` } )", "best-tranx-rerank": "sorted ( mylist , key = lambda x : x [ ` title ` ] )", "meteor-baseline": 0.722, "meteor-tranx-annot": 0.8512, "meteor-best-tranx": 0.4792, "meteor-best-tranx-rerank": 0.9922, "rougel-baseline": 0.5789, "rougel-tranx-annot": 0.8, "rougel-best-tranx": 0.4375, "rougel-best-tranx-rerank": 0.875}, {"intent": "Sort a list of dicts by dict values", "rewritten_intent": "sort a list `l` of dicts by dict value 'title'", "snippet": "l.sort(key=lambda x: x['title'])", "question_id": 2878084, "baseline-bleu": 0.5399, "tranx-annot-bleu": 0.472, "best-tranx-bleu": 0.3182, "best-tranx-bleu-rerank": 0.3536, "baseline": "sorted ( d , key = lambda x : x [ 'weight' ] ) )", "tranx-annot": "sorted ( l , key = lambda x : x [ 1 ] )", "best-tranx": "sorted ( l , key = lambda x : list ( x . values ( ) ) [ ` title ` ] , reverse = True )", "best-tranx-rerank": "sorted ( l , key = lambda x : x . get ( ` title ` ) [ ` title ` ] , reverse = True )", "meteor-baseline": 0.8498, "meteor-tranx-annot": 0.7994, "meteor-best-tranx": 0.8595, "meteor-best-tranx-rerank": 0.893, "rougel-baseline": 0.7273, "rougel-tranx-annot": 0.7333, "rougel-best-tranx": 0.6977, "rougel-best-tranx-rerank": 0.6977}, {"intent": "Sort a list of dicts by dict values", "rewritten_intent": "sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.", "snippet": "l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))", "question_id": 2878084, "baseline-bleu": 0.1926, "tranx-annot-bleu": 0.4927, "best-tranx-bleu": 0.3742, "best-tranx-bleu-rerank": 0.3742, "baseline": "sorted ( list ( mydict . items ( ) ) , key = lambda x : x [ 1 ] ) )", "tranx-annot": "sorted ( d , key = lambda x : ( d [ ` title ` ] , d [ x ] [ ` title_url ` ] ) )", "best-tranx": "order . sort ( key = lambda d : d . get ( ` title ` , d [ ` title_url ` ] ) )", "best-tranx-rerank": "order . sort ( key = lambda d : d . get ( ` title ` , d [ ` title_url ` ] ) )", "meteor-baseline": 0.4323, "meteor-tranx-annot": 0.6863, "meteor-best-tranx": 0.5481, "meteor-best-tranx-rerank": 0.5481, "rougel-baseline": 0.5185, "rougel-tranx-annot": 0.8, "rougel-best-tranx": 0.6667, "rougel-best-tranx-rerank": 0.6667}, {"intent": "finding n largest differences between two lists", "rewritten_intent": "find 10 largest differences between each respective elements of list `l1` and list `l2`", "snippet": "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))", "question_id": 9323159, "baseline-bleu": 0.0679, "tranx-annot-bleu": 0.1192, "best-tranx-bleu": 0.1228, "best-tranx-bleu-rerank": 0.0411, "baseline": "[ ( x , j ) for i , j in zip ( zip ( l , zip ( l ) ) ]", "tranx-annot": "[ sum ( abs ( x ) for x in l2 [ i : i + l2 ] ) for i in zip ( * l2 ) ]", "best-tranx": "[ max ( x , * * x ) for x in range ( len ( x ) ) ]", "best-tranx-rerank": "[ max ( x ) for x in zip ( * l1 ) ]", "meteor-baseline": 0.2914, "meteor-tranx-annot": 0.3137, "meteor-best-tranx": 0.2396, "meteor-best-tranx-rerank": 0.1325, "rougel-baseline": 0.4364, "rougel-tranx-annot": 0.5333, "rougel-best-tranx": 0.4231, "rougel-best-tranx-rerank": 0.3043}, {"intent": "Finding multiple attributes within the span tag in Python", "rewritten_intent": "BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp'", "snippet": "soup.find_all('span', {'class': 'starGryB sp'})", "question_id": 29877663, "baseline-bleu": 0.0897, "tranx-annot-bleu": 0.4049, "best-tranx-bleu": 0.1228, "best-tranx-bleu-rerank": 0.2471, "baseline": "soup . find_element_by_css_selector ( id = '*' ) . click ( ) )", "tranx-annot": "re . sub ( ` span ` , ` star Gry B sp ` , soup ) . find ( ` span ` )", "best-tranx": "soup . body . find All ( text = ` span ` )", "best-tranx-rerank": "soup . soup . find All ( ` span ` , href = re . compile ( ` span ` ) )", "meteor-baseline": 0.1471, "meteor-tranx-annot": 0.5497, "meteor-best-tranx": 0.1733, "meteor-best-tranx-rerank": 0.237, "rougel-baseline": 0.3333, "rougel-tranx-annot": 0.7111, "rougel-best-tranx": 0.4118, "rougel-best-tranx-rerank": 0.4651}, {"intent": "Pandas writing dataframe to other postgresql schema", "rewritten_intent": "write records in dataframe `df` to table 'test' in schema 'a_schema'", "snippet": "df.to_sql('test', engine, schema='a_schema')", "question_id": 24189150, "baseline-bleu": 0.109, "tranx-annot-bleu": 0.3053, "best-tranx-bleu": 0.2018, "best-tranx-bleu-rerank": 0.2072, "baseline": "df . groupby ( [ '<unk>' , '<unk>' ] ) . exists ( )", "tranx-annot": "df . objects . write ( ` test ` , axis = 1 , inplace = ` True ` )", "best-tranx": "df . to_csv ( ` a_schema ` , * * False )", "best-tranx-rerank": "df . to_csv ( ` a_schema ` , index = False )", "meteor-baseline": 0.2711, "meteor-tranx-annot": 0.686, "meteor-best-tranx": 0.4502, "meteor-best-tranx-rerank": 0.4915, "rougel-baseline": 0.4737, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.5714, "rougel-best-tranx-rerank": 0.6429}, {"intent": "Regular Expression to find brackets in a string", "rewritten_intent": "Extract brackets from string `s`", "snippet": "brackets = re.sub('[^(){}[\\\\]]', '', s)", "question_id": 30766151, "baseline-bleu": 0.0851, "tranx-annot-bleu": 0.131, "best-tranx-bleu": 0.1422, "best-tranx-bleu-rerank": 0.1422, "baseline": "\"\"\"\"\"\" . join ( s . split ( ) )", "tranx-annot": "return ` ` . join ( re . split ( ` ` , key , re . UNICODE ) for item in s . split ( ) )", "best-tranx": "re . findall ( ` # ( \\ \\ w + ) ` , ` s ` )", "best-tranx-rerank": "re . findall ( ` # ( \\ \\ w + ) ` , ` s ` )", "meteor-baseline": 0.31, "meteor-tranx-annot": 0.3582, "meteor-best-tranx": 0.4364, "meteor-best-tranx-rerank": 0.4364, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.4906, "rougel-best-tranx": 0.6512, "rougel-best-tranx-rerank": 0.6512}, {"intent": "Removing duplicates from list of lists in Python", "rewritten_intent": "remove duplicate elements from list 'L'", "snippet": "list(dict((x[0], x) for x in L).values())", "question_id": 1143379, "baseline-bleu": 0.1056, "tranx-annot-bleu": 0.1609, "best-tranx-bleu": 0.0791, "best-tranx-bleu-rerank": 0.0791, "baseline": "\"\"\"\"\"\" . join ( list ( x ) )", "tranx-annot": "[ x for x in L if x not in [ L ] ]", "best-tranx": "[ k for k , g in itertools . groupby ( [ L ] ) ]", "best-tranx-rerank": "[ k for k , g in itertools . groupby ( [ L ] ) ]", "meteor-baseline": 0.2262, "meteor-tranx-annot": 0.1887, "meteor-best-tranx": 0.2103, "meteor-best-tranx-rerank": 0.2103, "rougel-baseline": 0.3889, "rougel-tranx-annot": 0.4444, "rougel-best-tranx": 0.4737, "rougel-best-tranx-rerank": 0.4737}, {"intent": "Reading a file without newlines", "rewritten_intent": "read a file `file` without newlines", "snippet": "[line.rstrip('\\n') for line in file]", "question_id": 12330522, "baseline-bleu": 0.1362, "tranx-annot-bleu": 0.1385, "best-tranx-bleu": 0.1402, "best-tranx-bleu-rerank": 0.1402, "baseline": "with open ( 'filename' ) #NEWLINE# #INDENT# pass", "tranx-annot": "file = open ( ` file ` , ` rb ` ) . read ( )", "best-tranx": "f = open ( ` file ` , ` r ` )", "best-tranx-rerank": "f = open ( ` file ` , ` rb ` )", "meteor-baseline": 0.2517, "meteor-tranx-annot": 0.1987, "meteor-best-tranx": 0.2531, "meteor-best-tranx-rerank": 0.2531, "rougel-baseline": 0.2759, "rougel-tranx-annot": 0.3871, "rougel-best-tranx": 0.3704, "rougel-best-tranx-rerank": 0.3704}, {"intent": "get item's position in a list", "rewritten_intent": "get the position of item 1 in `testlist`", "snippet": "[i for (i, x) in enumerate(testlist) if (x == 1)]", "question_id": 364621, "baseline-bleu": 0.0216, "tranx-annot-bleu": 0.1004, "best-tranx-bleu": 0.1086, "best-tranx-bleu-rerank": 0.1086, "baseline": "a [ - 1 : ]", "tranx-annot": "len ( testlist [ : : - 1 ] ) - len ( testlist [ 1 : ] )", "best-tranx": "len ( testlist ) - len ( set ( testlist ) )", "best-tranx-rerank": "len ( testlist ) - len ( set ( testlist ) )", "meteor-baseline": 0.0769, "meteor-tranx-annot": 0.2163, "meteor-best-tranx": 0.2386, "meteor-best-tranx-rerank": 0.2386, "rougel-baseline": 0.2222, "rougel-tranx-annot": 0.4, "rougel-best-tranx": 0.4242, "rougel-best-tranx-rerank": 0.4242}, {"intent": "get item's position in a list", "rewritten_intent": "get the position of item 1 in `testlist`", "snippet": "[i for (i, x) in enumerate(testlist) if (x == 1)]", "question_id": 364621, "baseline-bleu": 0.0216, "tranx-annot-bleu": 0.1004, "best-tranx-bleu": 0.1086, "best-tranx-bleu-rerank": 0.1086, "baseline": "a [ - 1 : ]", "tranx-annot": "len ( testlist [ : : - 1 ] ) - len ( testlist [ 1 : ] )", "best-tranx": "len ( testlist ) - len ( set ( testlist ) )", "best-tranx-rerank": "len ( testlist ) - len ( set ( testlist ) )", "meteor-baseline": 0.0769, "meteor-tranx-annot": 0.2163, "meteor-best-tranx": 0.2386, "meteor-best-tranx-rerank": 0.2386, "rougel-baseline": 0.2222, "rougel-tranx-annot": 0.4, "rougel-best-tranx": 0.4242, "rougel-best-tranx-rerank": 0.4242}, {"intent": "get item's position in a list", "rewritten_intent": "get the position of item 1 in `testlist`", "snippet": "for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:\n    pass", "question_id": 364621, "baseline-bleu": 0.0099, "tranx-annot-bleu": 0.0792, "best-tranx-bleu": 0.0716, "best-tranx-bleu-rerank": 0.0716, "baseline": "a [ - 1 : ]", "tranx-annot": "len ( testlist [ : : - 1 ] ) - len ( testlist [ 1 : ] )", "best-tranx": "len ( testlist ) - len ( set ( testlist ) )", "best-tranx-rerank": "len ( testlist ) - len ( set ( testlist ) )", "meteor-baseline": 0.0833, "meteor-tranx-annot": 0.1976, "meteor-best-tranx": 0.195, "meteor-best-tranx-rerank": 0.195, "rougel-baseline": 0.25, "rougel-tranx-annot": 0.4, "rougel-best-tranx": 0.3684, "rougel-best-tranx-rerank": 0.3684}, {"intent": "get item's position in a list", "rewritten_intent": "get the position of item 1 in `testlist`", "snippet": "for i in (i for (i, x) in enumerate(testlist) if (x == 1)):\n    pass", "question_id": 364621, "baseline-bleu": 0.0087, "tranx-annot-bleu": 0.0749, "best-tranx-bleu": 0.077, "best-tranx-bleu-rerank": 0.077, "baseline": "a [ - 1 : ]", "tranx-annot": "len ( testlist [ : : - 1 ] ) - len ( testlist [ 1 : ] )", "best-tranx": "len ( testlist ) - len ( set ( testlist ) )", "best-tranx-rerank": "len ( testlist ) - len ( set ( testlist ) )", "meteor-baseline": 0.0417, "meteor-tranx-annot": 0.1581, "meteor-best-tranx": 0.195, "meteor-best-tranx-rerank": 0.195, "rougel-baseline": 0.125, "rougel-tranx-annot": 0.3111, "rougel-best-tranx": 0.3684, "rougel-best-tranx-rerank": 0.3684}, {"intent": "get item's position in a list", "rewritten_intent": "get the position of item 1 in `testlist`", "snippet": "gen = (i for (i, x) in enumerate(testlist) if (x == 1))\nfor i in gen:\n    pass", "question_id": 364621, "baseline-bleu": 0.0053, "tranx-annot-bleu": 0.064, "best-tranx-bleu": 0.0599, "best-tranx-bleu-rerank": 0.0599, "baseline": "a [ - 1 : ]", "tranx-annot": "len ( testlist [ : : - 1 ] ) - len ( testlist [ 1 : ] )", "best-tranx": "len ( testlist ) - len ( set ( testlist ) )", "best-tranx-rerank": "len ( testlist ) - len ( set ( testlist ) )", "meteor-baseline": 0.0375, "meteor-tranx-annot": 0.1429, "meteor-best-tranx": 0.1757, "meteor-best-tranx-rerank": 0.1757, "rougel-baseline": 0.1143, "rougel-tranx-annot": 0.2917, "rougel-best-tranx": 0.3415, "rougel-best-tranx-rerank": 0.3415}, {"intent": "get item's position in a list", "rewritten_intent": "get the position of item `element` in list `testlist`", "snippet": "print(testlist.index(element))", "question_id": 364621, "baseline-bleu": 0.1174, "tranx-annot-bleu": 0.1456, "best-tranx-bleu": 0.1554, "best-tranx-bleu-rerank": 0.1554, "baseline": "somelist [ : : - 1 ]", "tranx-annot": "len ( testlist )", "best-tranx": "len ( testlist ) - element [ : : - 1 ]", "best-tranx-rerank": "len ( testlist ) - element [ : : - 1 ]", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.1765, "meteor-best-tranx": 0.2151, "meteor-best-tranx-rerank": 0.2151, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.4615, "rougel-best-tranx": 0.381, "rougel-best-tranx-rerank": 0.381}, {"intent": "get item's position in a list", "rewritten_intent": "get the position of item `element` in list `testlist`", "snippet": "try:\n    print(testlist.index(element))\nexcept ValueError:\n    pass", "question_id": 364621, "baseline-bleu": 0.0568, "tranx-annot-bleu": 0.0253, "best-tranx-bleu": 0.1211, "best-tranx-bleu-rerank": 0.1211, "baseline": "somelist [ : : - 1 ]", "tranx-annot": "len ( testlist )", "best-tranx": "len ( testlist ) - element [ : : - 1 ]", "best-tranx-rerank": "len ( testlist ) - element [ : : - 1 ]", "meteor-baseline": 0.0662, "meteor-tranx-annot": 0.1014, "meteor-best-tranx": 0.1923, "meteor-best-tranx-rerank": 0.1923, "rougel-baseline": 0.1739, "rougel-tranx-annot": 0.3, "rougel-best-tranx": 0.4286, "rougel-best-tranx-rerank": 0.4286}, {"intent": "Find the maximum value in a list of tuples in Python", "rewritten_intent": "find the first element of the tuple with the maximum second element in a list of tuples `lis`", "snippet": "max(lis, key=lambda item: item[1])[0]", "question_id": 13145368, "baseline-bleu": 0.1599, "tranx-annot-bleu": 0.134, "best-tranx-bleu": 0.134, "best-tranx-bleu-rerank": 0.134, "baseline": "[ x [ 0 ] for x in range ( len ( l ) ) ]", "tranx-annot": "[ x [ 0 ] for x in lis ]", "best-tranx": "[ x [ 0 ] for x in lis ]", "best-tranx-rerank": "[ x [ 0 ] for x in lis ]", "meteor-baseline": 0.2838, "meteor-tranx-annot": 0.2616, "meteor-best-tranx": 0.2616, "meteor-best-tranx-rerank": 0.2616, "rougel-baseline": 0.4242, "rougel-tranx-annot": 0.4444, "rougel-best-tranx": 0.4444, "rougel-best-tranx-rerank": 0.4444}, {"intent": "Find the maximum value in a list of tuples in Python", "rewritten_intent": "get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`", "snippet": "max(lis, key=itemgetter(1))[0]", "question_id": 13145368, "baseline-bleu": 0.1251, "tranx-annot-bleu": 0.2668, "best-tranx-bleu": 0.2759, "best-tranx-bleu-rerank": 0.1741, "baseline": "[ x [ i ] for i in range ( len ( l ) ) ]", "tranx-annot": "sorted ( enumerate ( lis ) , key = lambda x : x [ 1 ] ) [ 0 ]", "best-tranx": "max ( enumerate ( lis ) , key = lambda x : x [ 0 ] ) [ 0 ]", "best-tranx-rerank": "lis [ 0 ] - lis [ - 1 ]", "meteor-baseline": 0.3377, "meteor-tranx-annot": 0.7403, "meteor-best-tranx": 0.7705, "meteor-best-tranx-rerank": 0.1838, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.7059, "rougel-best-tranx": 0.7059, "rougel-best-tranx-rerank": 0.4167}, {"intent": "How do I simulate a progress counter in a command line application in Python?", "rewritten_intent": "Make a delay of 1 second", "snippet": "time.sleep(1)", "question_id": 2689189, "baseline-bleu": 0.2658, "tranx-annot-bleu": 0.4347, "best-tranx-bleu": 0.8091, "best-tranx-bleu-rerank": 0.8091, "baseline": "sys . exit ( )", "tranx-annot": "psutil . sleep ( 2 )", "best-tranx": "sleep . sleep ( 1 )", "best-tranx-rerank": "sleep . sleep ( 1 )", "meteor-baseline": 0.2542, "meteor-tranx-annot": 0.625, "meteor-best-tranx": 0.83, "meteor-best-tranx-rerank": 0.83, "rougel-baseline": 0.5455, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.8333, "rougel-best-tranx-rerank": 0.8333}, {"intent": "Tuple conversion to a string", "rewritten_intent": "convert list of tuples `L` to a string", "snippet": "\"\"\", \"\"\".join('(' + ', '.join(i) + ')' for i in L)", "question_id": 12485244, "baseline-bleu": 0.1109, "tranx-annot-bleu": 0.2198, "best-tranx-bleu": 0.2372, "best-tranx-bleu-rerank": 0.2372, "baseline": "\"\"\"\"\"\" . join ( L )", "tranx-annot": "` ` ` ` ` ` . join ( [ item [ 0 ] for item in L ] )", "best-tranx": "` ` ` ` ` ` . join ( item for item in L for item in list ( item ) )", "best-tranx-rerank": "` ` ` ` ` ` . join ( item for item in L for item in list ( item ) )", "meteor-baseline": 0.3064, "meteor-tranx-annot": 0.3358, "meteor-best-tranx": 0.2958, "meteor-best-tranx-rerank": 0.2958, "rougel-baseline": 0.5238, "rougel-tranx-annot": 0.5098, "rougel-best-tranx": 0.566, "rougel-best-tranx-rerank": 0.566}, {"intent": "Default value for field in Django model", "rewritten_intent": "Django set default value of field `b` equal to '0000000'", "snippet": "b = models.CharField(max_length=7, default='0000000', editable=False)", "question_id": 755857, "baseline-bleu": 0.0552, "tranx-annot-bleu": 0.1286, "best-tranx-bleu": 0.3326, "best-tranx-bleu-rerank": 0.2763, "baseline": "plt . set_index ( '<unk>' )", "tranx-annot": "b . objects . filter ( lambda 0000000 : x . fillna ( x [ ` 0000000 ` ] ) )", "best-tranx": "b = models . Foreign Key ( ` 0000000 ` , order_by = ` 0000000 ` )", "best-tranx-rerank": "b = models . Foreign Key ( ` 0000000 ` , unique = True )", "meteor-baseline": 0.1256, "meteor-tranx-annot": 0.2726, "meteor-best-tranx": 0.4313, "meteor-best-tranx-rerank": 0.4697, "rougel-baseline": 0.3226, "rougel-tranx-annot": 0.3333, "rougel-best-tranx": 0.5789, "rougel-best-tranx-rerank": 0.6111}, {"intent": "How do I perform secondary sorting in python?", "rewritten_intent": "Sort lis `list5` in ascending order based on the degrees value of its elements", "snippet": "sorted(list5, lambda x: (degree(x), x))", "question_id": 16193578, "baseline-bleu": 0.1754, "tranx-annot-bleu": 0.1921, "best-tranx-bleu": 0.1828, "best-tranx-bleu-rerank": 0.1828, "baseline": "sorted ( a , key = lambda x : x [ 1 ] ) , reverse = True )", "tranx-annot": "list5 . sort ( key = lambda x : len ( x [ 1 ] ) )", "best-tranx": "sorted ( list ( list5 . items ( ) ) , key = lambda x : x [ 1 ] )", "best-tranx-rerank": "sorted ( list ( list5 . items ( ) ) , key = lambda x : x [ 1 ] )", "meteor-baseline": 0.3067, "meteor-tranx-annot": 0.3947, "meteor-best-tranx": 0.478, "meteor-best-tranx-rerank": 0.478, "rougel-baseline": 0.5714, "rougel-tranx-annot": 0.5455, "rougel-best-tranx": 0.7027, "rougel-best-tranx-rerank": 0.7027}, {"intent": "How do I perform secondary sorting in python?", "rewritten_intent": null, "snippet": "sorted(list5, key=lambda vertex: (degree(vertex), vertex))", "question_id": 16193578, "baseline-bleu": 0.0792, "tranx-annot-bleu": 0.1363, "best-tranx-bleu": 0.208, "best-tranx-bleu-rerank": 0.1521, "baseline": "np . dot ( [ 1 , 2 , 3 ] )", "tranx-annot": "df . sort ( key = lambda x : x . index ( x . lower ( ) [ 0 ] ) )", "best-tranx": "sorted ( list ( mydict . items ( ) ) , key = lambda a : ( a [ a ] , b ) )", "best-tranx-rerank": "sorted ( list ( mydict . items ( ) ) , key = lambda a : ( a [ 1 ] , c . index ( ( b , c ) ) ) )", "meteor-baseline": 0.1149, "meteor-tranx-annot": 0.518, "meteor-best-tranx": 0.5799, "meteor-best-tranx-rerank": 0.5123, "rougel-baseline": 0.2667, "rougel-tranx-annot": 0.4878, "rougel-best-tranx": 0.6047, "rougel-best-tranx-rerank": 0.5}, {"intent": "Python: convert list to generator", "rewritten_intent": "convert a list  into a generator object", "snippet": "(n for n in [1, 2, 3, 5])", "question_id": 16041405, "baseline-bleu": 0.2788, "tranx-annot-bleu": 0.1086, "best-tranx-bleu": 0.1255, "best-tranx-bleu-rerank": 0.1255, "baseline": "list ( [ 1 , 2 ] for i in range ( 3 ) ]", "tranx-annot": "[ int ( i ) for i in range ( 0 , len ( my_list ) , 3 ) ]", "best-tranx": "list ( range ( 1 , 3 ) )", "best-tranx-rerank": "list ( range ( 1 , 3 ) )", "meteor-baseline": 0.4237, "meteor-tranx-annot": 0.3226, "meteor-best-tranx": 0.1736, "meteor-best-tranx-rerank": 0.1736, "rougel-baseline": 0.6667, "rougel-tranx-annot": 0.5143, "rougel-best-tranx": 0.4167, "rougel-best-tranx-rerank": 0.4167}, {"intent": "Remove multiple items from list in Python", "rewritten_intent": "remove elements from list `oldlist` that have an index number mentioned in list `removelist`", "snippet": "newlist = [v for i, v in enumerate(oldlist) if i not in removelist]", "question_id": 18837607, "baseline-bleu": 0.1747, "tranx-annot-bleu": 0.1145, "best-tranx-bleu": 0.0891, "best-tranx-bleu-rerank": 0.106, "baseline": "[ i for i , j in enumerate ( my_list ) ]", "tranx-annot": "[ ( x - x ) for x , y in zip ( oldlist , removelist ) ]", "best-tranx": "[ x for x in oldlist if x [ 1 ] = = 0 ]", "best-tranx-rerank": "[ x for x in removelist if x [ 1 ] = = 0 ]", "meteor-baseline": 0.3473, "meteor-tranx-annot": 0.309, "meteor-best-tranx": 0.2151, "meteor-best-tranx-rerank": 0.286, "rougel-baseline": 0.6452, "rougel-tranx-annot": 0.4865, "rougel-best-tranx": 0.4118, "rougel-best-tranx-rerank": 0.4118}, {"intent": "Deleting a specific line in a file (python)", "rewritten_intent": "Open a file `yourfile.txt` in write mode", "snippet": "f = open('yourfile.txt', 'w')", "question_id": 4710067, "baseline-bleu": 0.3481, "tranx-annot-bleu": 0.6516, "best-tranx-bleu": 0.8242, "best-tranx-bleu-rerank": 0.8242, "baseline": "with open ( 'filename.txt' , shell = True )", "tranx-annot": "output = open ( ` yourfile . txt ` , ` yourfile . txt ` )", "best-tranx": "f = open ( ` yourfile . txt ` , ` wb ` )", "best-tranx-rerank": "f = open ( ` yourfile . txt ` , ` wb ` )", "meteor-baseline": 0.4952, "meteor-tranx-annot": 0.8294, "meteor-best-tranx": 0.9269, "meteor-best-tranx-rerank": 0.9269, "rougel-baseline": 0.6667, "rougel-tranx-annot": 0.8, "rougel-best-tranx": 0.9286, "rougel-best-tranx-rerank": 0.9286}, {"intent": "Attribute getters in python", "rewritten_intent": "get attribute 'attr' from object `obj`", "snippet": "getattr(obj, 'attr')", "question_id": 7373219, "baseline-bleu": 0.2398, "tranx-annot-bleu": 0.3247, "best-tranx-bleu": 1.0, "best-tranx-bleu-rerank": 1.0, "baseline": "canvas . create ( 'filename' )", "tranx-annot": "print ( obj [ ` attr ` ] )", "best-tranx": "getattr ( obj , ` attr ` )", "best-tranx-rerank": "getattr ( obj , ` attr ` )", "meteor-baseline": 0.3945, "meteor-tranx-annot": 0.6944, "meteor-best-tranx": 0.999, "meteor-best-tranx-rerank": 0.999, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.7059, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 1.0}, {"intent": "How do I convert tuple of tuples to list in one line (pythonic)?", "rewritten_intent": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple", "snippet": "from functools import reduce\nreduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))", "question_id": 8171751, "baseline-bleu": 0.071, "tranx-annot-bleu": 0.1065, "best-tranx-bleu": 0.5983, "best-tranx-bleu-rerank": 0.6002, "baseline": "[ ( x , y ) for k , y in zip ( [ 1 , 2 , 3 ] , [ 'a' , '<unk>' ] ) )", "tranx-annot": "map ( tuple , zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) )", "best-tranx": "hex ( tuple ( map ( lambda t : ( x , t + t ) , ( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) ) ) )", "best-tranx-rerank": "map ( tuple , zip ( * ( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) ) )", "meteor-baseline": 0.2502, "meteor-tranx-annot": 0.3622, "meteor-best-tranx": 0.7346, "meteor-best-tranx-rerank": 0.6593, "rougel-baseline": 0.4444, "rougel-tranx-annot": 0.4848, "rougel-best-tranx": 0.725, "rougel-best-tranx-rerank": 0.7246}, {"intent": "How do I convert tuple of tuples to list in one line (pythonic)?", "rewritten_intent": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line", "snippet": "map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))", "question_id": 8171751, "baseline-bleu": 0.087, "tranx-annot-bleu": 0.4649, "best-tranx-bleu": 0.6712, "best-tranx-bleu-rerank": 0.2927, "baseline": "\"\"\"\"\"\" . join ( [ 1 , 2 ] , [ 1 , 2 ] , [ 'a' , '<unk>' ] ) )", "tranx-annot": "` ` ` ` ` ` . join ( [ str ( lambda x : x + y ) for x in ( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) . items ( ) ] )", "best-tranx": "[ list ( x ) for x in zip ( * ( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) ) ]", "best-tranx-rerank": "( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) = [ ( x , y ) for x , y in zip ( ( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) , ( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) ) ]", "meteor-baseline": 0.2995, "meteor-tranx-annot": 0.6809, "meteor-best-tranx": 0.7817, "meteor-best-tranx-rerank": 0.7094, "rougel-baseline": 0.5075, "rougel-tranx-annot": 0.6747, "rougel-best-tranx": 0.7647, "rougel-best-tranx-rerank": 0.4655}, {"intent": "Python Pandas: How to replace a characters in a column of a dataframe?", "rewritten_intent": null, "snippet": "df['range'].replace(',', '-', inplace=True)", "question_id": 28986489, "baseline-bleu": 0.2977, "tranx-annot-bleu": 0.0802, "best-tranx-bleu": 0.1531, "best-tranx-bleu-rerank": 0.1775, "baseline": "df [ 'stats' ] = df [ 'a' ] . apply ( lambda x : x . replace ( ',' ) )", "tranx-annot": "pd . concat ( [ pid , df ] , axis = 1 )", "best-tranx": "df = pd . Data Frame ( [ a ] , columns = [ ` a ` , ` b ` ] )", "best-tranx-rerank": "df [ ` value ` ] = df [ ` a ` ] . fillna ( 0 )", "meteor-baseline": 0.5143, "meteor-tranx-annot": 0.2217, "meteor-best-tranx": 0.3066, "meteor-best-tranx-rerank": 0.3859, "rougel-baseline": 0.6122, "rougel-tranx-annot": 0.5143, "rougel-best-tranx": 0.5909, "rougel-best-tranx-rerank": 0.5641}, {"intent": "inverse of zip", "rewritten_intent": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`", "snippet": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])", "question_id": 19339, "baseline-bleu": 0.0495, "tranx-annot-bleu": 0.6575, "best-tranx-bleu": 0.4852, "best-tranx-bleu-rerank": 0.222, "baseline": "set ( [ 1 , 2 , 3 , 4 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] ,", "tranx-annot": "sorted ( [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] , key = lambda x : x . endswith ( x [ 1 ] ) )", "best-tranx": "[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] . append ( [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] )", "best-tranx-rerank": "[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] . sort ( [ ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] ` , ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] ` , ` a ` , ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] ` ] )", "meteor-baseline": 0.1781, "meteor-tranx-annot": 0.7022, "meteor-best-tranx": 0.8684, "meteor-best-tranx-rerank": 0.6667, "rougel-baseline": 0.2887, "rougel-tranx-annot": 0.7955, "rougel-best-tranx": 0.6542, "rougel-best-tranx-rerank": 0.3743}, {"intent": "inverse of zip", "rewritten_intent": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`", "snippet": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])", "question_id": 19339, "baseline-bleu": 0.0495, "tranx-annot-bleu": 0.6575, "best-tranx-bleu": 0.4852, "best-tranx-bleu-rerank": 0.222, "baseline": "set ( [ 1 , 2 , 3 , 4 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] ,", "tranx-annot": "sorted ( [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] , key = lambda x : x . endswith ( x [ 1 ] ) )", "best-tranx": "[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] . append ( [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] )", "best-tranx-rerank": "[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] . sort ( [ ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] ` , ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] ` , ` a ` , ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] ` ] )", "meteor-baseline": 0.1781, "meteor-tranx-annot": 0.7022, "meteor-best-tranx": 0.8684, "meteor-best-tranx-rerank": 0.6667, "rougel-baseline": 0.2887, "rougel-tranx-annot": 0.7955, "rougel-best-tranx": 0.6542, "rougel-best-tranx-rerank": 0.3743}, {"intent": "inverse of zip", "rewritten_intent": "unzip list `original`", "snippet": "result = ([a for (a, b) in original], [b for (a, b) in original])", "question_id": 19339, "baseline-bleu": 0.0211, "tranx-annot-bleu": 0.0127, "best-tranx-bleu": 0.004, "best-tranx-bleu-rerank": 0.004, "baseline": "<unk><unk>e ( )", "tranx-annot": "original [ : : - 1 ]", "best-tranx": "zip ( * original )", "best-tranx-rerank": "zip ( * original )", "meteor-baseline": 0.0397, "meteor-tranx-annot": 0.06, "meteor-best-tranx": 0.0605, "meteor-best-tranx-rerank": 0.0605, "rougel-baseline": 0.1111, "rougel-tranx-annot": 0.1765, "rougel-best-tranx": 0.1875, "rougel-best-tranx-rerank": 0.1875}, {"intent": "inverse of zip", "rewritten_intent": "unzip list `original` and return a generator", "snippet": "result = ((a for (a, b) in original), (b for (a, b) in original))", "question_id": 19339, "baseline-bleu": 0.0392, "tranx-annot-bleu": 0.0732, "best-tranx-bleu": 0.0223, "best-tranx-bleu-rerank": 0.004, "baseline": "x = [ int ( x ) for x in x ]", "tranx-annot": "generator ( original , key = lambda x : ( - 1 , x [ 1 ] ) )", "best-tranx": "original . sort ( * * original )", "best-tranx-rerank": "original . split ( )", "meteor-baseline": 0.098, "meteor-tranx-annot": 0.2031, "meteor-best-tranx": 0.0797, "meteor-best-tranx-rerank": 0.0605, "rougel-baseline": 0.2564, "rougel-tranx-annot": 0.3478, "rougel-best-tranx": 0.2286, "rougel-best-tranx-rerank": 0.1875}, {"intent": "inverse of zip", "rewritten_intent": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`", "snippet": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])", "question_id": 19339, "baseline-bleu": 0.0534, "tranx-annot-bleu": 0.9365, "best-tranx-bleu": 0.4877, "best-tranx-bleu-rerank": 0.2989, "baseline": "\"\"\"\"\"\" . join ( [ 1 , 2 , 3 , 4 ] , [ 1 , 2 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 'A' ,", "tranx-annot": "print ( [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] )", "best-tranx": "[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] . append ( [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] )", "best-tranx-rerank": "[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] . sort ( [ ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] ` , ` str_2 ` , ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] ` ] )", "meteor-baseline": 0.3017, "meteor-tranx-annot": 0.9567, "meteor-best-tranx": 0.875, "meteor-best-tranx-rerank": 0.726, "rougel-baseline": 0.4364, "rougel-tranx-annot": 0.9655, "rougel-best-tranx": 0.6562, "rougel-best-tranx-rerank": 0.4693}, {"intent": "inverse of zip", "rewritten_intent": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None", "snippet": "map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])", "question_id": 19339, "baseline-bleu": 0.064, "tranx-annot-bleu": 0.8595, "best-tranx-bleu": 0.4593, "best-tranx-bleu-rerank": 0.308, "baseline": "np . zeros ( [ 1 , 2 , 3 , 4 ] , [ 1 , 2 ] , [ 1 , 2 , 3 , 4 ] , [ 'A' , 4 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] ,", "tranx-annot": "plt . add_argument ( ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] ` )", "best-tranx": "[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] . insert ( 0 , ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] ` )", "best-tranx-rerank": "[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] . append ( ( ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] ` , ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] ` ) )", "meteor-baseline": 0.2101, "meteor-tranx-annot": 0.8363, "meteor-best-tranx": 0.7821, "meteor-best-tranx-rerank": 0.594, "rougel-baseline": 0.3519, "rougel-tranx-annot": 0.9032, "rougel-best-tranx": 0.6418, "rougel-best-tranx-rerank": 0.4859}, {"intent": "Python JSON serialize a Decimal object", "rewritten_intent": "encode `Decimal('3.9')` to a JSON string", "snippet": "json.dumps(Decimal('3.9'))", "question_id": 1960516, "baseline-bleu": 0.1162, "tranx-annot-bleu": 0.6865, "best-tranx-bleu": 0.2295, "best-tranx-bleu-rerank": 0.2295, "baseline": "json . loads ( 'sample.#SPACE#<unk>#SPACE#<unk>' )", "tranx-annot": "json . dumps ( ` Decimal ( ` 3 . 9 ` ) ` )", "best-tranx": "json . dumps ( { ` Decimal ( ` 3 . 9 ` ) ` . encode ( ` Decimal ( ` 3 . 9 ` ) ` ) : v for k , v in json . enumerate ( Decimal ( ` 3 . 9 ` ) ) } )", "best-tranx-rerank": "json . dumps ( { ` Decimal ( ` 3 . 9 ` ) ` . encode ( ` Decimal ( ` 3 . 9 ` ) ` ) : v for k , v in json . enumerate ( Decimal ( ` 3 . 9 ` ) ) } )", "meteor-baseline": 0.4148, "meteor-tranx-annot": 0.908, "meteor-best-tranx": 0.7518, "meteor-best-tranx-rerank": 0.7518, "rougel-baseline": 0.4118, "rougel-tranx-annot": 0.9286, "rougel-best-tranx": 0.4062, "rougel-best-tranx-rerank": 0.4062}, {"intent": "Add key to a dictionary", "rewritten_intent": "Add key \"mynewkey\" to dictionary `d` with value \"mynewvalue\"", "snippet": "d['mynewkey'] = 'mynewvalue'", "question_id": 1024847, "baseline-bleu": 0.0766, "tranx-annot-bleu": 0.6311, "best-tranx-bleu": 0.4324, "best-tranx-bleu-rerank": 0.1895, "baseline": "print ( my_dict . items ( ) ) , key = lambda x : item [ 1 ] )", "tranx-annot": "d [ ` mynewkey ` ] [ ` mynewvalue ` ] = ` mynewvalue `", "best-tranx": "d [ ` mynewkey ` ] . update ( { mynewkey } )", "best-tranx-rerank": "d . update ( { ` mynewkey ` : 4 , ` mynewvalue ` : 5 } )", "meteor-baseline": 0.1376, "meteor-tranx-annot": 0.9219, "meteor-best-tranx": 0.414, "meteor-best-tranx-rerank": 0.6226, "rougel-baseline": 0.2069, "rougel-tranx-annot": 0.8, "rougel-best-tranx": 0.5217, "rougel-best-tranx-rerank": 0.5}, {"intent": "Add key to a dictionary", "rewritten_intent": "Add key 'a' to dictionary `data` with value 1", "snippet": "data.update({'a': 1, })", "question_id": 1024847, "baseline-bleu": 0.1392, "tranx-annot-bleu": 0.1689, "best-tranx-bleu": 0.673, "best-tranx-bleu-rerank": 0.4002, "baseline": "sorted ( data , key = lambda x : x [ 'a' ] , reverse = True )", "tranx-annot": "data [ ` a ` ] = 3", "best-tranx": "globals ( ) . update ( { ` a ` : 1 } )", "best-tranx-rerank": "data [ ` a ` ] . update ( { a } )", "meteor-baseline": 0.4608, "meteor-tranx-annot": 0.3, "meteor-best-tranx": 0.8372, "meteor-best-tranx-rerank": 0.6862, "rougel-baseline": 0.4848, "rougel-tranx-annot": 0.381, "rougel-best-tranx": 0.8148, "rougel-best-tranx-rerank": 0.7692}, {"intent": "Add key to a dictionary", "rewritten_intent": "Add key 'a' to dictionary `data` with value 1", "snippet": "data.update(dict(a=1))", "question_id": 1024847, "baseline-bleu": 0.0804, "tranx-annot-bleu": 0.1311, "best-tranx-bleu": 0.2015, "best-tranx-bleu-rerank": 0.2045, "baseline": "sorted ( data , key = lambda x : x [ 'a' ] , reverse = True )", "tranx-annot": "data [ ` a ` ] = 3", "best-tranx": "globals ( ) . update ( { ` a ` : 1 } )", "best-tranx-rerank": "data [ ` a ` ] . update ( { a } )", "meteor-baseline": 0.2101, "meteor-tranx-annot": 0.1402, "meteor-best-tranx": 0.4708, "meteor-best-tranx-rerank": 0.3807, "rougel-baseline": 0.3226, "rougel-tranx-annot": 0.3158, "rougel-best-tranx": 0.64, "rougel-best-tranx-rerank": 0.5}, {"intent": "Add key to a dictionary", "rewritten_intent": "Add key 'a' to dictionary `data` with value 1", "snippet": "data.update(a=1)", "question_id": 1024847, "baseline-bleu": 0.0804, "tranx-annot-bleu": 0.1907, "best-tranx-bleu": 0.1892, "best-tranx-bleu-rerank": 0.2045, "baseline": "sorted ( data , key = lambda x : x [ 'a' ] , reverse = True )", "tranx-annot": "data [ ` a ` ] = 3", "best-tranx": "globals ( ) . update ( { ` a ` : 1 } )", "best-tranx-rerank": "data [ ` a ` ] . update ( { a } )", "meteor-baseline": 0.2717, "meteor-tranx-annot": 0.1875, "meteor-best-tranx": 0.5943, "meteor-best-tranx-rerank": 0.6013, "rougel-baseline": 0.3571, "rougel-tranx-annot": 0.375, "rougel-best-tranx": 0.5455, "rougel-best-tranx-rerank": 0.5714}, {"intent": "Is there a one line code to find maximal value in a matrix?", "rewritten_intent": "find maximal value in matrix `matrix`", "snippet": "max([max(i) for i in matrix])", "question_id": 35837346, "baseline-bleu": 0.1194, "tranx-annot-bleu": 0.1258, "best-tranx-bleu": 0.1703, "best-tranx-bleu-rerank": 0.2476, "baseline": "numpy . where ( numpy . product ( a ) )", "tranx-annot": "np . find ( ( 0 , 0 ) , matrix )", "best-tranx": "numpy . argwhere ( np . all ( matrix = = [ matrix ] ) )", "best-tranx-rerank": "numpy . array ( [ matrix ] ) . max ( )", "meteor-baseline": 0.1563, "meteor-tranx-annot": 0.1938, "meteor-best-tranx": 0.3606, "meteor-best-tranx-rerank": 0.5445, "rougel-baseline": 0.3333, "rougel-tranx-annot": 0.4, "rougel-best-tranx": 0.4828, "rougel-best-tranx-rerank": 0.64}, {"intent": "Python - how to round down to 2 decimals", "rewritten_intent": "Round number `answer` to 2 precision after the decimal point", "snippet": "answer = str(round(answer, 2))", "question_id": 20457038, "baseline-bleu": 0.1161, "tranx-annot-bleu": 0.0883, "best-tranx-bleu": 0.7047, "best-tranx-bleu-rerank": 0.7047, "baseline": "datetime . datetime . now ( )", "tranx-annot": "int ( answer )", "best-tranx": "print ( round ( answer , 2 ) )", "best-tranx-rerank": "print ( round ( answer , 2 ) )", "meteor-baseline": 0.0943, "meteor-tranx-annot": 0.2481, "meteor-best-tranx": 0.74, "meteor-best-tranx-rerank": 0.74, "rougel-baseline": 0.2222, "rougel-tranx-annot": 0.4, "rougel-best-tranx": 0.8, "rougel-best-tranx-rerank": 0.8}, {"intent": "Extract IP address from an html string (python)", "rewritten_intent": "extract ip address from an html string", "snippet": "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)", "question_id": 2890896, "baseline-bleu": 0.0361, "tranx-annot-bleu": 0.0634, "best-tranx-bleu": 0.0429, "best-tranx-bleu-rerank": 0.0429, "baseline": "\"\"\"\"\"\" . join ( chr . strip ( ) )", "tranx-annot": "` ` ` ` ` ` . join ( filter ( lambda x : s . split ( ` : ` ) ) )", "best-tranx": "pat = re . compile ( ` < unk > ` )", "best-tranx-rerank": "pat = re . compile ( ` < unk > ` )", "meteor-baseline": 0.1282, "meteor-tranx-annot": 0.1558, "meteor-best-tranx": 0.1552, "meteor-best-tranx-rerank": 0.1552, "rougel-baseline": 0.3333, "rougel-tranx-annot": 0.3509, "rougel-best-tranx": 0.3111, "rougel-best-tranx-rerank": 0.3111}, {"intent": "How do I filter a pandas DataFrame based on value counts?", "rewritten_intent": "filter dataframe `df` by values in column `A` that appear more than once", "snippet": "df.groupby('A').filter(lambda x: len(x) > 1)", "question_id": 29836836, "baseline-bleu": 0.1819, "tranx-annot-bleu": 0.3664, "best-tranx-bleu": 0.2355, "best-tranx-bleu-rerank": 0.2355, "baseline": "df [ 'BrandName' ] = df [ 'col' ] . str ( lambda x : x [ 'A' ] ) )", "tranx-annot": "df . groupby ( ` A ` ) [ ` A ` ] . agg ( lambda x : map ( x , A [ i : ] ) )", "best-tranx": "df . filter ( lambda df : np . arange ( A . sum ( ) ) = = 1 )", "best-tranx-rerank": "df . filter ( lambda df : np . arange ( A . sum ( ) ) = = 1 )", "meteor-baseline": 0.4711, "meteor-tranx-annot": 0.7002, "meteor-best-tranx": 0.3998, "meteor-best-tranx-rerank": 0.3998, "rougel-baseline": 0.4898, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.6667, "rougel-best-tranx-rerank": 0.6667}, {"intent": "Converting a string into a list in Python", "rewritten_intent": "append each line in file `myfile` into a list", "snippet": "[x for x in myfile.splitlines() if x != '']", "question_id": 2545397, "baseline-bleu": 0.0869, "tranx-annot-bleu": 0.0528, "best-tranx-bleu": 0.1046, "best-tranx-bleu-rerank": 0.1046, "baseline": "list ( s . split ( ',' ) )", "tranx-annot": "myfile . append ( myfile )", "best-tranx": "myfile . write ( open ( ` file . txt ` , ` w ` ) . read ( ) )", "best-tranx-rerank": "myfile . write ( open ( ` file . txt ` , ` w ` ) . read ( ) )", "meteor-baseline": 0.1524, "meteor-tranx-annot": 0.1258, "meteor-best-tranx": 0.1724, "meteor-best-tranx-rerank": 0.1724, "rougel-baseline": 0.3571, "rougel-tranx-annot": 0.3478, "rougel-best-tranx": 0.3158, "rougel-best-tranx-rerank": 0.3158}, {"intent": "Converting a string into a list in Python", "rewritten_intent": "Get a list of integers `lst` from a file `filename.txt`", "snippet": "lst = map(int, open('filename.txt').readlines())", "question_id": 2545397, "baseline-bleu": 0.0536, "tranx-annot-bleu": 0.4247, "best-tranx-bleu": 0.4502, "best-tranx-bleu-rerank": 0.4597, "baseline": "[ item for item in listdir if item : #NEWLINE# #INDENT# pass", "tranx-annot": "list ( load ( open ( ` filename . txt ` , ` rb ` ) ) )", "best-tranx": "lst = [ int ( x ) for x in open ( ` filename . txt ` ) . read ( ) ]", "best-tranx-rerank": "[ list ( t ) for t in open ( ` filename . txt ` ) . read ( ) ]", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.4795, "meteor-best-tranx": 0.7513, "meteor-best-tranx-rerank": 0.6242, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.7027, "rougel-best-tranx": 0.7619, "rougel-best-tranx-rerank": 0.65}, {"intent": "Adding Colorbar to a Spectrogram", "rewritten_intent": "add color bar with image `mappable` to plot `plt`", "snippet": "plt.colorbar(mappable=mappable, cax=ax3)", "question_id": 35420052, "baseline-bleu": 0.1136, "tranx-annot-bleu": 0.1308, "best-tranx-bleu": 0.2078, "best-tranx-bleu-rerank": 0.2078, "baseline": "logging . info ( ) . date ( ) . date ( )", "tranx-annot": "plt ( lambda x , plt : x * plt )", "best-tranx": "plt . plot ( mappable , bar , color = color )", "best-tranx-rerank": "plt . plot ( mappable , bar , color = color )", "meteor-baseline": 0.124, "meteor-tranx-annot": 0.1681, "meteor-best-tranx": 0.3997, "meteor-best-tranx-rerank": 0.3997, "rougel-baseline": 0.24, "rougel-tranx-annot": 0.3478, "rougel-best-tranx": 0.5833, "rougel-best-tranx-rerank": 0.5833}, {"intent": "Count most frequent 100 words from sentences in Dataframe Pandas", "rewritten_intent": "count most frequent 100 words in column 'text' of dataframe `df`", "snippet": "Counter(' '.join(df['text']).split()).most_common(100)", "question_id": 29903025, "baseline-bleu": 0.0808, "tranx-annot-bleu": 0.1741, "best-tranx-bleu": 0.1741, "best-tranx-bleu-rerank": 0.1722, "baseline": "df . groupby ( 'ID' ) . apply ( )", "tranx-annot": "df . apply ( lambda x : x . count ( ` text ` ) ) . click ( )", "best-tranx": "df . groupby ( ` text ` ) . agg ( lambda x : x . tolist ( ) )", "best-tranx-rerank": "df . groupby ( ` text ` ) . agg ( lambda x : x . groupby ( ` text ` ) . sum ( ) )", "meteor-baseline": 0.2561, "meteor-tranx-annot": 0.4595, "meteor-best-tranx": 0.384, "meteor-best-tranx-rerank": 0.5264, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.5909, "rougel-best-tranx": 0.5909, "rougel-best-tranx-rerank": 0.6667}, {"intent": "Python split a string using regex", "rewritten_intent": null, "snippet": "re.findall('(.+?):(.+?)\\\\b ?', text)", "question_id": 16330838, "baseline-bleu": 0.0286, "tranx-annot-bleu": 0.0494, "best-tranx-bleu": 0.1942, "best-tranx-bleu-rerank": 0.1942, "baseline": "\"\"\"Hello#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#%s' )", "tranx-annot": "return ` ` . join ( reversed ( str ) )", "best-tranx": "re . findall ( ` \\ \\ S + ` , str1 )", "best-tranx-rerank": "re . findall ( ` \\ \\ S + ` , str1 )", "meteor-baseline": 0.0564, "meteor-tranx-annot": 0.1542, "meteor-best-tranx": 0.3488, "meteor-best-tranx-rerank": 0.3488, "rougel-baseline": 0.0811, "rougel-tranx-annot": 0.4, "rougel-best-tranx": 0.5946, "rougel-best-tranx-rerank": 0.5946}, {"intent": "Generate all subsets of size k (containing k elements) in Python", "rewritten_intent": "generate all 2-element subsets of tuple `(1, 2, 3)`", "snippet": "list(itertools.combinations((1, 2, 3), 2))", "question_id": 7378180, "baseline-bleu": 0.2969, "tranx-annot-bleu": 0.3054, "best-tranx-bleu": 0.5194, "best-tranx-bleu-rerank": 0.5194, "baseline": "random . sample ( [ 1 , 2 , 3 , 4 ] )", "tranx-annot": "print ( set ( map ( lambda x : x * x , [ ( 1 , 2 , 3 ) ] ) ) )", "best-tranx": "print ( list ( itertools . product ( [ ( 1 , 2 , 3 ) ] , 2 ) ) )", "best-tranx-rerank": "print ( list ( itertools . product ( [ ( 1 , 2 , 3 ) ] , 2 ) ) )", "meteor-baseline": 0.4121, "meteor-tranx-annot": 0.4791, "meteor-best-tranx": 0.8902, "meteor-best-tranx-rerank": 0.8902, "rougel-baseline": 0.5806, "rougel-tranx-annot": 0.5714, "rougel-best-tranx": 0.8205, "rougel-best-tranx-rerank": 0.8205}, {"intent": "Python: How to get a value of datetime.today() that is \"timezone aware\"?", "rewritten_intent": "get a value of datetime.today() in the UTC time zone", "snippet": "datetime.now(pytz.utc)", "question_id": 4530069, "baseline-bleu": 0.3448, "tranx-annot-bleu": 0.1626, "best-tranx-bleu": 0.0667, "best-tranx-bleu-rerank": 0.0909, "baseline": "datetime . datetime . now ( ) . date ( )", "tranx-annot": "time . datetime . today . time ( * * 0 )", "best-tranx": "time . mktime ( datetime ( microsecond = 0 ) . split ( ) ) . encode ( ` utf - 8 ` )", "best-tranx-rerank": "time . strftime ( ` % H : % M : % S ` , datetime . utcnow ( ) )", "meteor-baseline": 0.6158, "meteor-tranx-annot": 0.6085, "meteor-best-tranx": 0.2604, "meteor-best-tranx-rerank": 0.2688, "rougel-baseline": 0.6316, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.3125, "rougel-best-tranx-rerank": 0.3448}, {"intent": "Python: How to remove empty lists from a list?", "rewritten_intent": "Get a new list `list2`by removing empty list from a list of lists `list1`", "snippet": "list2 = [x for x in list1 if x != []]", "question_id": 4842956, "baseline-bleu": 0.0765, "tranx-annot-bleu": 0.1384, "best-tranx-bleu": 0.4372, "best-tranx-bleu-rerank": 0.1577, "baseline": "[ ( x , j ) for j , j in zip ( a , zip ( l ) ) ]", "tranx-annot": "[ [ ] for i in range ( len ( list1 ) ) ]", "best-tranx": "l = [ [ x for x in s if x ! = x ] for x in list1 ]", "best-tranx-rerank": "l = [ [ i for i in list1 ] for i in list1 ]", "meteor-baseline": 0.1603, "meteor-tranx-annot": 0.3219, "meteor-best-tranx": 0.6842, "meteor-best-tranx-rerank": 0.3547, "rougel-baseline": 0.2778, "rougel-tranx-annot": 0.4828, "rougel-best-tranx": 0.8, "rougel-best-tranx-rerank": 0.5333}, {"intent": "Python: How to remove empty lists from a list?", "rewritten_intent": "Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`", "snippet": "list2 = [x for x in list1 if x]", "question_id": 4842956, "baseline-bleu": 0.1546, "tranx-annot-bleu": 0.7166, "best-tranx-bleu": 0.1453, "best-tranx-bleu-rerank": 0.1046, "baseline": "[ ( x [ i ] for x in zip ( a , b ) ) ]", "tranx-annot": "list2 = [ x for x in list1 if x not in list1 ]", "best-tranx": "list2 = [ item for item in list1 for item in word . split ( ` : ` ) ]", "best-tranx-rerank": "list1 = [ [ str ( i ) for i in list1 ] for i in range ( list1 ) ]", "meteor-baseline": 0.2586, "meteor-tranx-annot": 0.95, "meteor-best-tranx": 0.481, "meteor-best-tranx-rerank": 0.25, "rougel-baseline": 0.4286, "rougel-tranx-annot": 0.88, "rougel-best-tranx": 0.4516, "rougel-best-tranx-rerank": 0.375}, {"intent": "Django view returning json without using template", "rewritten_intent": "Django response with JSON `data`", "snippet": "return HttpResponse(data, mimetype='application/json')", "question_id": 9262278, "baseline-bleu": 0.1267, "tranx-annot-bleu": 0.1421, "best-tranx-bleu": 0.0959, "best-tranx-bleu-rerank": 0.0959, "baseline": "data = pd . read_csv ( 'foo' , s = '<unk>' )", "tranx-annot": "data = json . dumps ( ` data ` )", "best-tranx": "data = json . loads ( request . POST . get ( ` data ` , ` { } ` ) )", "best-tranx-rerank": "data = json . loads ( request . POST . get ( ` data ` , ` { } ` ) )", "meteor-baseline": 0.3975, "meteor-tranx-annot": 0.3526, "meteor-best-tranx": 0.2703, "meteor-best-tranx-rerank": 0.2703, "rougel-baseline": 0.4375, "rougel-tranx-annot": 0.5833, "rougel-best-tranx": 0.4444, "rougel-best-tranx-rerank": 0.4444}, {"intent": "regex to get all text outside of brackets", "rewritten_intent": "get all text that is not enclosed within square brackets in string `example_str`", "snippet": "re.findall('(.*?)\\\\[.*?\\\\]', example_str)", "question_id": 17284947, "baseline-bleu": 0.2488, "tranx-annot-bleu": 0.1482, "best-tranx-bleu": 0.1287, "best-tranx-bleu-rerank": 0.6987, "baseline": "re . findall ( '[a-zA-Z]' , your_string )", "tranx-annot": "re . sub ( ` ` , ` ` , example_str )", "best-tranx": "example_str . find All ( ` div ` , href = re . compile ( ` \\ \\ s + ` ) )", "best-tranx-rerank": "re . findall ( ` \\ \\ [ ( . * ? ) \\ \\ ] ` , example_str )", "meteor-baseline": 0.3321, "meteor-tranx-annot": 0.3207, "meteor-best-tranx": 0.3429, "meteor-best-tranx-rerank": 0.8529, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.4571, "rougel-best-tranx": 0.5652, "rougel-best-tranx-rerank": 0.9302}, {"intent": "regex to get all text outside of brackets", "rewritten_intent": "Use a regex to get all text in a string `example_str` that is not surrounded by square brackets", "snippet": "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', example_str)", "question_id": 17284947, "baseline-bleu": 0.0249, "tranx-annot-bleu": 0.1261, "best-tranx-bleu": 0.3997, "best-tranx-bleu-rerank": 0.3997, "baseline": "driver . find_element_by_xpath ( 'unicode_escape' ) )", "tranx-annot": "re . sub ( ` ` , ` \\ \\ 1 ` , example_str )", "best-tranx": "re . findall ( ` \\ \\ [ ( . * ? ) \\ \\ ] ` , example_str )", "best-tranx-rerank": "re . findall ( ` \\ \\ [ ( . * ? ) \\ \\ ] ` , example_str )", "meteor-baseline": 0.1111, "meteor-tranx-annot": 0.3232, "meteor-best-tranx": 0.6525, "meteor-best-tranx-rerank": 0.6525, "rougel-baseline": 0.3158, "rougel-tranx-annot": 0.4545, "rougel-best-tranx": 0.8163, "rougel-best-tranx-rerank": 0.8163}, {"intent": "Matching multiple regex patterns with the alternation operator?", "rewritten_intent": "get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'", "snippet": "re.findall('\\\\(.+?\\\\)|\\\\w', '(zyx)bc')", "question_id": 14182339, "baseline-bleu": 0.0538, "tranx-annot-bleu": 0.2912, "best-tranx-bleu": 0.256, "best-tranx-bleu-rerank": 0.256, "baseline": "re . split ( '(ddd)' , 'aaa#SPACE#bbb#SPACE#bbb#SPACE#bbb#SPACE#ccc#SPACE#ccc#SPACE#ccc#SPACE#eee#SPACE#eee#SPACE#eee#SPACE#eee#SPACE#eee#SPACE#eee#SP", "tranx-annot": "driver . find_element_by_id ( ` ( zyx ) bc ` ) . write ( bool ( ` ( zyx ) bc ` ) )", "best-tranx": "print ( ` ` . join ( re . findall ( ` \u00ab ( [ \\ \\ s \\ \\ S ] * ? ) \u00bb ` , ( zyx ) bc ) ) )", "best-tranx-rerank": "print ( ` ` . join ( re . findall ( ` \u00ab ( [ \\ \\ s \\ \\ S ] * ? ) \u00bb ` , ( zyx ) bc ) ) )", "meteor-baseline": 0.1475, "meteor-tranx-annot": 0.3972, "meteor-best-tranx": 0.5746, "meteor-best-tranx-rerank": 0.5746, "rougel-baseline": 0.2022, "rougel-tranx-annot": 0.549, "rougel-best-tranx": 0.7097, "rougel-best-tranx-rerank": 0.7097}, {"intent": "Matching multiple regex patterns with the alternation operator?", "rewritten_intent": "match regex '\\\\((.*?)\\\\)|(\\\\w)' with string '(zyx)bc'", "snippet": "re.findall('\\\\((.*?)\\\\)|(\\\\w)', '(zyx)bc')", "question_id": 14182339, "baseline-bleu": 0.1556, "tranx-annot-bleu": 0.7324, "best-tranx-bleu": 0.9247, "best-tranx-bleu-rerank": 0.9247, "baseline": "re . compile ( '(ddd)' , 'aaa#SPACE#bbb#SPACE#bbb#SPACE#ccc#SPACE#<unk>' )", "tranx-annot": "print ( re . match ( ` \\ \\ ( ( . * ? ) \\ \\ ) | ( \\ \\ w ) ` , ` ( zyx ) bc ` ) . group ( 1 ) )", "best-tranx": "re . match ( ` \\ \\ ( ( . * ? ) \\ \\ ) | ( \\ \\ w ) ` , ` ( zyx ) bc ` )", "best-tranx-rerank": "re . match ( ` \\ \\ ( ( . * ? ) \\ \\ ) | ( \\ \\ w ) ` , ` ( zyx ) bc ` )", "meteor-baseline": 0.2857, "meteor-tranx-annot": 0.7816, "meteor-best-tranx": 0.9676, "meteor-best-tranx-rerank": 0.9676, "rougel-baseline": 0.3492, "rougel-tranx-annot": 0.8571, "rougel-best-tranx": 0.9677, "rougel-best-tranx-rerank": 0.9677}, {"intent": "Matching multiple regex patterns with the alternation operator?", "rewritten_intent": "match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`", "snippet": "re.findall('\\\\(.*?\\\\)|\\\\w', '(zyx)bc')", "question_id": 14182339, "baseline-bleu": 0.0726, "tranx-annot-bleu": 0.3723, "best-tranx-bleu": 0.2038, "best-tranx-bleu-rerank": 0.3272, "baseline": "cursor . execute ( 'INSERT#SPACE#INTO#SPACE#INTO#SPACE#INTO#SPACE#table#SPACE#(%s)' )", "tranx-annot": "re . findall ( ` | ` , ` ( zyx ) bc ` )", "best-tranx": "print ( ` ` . join ( filter ( re . match , ` | ` , ( zyx ) bc ) ) )", "best-tranx-rerank": "print ( ` ` . join ( filter ( str . isdigit , ` ( zyx ) bc ` ) ) )", "meteor-baseline": 0.175, "meteor-tranx-annot": 0.5519, "meteor-best-tranx": 0.3713, "meteor-best-tranx-rerank": 0.4544, "rougel-baseline": 0.2414, "rougel-tranx-annot": 0.7143, "rougel-best-tranx": 0.6667, "rougel-best-tranx-rerank": 0.6122}, {"intent": "Perform a string operation for every element in a Python list", "rewritten_intent": "formate each string cin list `elements` into pattern '%{0}%'", "snippet": "elements = ['%{0}%'.format(element) for element in elements]", "question_id": 7126916, "baseline-bleu": 0.0931, "tranx-annot-bleu": 0.3608, "best-tranx-bleu": 0.3431, "best-tranx-bleu-rerank": 0.3431, "baseline": "datetime . datetime . strptime ( '%d' , '%Y-%m-%d' )", "tranx-annot": "print ( re . findall ( ` % { 0 } % ` , elements ) )", "best-tranx": "re . findall ( ` % { 0 } % ` , elements )", "best-tranx-rerank": "re . findall ( ` % { 0 } % ` , elements )", "meteor-baseline": 0.1733, "meteor-tranx-annot": 0.5322, "meteor-best-tranx": 0.5404, "meteor-best-tranx-rerank": 0.5404, "rougel-baseline": 0.3333, "rougel-tranx-annot": 0.5946, "rougel-best-tranx": 0.6471, "rougel-best-tranx-rerank": 0.6471}, {"intent": "start python script as background process from within a python script", "rewritten_intent": "Open a background process 'background-process' with arguments 'arguments'", "snippet": "subprocess.Popen(['background-process', 'arguments'])", "question_id": 3595685, "baseline-bleu": 0.1115, "tranx-annot-bleu": 0.3774, "best-tranx-bleu": 0.1345, "best-tranx-bleu-rerank": 0.3394, "baseline": "soup . findAll ( '<unk>' , s = '<unk>' )", "tranx-annot": "os . open ( ` background - process ` , arguments )", "best-tranx": "print ( subprocess . check_output ( ` < unk > ` , shell = True ) )", "best-tranx-rerank": "print ( subprocess . Popen ( [ ` grep ` , ` f ` , arguments ] , stdout = background - process ) )", "meteor-baseline": 0.3264, "meteor-tranx-annot": 0.4769, "meteor-best-tranx": 0.2979, "meteor-best-tranx-rerank": 0.8625, "rougel-baseline": 0.4571, "rougel-tranx-annot": 0.7143, "rougel-best-tranx": 0.4242, "rougel-best-tranx-rerank": 0.7805}, {"intent": "Python dictionary: Get list of values for list of keys", "rewritten_intent": "get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'", "snippet": "[mydict[x] for x in mykeys]", "question_id": 18453566, "baseline-bleu": 0.081, "tranx-annot-bleu": 0.0852, "best-tranx-bleu": 0.0896, "best-tranx-bleu-rerank": 0.0724, "baseline": "sorted ( s , key = lambda x : x [ '<unk>' ] ) )", "tranx-annot": "[ k for k , v in list ( mydict . items ( ) ) if mydict [ i ] = = 1 ]", "best-tranx": "[ k for k , v in mydict . items ( ) if v = = 1 ]", "best-tranx-rerank": "[ k for k , v in list ( mydict . items ( ) ) if v = = ` mykeys ` ]", "meteor-baseline": 0.1835, "meteor-tranx-annot": 0.4207, "meteor-best-tranx": 0.2315, "meteor-best-tranx-rerank": 0.2655, "rougel-baseline": 0.2759, "rougel-tranx-annot": 0.4118, "rougel-best-tranx": 0.3571, "rougel-best-tranx-rerank": 0.3636}, {"intent": "Create dictionary from lists of keys and multiple values", "rewritten_intent": "convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary", "snippet": "dict([('Name', 'Joe'), ('Age', 22)])", "question_id": 12692135, "baseline-bleu": 0.0465, "tranx-annot-bleu": 0.7914, "best-tranx-bleu": 0.5526, "best-tranx-bleu-rerank": 0.5526, "baseline": "dict ( map ( [ 'a' , 'b' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , '", "tranx-annot": "dict ( zip ( * [ ( ` Name ` , ` Joe ` ) , ( ` Age ` , 22 ) ] ) )", "best-tranx": "dict ( map ( lambda s : s . split ( ` : ` ) , [ ( ` Name ` , ` Joe ` ) , ( ` Age ` , 22 ) ] ) )", "best-tranx-rerank": "dict ( map ( lambda s : s . split ( ` : ` ) , [ ( ` Name ` , ` Joe ` ) , ( ` Age ` , 22 ) ] ) )", "meteor-baseline": 0.2355, "meteor-tranx-annot": 0.9585, "meteor-best-tranx": 0.9137, "meteor-best-tranx-rerank": 0.9137, "rougel-baseline": 0.26, "rougel-tranx-annot": 0.9167, "rougel-best-tranx": 0.7458, "rougel-best-tranx-rerank": 0.7458}, {"intent": "Numpy - Averaging multiple columns of a 2D array", "rewritten_intent": "average each two columns of array `data`", "snippet": "data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)", "question_id": 14401047, "baseline-bleu": 0.1184, "tranx-annot-bleu": 0.1475, "best-tranx-bleu": 0.2559, "best-tranx-bleu-rerank": 0.2559, "baseline": "np . where ( [ 1 , 1 ] , axis = 1 )", "tranx-annot": "np . array ( data . columns ) . size ( axis = 0 ) . apply ( lambda x : x * 1 , reverse = ` True ` )", "best-tranx": "np . dstack ( np . meshgrid ( data , data ) , axis = 1 ) . mean ( )", "best-tranx-rerank": "np . dstack ( np . meshgrid ( data , data ) , axis = 1 ) . mean ( )", "meteor-baseline": 0.3717, "meteor-tranx-annot": 0.3222, "meteor-best-tranx": 0.3515, "meteor-best-tranx-rerank": 0.3515, "rougel-baseline": 0.5581, "rougel-tranx-annot": 0.5333, "rougel-best-tranx": 0.68, "rougel-best-tranx-rerank": 0.68}, {"intent": "Replace all quotes in a string with escaped quotes?", "rewritten_intent": "double backslash escape all double quotes in string `s`", "snippet": "print(s.encode('unicode-escape').replace('\"', '\\\\\"'))", "question_id": 18886596, "baseline-bleu": 0.1913, "tranx-annot-bleu": 0.0905, "best-tranx-bleu": 0.2377, "best-tranx-bleu-rerank": 0.2377, "baseline": "\"\"\"\"\"\" . join ( [ s . split ( ',' ) )", "tranx-annot": "struct . unpack ( ` f ` , s . read ( 200 ) )", "best-tranx": "re . sub ( ` ( . ) ` , ` \\ \\ 1 \\ \\ 1 ` , text . read ( ) )", "best-tranx-rerank": "re . sub ( ` ( . ) ` , ` \\ \\ 1 \\ \\ 1 ` , text . read ( ) )", "meteor-baseline": 0.499, "meteor-tranx-annot": 0.2552, "meteor-best-tranx": 0.3906, "meteor-best-tranx-rerank": 0.3906, "rougel-baseline": 0.7111, "rougel-tranx-annot": 0.4878, "rougel-best-tranx": 0.5882, "rougel-best-tranx-rerank": 0.5882}, {"intent": "Partitioning a string in Python by a regular expression", "rewritten_intent": "split a string into a list of words and whitespace", "snippet": "re.split('(\\\\W+)', s)", "question_id": 5932059, "baseline-bleu": 0.1339, "tranx-annot-bleu": 0.4714, "best-tranx-bleu": 0.1538, "best-tranx-bleu-rerank": 0.1505, "baseline": "\"\"\"\"\"\" . join ( '\\n' )", "tranx-annot": "print ( re . split ( ` ` , s ) )", "best-tranx": "re . findall ( ` < unk > ` , ` < unk > ` )", "best-tranx-rerank": "[ s . split ( ` \\ t ` ) for s in re . findall ( ` [ A - Za - z ` ] + ` , text ) ]", "meteor-baseline": 0.2013, "meteor-tranx-annot": 0.6519, "meteor-best-tranx": 0.3176, "meteor-best-tranx-rerank": 0.6013, "rougel-baseline": 0.4138, "rougel-tranx-annot": 0.8148, "rougel-best-tranx": 0.4516, "rougel-best-tranx-rerank": 0.5532}, {"intent": "plotting stacked barplots on a panda data frame", "rewritten_intent": null, "snippet": "df.plot(kind='barh', stacked=True)", "question_id": 9938130, "baseline-bleu": 0.1403, "tranx-annot-bleu": 0.1031, "best-tranx-bleu": 0.1241, "best-tranx-bleu-rerank": 0.1163, "baseline": "df . pivot_table ( '<unk>' , s = '<unk>' )", "tranx-annot": "pd . to_datetime ( pd . Series ( panda ) )", "best-tranx": "plt . gca ( ) . plot ( x = ` col_name_1 ` , y = ` col_name_2 ` , style = ` o ` )", "best-tranx-rerank": "pd . concat ( [ df1 , df2 ] , axis = 0 )", "meteor-baseline": 0.3695, "meteor-tranx-annot": 0.1095, "meteor-best-tranx": 0.4528, "meteor-best-tranx-rerank": 0.1786, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.24, "rougel-best-tranx": 0.45, "rougel-best-tranx-rerank": 0.3571}, {"intent": "How to reverse a dictionary in Python?", "rewritten_intent": "reverse the keys and values in a dictionary `myDictionary`", "snippet": "{i[1]: i[0] for i in list(myDictionary.items())}", "question_id": 35945473, "baseline-bleu": 0.2528, "tranx-annot-bleu": 0.3042, "best-tranx-bleu": 0.3042, "best-tranx-bleu-rerank": 0.3042, "baseline": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )", "tranx-annot": "dict ( ( v , k ) for k , v in my Dictionary . items ( ) )", "best-tranx": "dict ( ( v , k ) for k , v in my Dictionary . items ( ) )", "best-tranx-rerank": "dict ( ( v , k ) for k , v in my Dictionary . items ( ) )", "meteor-baseline": 0.3774, "meteor-tranx-annot": 0.4283, "meteor-best-tranx": 0.4283, "meteor-best-tranx-rerank": 0.4283, "rougel-baseline": 0.4091, "rougel-tranx-annot": 0.4762, "rougel-best-tranx": 0.4762, "rougel-best-tranx-rerank": 0.4762}, {"intent": "finding index of multiple items in a list", "rewritten_intent": "finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.", "snippet": "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]", "question_id": 30729735, "baseline-bleu": 0.0502, "tranx-annot-bleu": 0.0881, "best-tranx-bleu": 0.0735, "best-tranx-bleu-rerank": 0.1574, "baseline": "\"\"\"\"\"\" . join ( [ 'key' , '<unk>' ] )", "tranx-annot": "[ item [ ` how ` ] for item in ` my List ` for x in [ how ] ]", "best-tranx": "[ a for c in how if ` what ` in c ]", "best-tranx-rerank": "[ a for a , b in enumerate ( how ) if ` what ` in ` ` ]", "meteor-baseline": 0.1572, "meteor-tranx-annot": 0.232, "meteor-best-tranx": 0.2673, "meteor-best-tranx-rerank": 0.2977, "rougel-baseline": 0.3704, "rougel-tranx-annot": 0.4444, "rougel-best-tranx": 0.4348, "rougel-best-tranx-rerank": 0.6154}, {"intent": "find out if a Python object is a string", "rewritten_intent": "check if object `obj` is a string", "snippet": "isinstance(obj, str)", "question_id": 1303243, "baseline-bleu": 0.1261, "tranx-annot-bleu": 0.1858, "best-tranx-bleu": 0.0908, "best-tranx-bleu-rerank": 0.3672, "baseline": "\"\"\"\"\"\" . join ( chr )", "tranx-annot": "if obj = = n : pass", "best-tranx": "any ( x in obj for x in obj . split ( ` , ` ) )", "best-tranx-rerank": "if isinstance ( obj , ` ` ) : pass", "meteor-baseline": 0.1538, "meteor-tranx-annot": 0.082, "meteor-best-tranx": 0.2817, "meteor-best-tranx-rerank": 0.7562, "rougel-baseline": 0.2353, "rougel-tranx-annot": 0.1538, "rougel-best-tranx": 0.3478, "rougel-best-tranx-rerank": 0.625}, {"intent": "find out if a Python object is a string", "rewritten_intent": "check if object `o` is a string", "snippet": "isinstance(o, str)", "question_id": 1303243, "baseline-bleu": 0.3082, "tranx-annot-bleu": 0.1858, "best-tranx-bleu": 0.0908, "best-tranx-bleu-rerank": 0.3672, "baseline": "isinstance ( s )", "tranx-annot": "if o = = n : pass", "best-tranx": "any ( x in o for x in o . split ( ` , ` ) )", "best-tranx-rerank": "if isinstance ( o , ` ` ) : pass", "meteor-baseline": 0.4406, "meteor-tranx-annot": 0.082, "meteor-best-tranx": 0.2817, "meteor-best-tranx-rerank": 0.7562, "rougel-baseline": 0.6, "rougel-tranx-annot": 0.1538, "rougel-best-tranx": 0.3478, "rougel-best-tranx-rerank": 0.625}, {"intent": "find out if a Python object is a string", "rewritten_intent": "check if object `o` is a string", "snippet": "(type(o) is str)", "question_id": 1303243, "baseline-bleu": 0.1463, "tranx-annot-bleu": 0.161, "best-tranx-bleu": 0.0951, "best-tranx-bleu-rerank": 0.1783, "baseline": "isinstance ( s )", "tranx-annot": "if o = = n : pass", "best-tranx": "any ( x in o for x in o . split ( ` , ` ) )", "best-tranx-rerank": "if isinstance ( o , ` ` ) : pass", "meteor-baseline": 0.1316, "meteor-tranx-annot": 0.0633, "meteor-best-tranx": 0.2809, "meteor-best-tranx-rerank": 0.3117, "rougel-baseline": 0.3333, "rougel-tranx-annot": 0.1333, "rougel-best-tranx": 0.4, "rougel-best-tranx-rerank": 0.3333}, {"intent": "find out if a Python object is a string", "rewritten_intent": "check if object `o` is a string", "snippet": "isinstance(o, str)", "question_id": 1303243, "baseline-bleu": 0.3082, "tranx-annot-bleu": 0.1858, "best-tranx-bleu": 0.0908, "best-tranx-bleu-rerank": 0.3672, "baseline": "isinstance ( s )", "tranx-annot": "if o = = n : pass", "best-tranx": "any ( x in o for x in o . split ( ` , ` ) )", "best-tranx-rerank": "if isinstance ( o , ` ` ) : pass", "meteor-baseline": 0.4406, "meteor-tranx-annot": 0.082, "meteor-best-tranx": 0.2817, "meteor-best-tranx-rerank": 0.7562, "rougel-baseline": 0.6, "rougel-tranx-annot": 0.1538, "rougel-best-tranx": 0.3478, "rougel-best-tranx-rerank": 0.625}, {"intent": "find out if a Python object is a string", "rewritten_intent": "check if `obj_to_test` is a string", "snippet": "isinstance(obj_to_test, str)", "question_id": 1303243, "baseline-bleu": 0.1662, "tranx-annot-bleu": 0.1858, "best-tranx-bleu": 0.0908, "best-tranx-bleu-rerank": 0.0908, "baseline": "my_function . __name__", "tranx-annot": "if obj_to_test = = n : pass", "best-tranx": "any ( i in obj_to_test for i in obj_to_test . split ( ` , ` ) )", "best-tranx-rerank": "any ( e in obj_to_test for obj_to_test in obj_to_test . split ( ` , ` ) )", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.082, "meteor-best-tranx": 0.2817, "meteor-best-tranx-rerank": 0.2817, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.1538, "rougel-best-tranx": 0.3478, "rougel-best-tranx-rerank": 0.3478}, {"intent": "take the content of a list and append it to another list", "rewritten_intent": "append list `list1` to `list2`", "snippet": "list2.extend(list1)", "question_id": 8177079, "baseline-bleu": 0.0851, "tranx-annot-bleu": 0.4889, "best-tranx-bleu": 0.1139, "best-tranx-bleu-rerank": 0.1139, "baseline": "listone = list ( a , key = lambda x : x [ 1 ] )", "tranx-annot": "list2 . append ( list1 )", "best-tranx": "[ j for i in list1 for j in i ]", "best-tranx-rerank": "[ j for i in list1 for j in i ]", "meteor-baseline": 0.1429, "meteor-tranx-annot": 0.8067, "meteor-best-tranx": 0.0769, "meteor-best-tranx-rerank": 0.0769, "rougel-baseline": 0.1818, "rougel-tranx-annot": 0.8333, "rougel-best-tranx": 0.1176, "rougel-best-tranx-rerank": 0.1176}, {"intent": "take the content of a list and append it to another list", "rewritten_intent": "append list `mylog` to `list1`", "snippet": "list1.extend(mylog)", "question_id": 8177079, "baseline-bleu": 0.1349, "tranx-annot-bleu": 0.4889, "best-tranx-bleu": 0.1139, "best-tranx-bleu-rerank": 0.1139, "baseline": "del mylist [ : : - 1 ]", "tranx-annot": "list1 . append ( mylog )", "best-tranx": "[ j for i in mylog for j in i ]", "best-tranx-rerank": "[ j for i in mylog for j in i ]", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.8067, "meteor-best-tranx": 0.0769, "meteor-best-tranx-rerank": 0.0769, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.8333, "rougel-best-tranx": 0.1176, "rougel-best-tranx-rerank": 0.1176}, {"intent": "take the content of a list and append it to another list", "rewritten_intent": "append list `a` to `c`", "snippet": "c.extend(a)", "question_id": 8177079, "baseline-bleu": 0.1775, "tranx-annot-bleu": 0.4889, "best-tranx-bleu": 0.1139, "best-tranx-bleu-rerank": 0.1139, "baseline": "a . remove ( '\\n' )", "tranx-annot": "c . append ( a )", "best-tranx": "[ j for i in a for j in i ]", "best-tranx-rerank": "[ j for i in a for j in i ]", "meteor-baseline": 0.3175, "meteor-tranx-annot": 0.8067, "meteor-best-tranx": 0.0769, "meteor-best-tranx-rerank": 0.0769, "rougel-baseline": 0.5333, "rougel-tranx-annot": 0.8333, "rougel-best-tranx": 0.1176, "rougel-best-tranx-rerank": 0.1176}, {"intent": "take the content of a list and append it to another list", "rewritten_intent": "append items in list `mylog` to `list1`", "snippet": "for line in mylog:\n    list1.append(line)", "question_id": 8177079, "baseline-bleu": 0.1051, "tranx-annot-bleu": 0.1889, "best-tranx-bleu": 0.1785, "best-tranx-bleu-rerank": 0.1853, "baseline": "[ item [ i : i + n ] for item in queryresult ]", "tranx-annot": "for item in mylog : pass", "best-tranx": "[ list ( y ) for y in mylog ]", "best-tranx-rerank": "list1 = [ list1 ( ) for list1 in mylog ]", "meteor-baseline": 0.1327, "meteor-tranx-annot": 0.3571, "meteor-best-tranx": 0.3413, "meteor-best-tranx-rerank": 0.3876, "rougel-baseline": 0.24, "rougel-tranx-annot": 0.4706, "rougel-best-tranx": 0.4762, "rougel-best-tranx-rerank": 0.5455}, {"intent": "Appending tuples to lists", "rewritten_intent": "append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`", "snippet": "b.append((a[0][0], a[0][2]))", "question_id": 4126227, "baseline-bleu": 0.084, "tranx-annot-bleu": 0.0498, "best-tranx-bleu": 0.097, "best-tranx-bleu-rerank": 0.0993, "baseline": "[ i for i , j in zip ( a , b ) ]", "tranx-annot": "[ x for x in a if 1 in item ]", "best-tranx": "[ ( x + y ) for x , y in zip ( a , b ) ]", "best-tranx-rerank": "[ ( a + b ) for a , b in zip ( a , b ) ]", "meteor-baseline": 0.1651, "meteor-tranx-annot": 0.0718, "meteor-best-tranx": 0.2083, "meteor-best-tranx-rerank": 0.2315, "rougel-baseline": 0.3889, "rougel-tranx-annot": 0.1818, "rougel-best-tranx": 0.45, "rougel-best-tranx-rerank": 0.5}, {"intent": "Where do I get a SECRET_KEY for Flask?", "rewritten_intent": "Initialize `SECRET_KEY` in flask config with `Your_secret_string `", "snippet": "app.config['SECRET_KEY'] = 'Your_secret_string'", "question_id": 34902378, "baseline-bleu": 0.1151, "tranx-annot-bleu": 0.1081, "best-tranx-bleu": 0.1761, "best-tranx-bleu-rerank": 0.1761, "baseline": "soup . find_element_by_id ( some__id_id' ) . click ( )", "tranx-annot": "SECRET_KEY = SECRET_KEY . xpath ( )", "best-tranx": "SECRET_KEY = models . Foreign Key ( ` Your_secret_string ` , unique = True )", "best-tranx-rerank": "SECRET_KEY = models . Foreign Key ( ` Your_secret_string ` , unique = True )", "meteor-baseline": 0.084, "meteor-tranx-annot": 0.1304, "meteor-best-tranx": 0.4155, "meteor-best-tranx-rerank": 0.4155, "rougel-baseline": 0.1739, "rougel-tranx-annot": 0.3158, "rougel-best-tranx": 0.4444, "rougel-best-tranx-rerank": 0.4444}, {"intent": "How to unpack a Series of tuples in Pandas?", "rewritten_intent": "unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2'", "snippet": "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)", "question_id": 22799300, "baseline-bleu": 0.1058, "tranx-annot-bleu": 0.3603, "best-tranx-bleu": 0.5496, "best-tranx-bleu-rerank": 0.5496, "baseline": "df [ 'BrandName' ] = df [ 'a' ] = df [ 'a' ] . str . split ( ',' ) ]", "tranx-annot": "Data Frame ( enumerate ( var_0 ) ) . unpack ( ` out - 1 ` , ` out - 2 ` )", "best-tranx": "pd . Data Frame ( data , columns = [ ` out - 1 ` , ` out - 2 ` ] )", "best-tranx-rerank": "pd . Data Frame ( data , columns = [ ` out - 1 ` , ` out - 2 ` ] )", "meteor-baseline": 0.2405, "meteor-tranx-annot": 0.4565, "meteor-best-tranx": 0.5785, "meteor-best-tranx-rerank": 0.5785, "rougel-baseline": 0.4062, "rougel-tranx-annot": 0.6429, "rougel-best-tranx": 0.7857, "rougel-best-tranx-rerank": 0.7857}, {"intent": "How to find the position of an element in a list , in Python?", "rewritten_intent": "find the index of an element 'MSFT' in a list `stocks_list`", "snippet": "[x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']", "question_id": 1762484, "baseline-bleu": 0.0756, "tranx-annot-bleu": 0.238, "best-tranx-bleu": 0.3253, "best-tranx-bleu-rerank": 0.3253, "baseline": "pd . concat ( [ 'a' , 'f' ] )", "tranx-annot": "[ stocks_list [ i ] for i in range ( 0 , len ( stocks_list ) , 1 ) ]", "best-tranx": "[ i for i , j in enumerate ( stocks_list ) if i = = ` MSFT ` ]", "best-tranx-rerank": "[ i for i , j in enumerate ( stocks_list ) if i = = ` MSFT ` ]", "meteor-baseline": 0.1929, "meteor-tranx-annot": 0.4672, "meteor-best-tranx": 0.5303, "meteor-best-tranx-rerank": 0.5303, "rougel-baseline": 0.3243, "rougel-tranx-annot": 0.6512, "rougel-best-tranx": 0.619, "rougel-best-tranx-rerank": 0.619}, {"intent": "Is it possible to wrap the text of xticks in matplotlib in python?", "rewritten_intent": "rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable", "snippet": "ax.set_xticklabels(labels, rotation=45)", "question_id": 3464359, "baseline-bleu": 0.1051, "tranx-annot-bleu": 0.1554, "best-tranx-bleu": 0.0614, "best-tranx-bleu-rerank": 0.0614, "baseline": "session . query ( '?' ) [ : : - 1 ]", "tranx-annot": "ax . xtick ( lambda x : min ( x ) )", "best-tranx": "plt . plot ( list ( range ( 0 , len ( ax ) + 1 ) ) , vmin = 0 , vmax = 15 )", "best-tranx-rerank": "plt . plot ( list ( range ( 0 , len ( ax ) + 1 ) ) , vmin = 0 , vmax = 15 )", "meteor-baseline": 0.1442, "meteor-tranx-annot": 0.3094, "meteor-best-tranx": 0.2564, "meteor-best-tranx-rerank": 0.2564, "rougel-baseline": 0.25, "rougel-tranx-annot": 0.3636, "rougel-best-tranx": 0.3243, "rougel-best-tranx-rerank": 0.3243}, {"intent": "How to remove symbols from a string with Python?", "rewritten_intent": "remove symbols from a string `s`", "snippet": "re.sub('[^\\\\w]', ' ', s)", "question_id": 875968, "baseline-bleu": 0.1167, "tranx-annot-bleu": 0.2416, "best-tranx-bleu": 0.211, "best-tranx-bleu-rerank": 0.211, "baseline": "\"\"\"\"\"\" . join ( s . split ( ) )", "tranx-annot": "s . replace ( ` \\ \\ ` , ` ` )", "best-tranx": "s . replace ( ` and ` , ` ` )", "best-tranx-rerank": "s . replace ( ` and ` , ` ` )", "meteor-baseline": 0.3006, "meteor-tranx-annot": 0.5106, "meteor-best-tranx": 0.3978, "meteor-best-tranx-rerank": 0.3978, "rougel-baseline": 0.4848, "rougel-tranx-annot": 0.7333, "rougel-best-tranx": 0.6207, "rougel-best-tranx-rerank": 0.6207}, {"intent": "get current directory - Python", "rewritten_intent": "Get the current directory of a script", "snippet": "os.path.basename(os.path.dirname(os.path.realpath(__file__)))", "question_id": 31258561, "baseline-bleu": 0.5113, "tranx-annot-bleu": 0.5113, "best-tranx-bleu": 0.7548, "best-tranx-bleu-rerank": 0.7548, "baseline": "os . path . dirname ( os . path . abspath ( __file__ ) )", "tranx-annot": "os . path . dirname ( os . path . abspath ( __file__ ) )", "best-tranx": "print ( os . path . dirname ( os . path . realpath ( __file__ ) ) )", "best-tranx-rerank": "print ( os . path . dirname ( os . path . realpath ( __file__ ) ) )", "meteor-baseline": 0.654, "meteor-tranx-annot": 0.654, "meteor-best-tranx": 0.787, "meteor-best-tranx-rerank": 0.787, "rougel-baseline": 0.7568, "rougel-tranx-annot": 0.7568, "rougel-best-tranx": 0.85, "rougel-best-tranx-rerank": 0.85}, {"intent": "Regex and Octal Characters", "rewritten_intent": "Find octal characters matches from a string `str` using regex", "snippet": "print(re.findall(\"'\\\\\\\\[0-7]{1,3}'\", str))", "question_id": 34750084, "baseline-bleu": 0.1936, "tranx-annot-bleu": 0.0838, "best-tranx-bleu": 0.2422, "best-tranx-bleu-rerank": 0.2422, "baseline": "re . findall ( '([a-zA-Z]+' , re . UNICODE )", "tranx-annot": "re = re = pattern = ` ` . join ( c for c in str if c . isdigit ( ) )", "best-tranx": "re . findall ( ` \\ n \\ \\ s * \\ n ` , str )", "best-tranx-rerank": "re . findall ( ` \\ n \\ \\ s * \\ n ` , str )", "meteor-baseline": 0.3124, "meteor-tranx-annot": 0.2503, "meteor-best-tranx": 0.4455, "meteor-best-tranx-rerank": 0.4455, "rougel-baseline": 0.4898, "rougel-tranx-annot": 0.3529, "rougel-best-tranx": 0.5778, "rougel-best-tranx-rerank": 0.5778}, {"intent": "Python split string based on regex", "rewritten_intent": "split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\\\b)'", "snippet": "re.split('[ ](?=[A-Z]+\\\\b)', input)", "question_id": 13209288, "baseline-bleu": 0.0524, "tranx-annot-bleu": 1.0, "best-tranx-bleu": 1.0, "best-tranx-bleu-rerank": 1.0, "baseline": "re . findall ( '\\\\[[^\\\\(this)' , 'aaa#SPACE#bbb#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#", "tranx-annot": "re . split ( ` [ ] ( ? = [ A - Z ] + \\ \\ b ) ` , input )", "best-tranx": "re . split ( ` [ ] ( ? = [ A - Z ] + \\ \\ b ) ` , input )", "best-tranx-rerank": "re . split ( ` [ ] ( ? = [ A - Z ] + \\ \\ b ) ` , input )", "meteor-baseline": 0.3003, "meteor-tranx-annot": 1.0, "meteor-best-tranx": 1.0, "meteor-best-tranx-rerank": 1.0, "rougel-baseline": 0.2609, "rougel-tranx-annot": 1.0, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 1.0}, {"intent": "Python split string based on regex", "rewritten_intent": "Split string `input` at every space followed by an upper-case letter", "snippet": "re.split('[ ](?=[A-Z])', input)", "question_id": 13209288, "baseline-bleu": 0.0966, "tranx-annot-bleu": 0.0923, "best-tranx-bleu": 0.0908, "best-tranx-bleu-rerank": 0.0993, "baseline": "print ( s . decode ( 'unicode-escape' ) )", "tranx-annot": "[ input [ i : i + input ] for i in range ( 0 , len ( input ) , 2 ) ]", "best-tranx": "input . split ( ` ` )", "best-tranx-rerank": "` ` ` ` ` ` . split ( )", "meteor-baseline": 0.2073, "meteor-tranx-annot": 0.2451, "meteor-best-tranx": 0.2565, "meteor-best-tranx-rerank": 0.2244, "rougel-baseline": 0.4848, "rougel-tranx-annot": 0.4545, "rougel-best-tranx": 0.5185, "rougel-best-tranx-rerank": 0.4}, {"intent": "Using Python Requests to send file and JSON in single request", "rewritten_intent": "send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`", "snippet": "r = requests.post(url, files=files, headers=headers, data=data)", "question_id": 24642040, "baseline-bleu": 0.0701, "tranx-annot-bleu": 0.1141, "best-tranx-bleu": 0.2283, "best-tranx-bleu-rerank": 0.2283, "baseline": "driver . find_element_by_css_selector ( 'button' , 'rb' ) )", "tranx-annot": "os . path . send ( files , url , metadata = ( ` headers ` , ` data ` ) )", "best-tranx": "r = requests . get ( files , auth = ( ` url ` , ` headers ` ) )", "best-tranx-rerank": "r = requests . get ( files , auth = ( ` url ` , ` headers ` ) )", "meteor-baseline": 0.1036, "meteor-tranx-annot": 0.3653, "meteor-best-tranx": 0.4264, "meteor-best-tranx-rerank": 0.4264, "rougel-baseline": 0.2424, "rougel-tranx-annot": 0.5238, "rougel-best-tranx": 0.6, "rougel-best-tranx-rerank": 0.6}, {"intent": "How to write bytes to a file in Python 3 without knowing the encoding?", "rewritten_intent": "write bytes `bytes_` to a file `filename` in python 3", "snippet": "open('filename', 'wb').write(bytes_)", "question_id": 4290716, "baseline-bleu": 0.1524, "tranx-annot-bleu": 0.4047, "best-tranx-bleu": 0.2276, "best-tranx-bleu-rerank": 0.2276, "baseline": "print ( os . args . split ( 't' ) )", "tranx-annot": "filename . read ( ) . write ( [ ` filename ` , ` filename ` ] )", "best-tranx": "filename . write ( struct . pack ( ` < I ` , open ( bytes_ ) ) )", "best-tranx-rerank": "filename . write ( struct . pack ( ` < I ` , open ( bytes_ ) ) )", "meteor-baseline": 0.324, "meteor-tranx-annot": 0.7065, "meteor-best-tranx": 0.4791, "meteor-best-tranx-rerank": 0.4791, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.7273, "rougel-best-tranx": 0.7059, "rougel-best-tranx-rerank": 0.7059}, {"intent": "Mapping dictionary value to list", "rewritten_intent": "get a list from a list `lst` with values mapped into a dictionary `dct`", "snippet": "[dct[k] for k in lst]", "question_id": 33078554, "baseline-bleu": 0.0953, "tranx-annot-bleu": 0.0828, "best-tranx-bleu": 0.0677, "best-tranx-bleu-rerank": 0.0677, "baseline": "[ k : v for k , v in list ( d . items ( ) ) if v != 0 ]", "tranx-annot": "dct = dict ( ( k , v ) for k , v in list ( dct . items ( ) ) )", "best-tranx": "dict ( ( k . get ( ` key ` ) , v ) for k , v in list ( dct . values ( ) ) )", "best-tranx-rerank": "dict ( ( k . get ( ` key ` ) , v ) for k , v in list ( dct . values ( ) ) )", "meteor-baseline": 0.4523, "meteor-tranx-annot": 0.3292, "meteor-best-tranx": 0.3153, "meteor-best-tranx-rerank": 0.3153, "rougel-baseline": 0.3636, "rougel-tranx-annot": 0.303, "rougel-best-tranx": 0.2632, "rougel-best-tranx-rerank": 0.2632}, {"intent": "How to find duplicate names using pandas?", "rewritten_intent": "find duplicate names in column 'name' of the dataframe `x`", "snippet": "x.set_index('name').index.get_duplicates()", "question_id": 15247628, "baseline-bleu": 0.1012, "tranx-annot-bleu": 0.2725, "best-tranx-bleu": 0.4745, "best-tranx-bleu-rerank": 0.61, "baseline": "pd . concat ( [ '<unk>' , 'same2' ] )", "tranx-annot": "x . update ( lambda name : x . find ( ` name ` ) , axis = 1 )", "best-tranx": "x . set_index ( ` name ` ) . agg ( lambda x : x . tolist ( ) )", "best-tranx-rerank": "x . set_index ( ` name ` ) . unstack ( level = 0 )", "meteor-baseline": 0.1761, "meteor-tranx-annot": 0.5675, "meteor-best-tranx": 0.6485, "meteor-best-tranx-rerank": 0.7168, "rougel-baseline": 0.3333, "rougel-tranx-annot": 0.5882, "rougel-best-tranx": 0.7059, "rougel-best-tranx-rerank": 0.7586}, {"intent": "Truncating floats in Python", "rewritten_intent": "truncate float 1.923328437452 to 3 decimal places", "snippet": "round(1.923328437452, 3)", "question_id": 783897, "baseline-bleu": 0.0507, "tranx-annot-bleu": 0.134, "best-tranx-bleu": 1.0, "best-tranx-bleu-rerank": 1.0, "baseline": "datetime . datetime . strptime ( 'January#SPACE#11,#SPACE#%Y#SPACE#%Y#SPACE#%Y' )", "tranx-annot": "int ( float ( int ( float ( range ( 3 ) ) ) ) , 3 )", "best-tranx": "round ( 1 . 923328437452 , 3 )", "best-tranx-rerank": "round ( 1 . 923328437452 , 3 )", "meteor-baseline": 0.1961, "meteor-tranx-annot": 0.4167, "meteor-best-tranx": 0.999, "meteor-best-tranx-rerank": 0.999, "rougel-baseline": 0.2105, "rougel-tranx-annot": 0.3077, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 1.0}, {"intent": "Order list by date (String and datetime)", "rewritten_intent": "sort list `li` in descending order based on the date value in second element of each list in list `li`", "snippet": "sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)", "question_id": 22859493, "baseline-bleu": 0.198, "tranx-annot-bleu": 0.1205, "best-tranx-bleu": 0.0338, "best-tranx-bleu-rerank": 0.0338, "baseline": "sorted ( list ( x , key = lambda x : x [ 1 ] ) )", "tranx-annot": "li . sort ( key = operator . itemgetter ( 1 ) , reverse = ` True ` )", "best-tranx": "li . sort ( key = operator . itemgetter ( 1 ) )", "best-tranx-rerank": "li . sort ( key = operator . itemgetter ( 1 ) )", "meteor-baseline": 0.4142, "meteor-tranx-annot": 0.4123, "meteor-best-tranx": 0.1992, "meteor-best-tranx-rerank": 0.1992, "rougel-baseline": 0.5882, "rougel-tranx-annot": 0.566, "rougel-best-tranx": 0.383, "rougel-best-tranx-rerank": 0.383}, {"intent": "Move radial tick labels on a polar plot in matplotlib", "rewritten_intent": "place the radial ticks in plot `ax` at 135 degrees", "snippet": "ax.set_rlabel_position(135)", "question_id": 29394552, "baseline-bleu": 0.1554, "tranx-annot-bleu": 0.1051, "best-tranx-bleu": 0.1018, "best-tranx-bleu-rerank": 0.1018, "baseline": "ax . set_xlabel ( 'Temp' , s = False )", "tranx-annot": "place ( ax , ax , * * ( 0 , 1 ) )", "best-tranx": "ax . errorbar ( x , ax , yerr = err , ecolor = ` ax ` )", "best-tranx-rerank": "ax . errorbar ( x , ax , yerr = err , ecolor = ` ax ` )", "meteor-baseline": 0.4782, "meteor-tranx-annot": 0.2206, "meteor-best-tranx": 0.2778, "meteor-best-tranx-rerank": 0.2778, "rougel-baseline": 0.4444, "rougel-tranx-annot": 0.3, "rougel-best-tranx": 0.3333, "rougel-best-tranx-rerank": 0.3333}, {"intent": "How to check if a path is absolute path or relative path in cross platform way with Python?", "rewritten_intent": "check if path `my_path` is an absolute path", "snippet": "os.path.isabs(my_path)", "question_id": 3320406, "baseline-bleu": 0.249, "tranx-annot-bleu": 0.5969, "best-tranx-bleu": 0.3689, "best-tranx-bleu-rerank": 0.3689, "baseline": "os . path . dirname ( os . path . abspath ( __file__ ) )", "tranx-annot": "os . path . abspath ( my_path )", "best-tranx": "os . my_path . abspath ( my_path )", "best-tranx-rerank": "os . my_path . abspath ( my_path )", "meteor-baseline": 0.6466, "meteor-tranx-annot": 0.8648, "meteor-best-tranx": 0.7031, "meteor-best-tranx-rerank": 0.7031, "rougel-baseline": 0.5217, "rougel-tranx-annot": 0.875, "rougel-best-tranx": 0.75, "rougel-best-tranx-rerank": 0.75}, {"intent": "Counting the Number of keywords in a dictionary in python", "rewritten_intent": "get number of keys in dictionary `yourdict`", "snippet": "len(list(yourdict.keys()))", "question_id": 2212433, "baseline-bleu": 0.4367, "tranx-annot-bleu": 0.2187, "best-tranx-bleu": 0.5969, "best-tranx-bleu-rerank": 0.5969, "baseline": "print ( list ( mydict . items ( ) ) )", "tranx-annot": "sum ( len ( v ) for v in yourdict . values ( ) )", "best-tranx": "sum ( i for i in list ( yourdict . keys ( ) ) )", "best-tranx-rerank": "sum ( i for i in list ( yourdict . keys ( ) ) )", "meteor-baseline": 0.7081, "meteor-tranx-annot": 0.6037, "meteor-best-tranx": 0.8737, "meteor-best-tranx-rerank": 0.8737, "rougel-baseline": 0.7273, "rougel-tranx-annot": 0.6923, "rougel-best-tranx": 0.7692, "rougel-best-tranx-rerank": 0.7692}, {"intent": "Counting the Number of keywords in a dictionary in python", "rewritten_intent": "count the number of keys in dictionary `yourdictfile`", "snippet": "len(set(open(yourdictfile).read().split()))", "question_id": 2212433, "baseline-bleu": 0.1887, "tranx-annot-bleu": 0.1694, "best-tranx-bleu": 0.1694, "best-tranx-bleu-rerank": 0.1694, "baseline": "list ( iter ( mydict . items ( ) ) )", "tranx-annot": "sum ( len ( v ) for v in yourdictfile . values ( ) )", "best-tranx": "sum ( len ( v ) for v in yourdictfile . values ( ) )", "best-tranx-rerank": "sum ( len ( v ) for v in yourdictfile . values ( ) )", "meteor-baseline": 0.3669, "meteor-tranx-annot": 0.3299, "meteor-best-tranx": 0.3299, "meteor-best-tranx-rerank": 0.3299, "rougel-baseline": 0.4828, "rougel-tranx-annot": 0.5455, "rougel-best-tranx": 0.5455, "rougel-best-tranx-rerank": 0.5455}, {"intent": "Pandas dataframe get first row of each group", "rewritten_intent": "pandas dataframe get first row of each group by 'id'", "snippet": "df.groupby('id').first()", "question_id": 20067636, "baseline-bleu": 0.0963, "tranx-annot-bleu": 0.0924, "best-tranx-bleu": 0.1741, "best-tranx-bleu-rerank": 0.1099, "baseline": "df [ 'value' ] = df [ 'value' ] == 'value' )", "tranx-annot": "df [ ` id ` ] = df [ ` id ` ] . apply ( lambda x : x [ 0 ] , df [ 0 ] )", "best-tranx": "pd . concat ( [ df . head ( 1 ) , pd . Time Grouper ( freq = ` id ` ) ] )", "best-tranx-rerank": "pd . concat ( [ df . head ( 1 ) , pd . Data Frame ( df [ ` id ` ] . tolist ( ) ) ] )", "meteor-baseline": 0.1575, "meteor-tranx-annot": 0.4178, "meteor-best-tranx": 0.6707, "meteor-best-tranx-rerank": 0.5391, "rougel-baseline": 0.2581, "rougel-tranx-annot": 0.3415, "rougel-best-tranx": 0.5405, "rougel-best-tranx-rerank": 0.4762}, {"intent": "Splitting a list in a Pandas cell into multiple columns", "rewritten_intent": "split a list in first column  into multiple columns keeping other columns as well in pandas data frame", "snippet": "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)", "question_id": 40924332, "baseline-bleu": 0.0813, "tranx-annot-bleu": 0.261, "best-tranx-bleu": 0.261, "best-tranx-bleu-rerank": 0.261, "baseline": "df . groupby ( [ 'stock' , 'B' ] , inplace = True )", "tranx-annot": "pd . concat ( [ a , b ] , axis = 1 )", "best-tranx": "pd . concat ( [ df1 , df2 ] , axis = 1 )", "best-tranx-rerank": "pd . concat ( [ df1 , df2 ] , axis = 1 )", "meteor-baseline": 0.2237, "meteor-tranx-annot": 0.4377, "meteor-best-tranx": 0.4377, "meteor-best-tranx-rerank": 0.4377, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.5854, "rougel-best-tranx": 0.5854, "rougel-best-tranx-rerank": 0.5854}, {"intent": "Extracting specific src attributes from script tags", "rewritten_intent": "extract attributes 'src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"' from string `data`", "snippet": "re.findall('src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"', data)", "question_id": 30759776, "baseline-bleu": 0.0788, "tranx-annot-bleu": 0.0758, "best-tranx-bleu": 0.8354, "best-tranx-bleu-rerank": 0.8354, "baseline": "re . sub ( '[a]' , 'aaa#SPACE#' , '#SPACE#' )", "tranx-annot": "data = ` ` . join ( operator . split ( ` ` ) for item in data . split ( ) )", "best-tranx": "data . startswith ( ` src = ` js / ( [ ^ ` ] * \\ \\ bjquery \\ \\ b [ ^ ` ] * ) ` ` )", "best-tranx-rerank": "data . pop ( ` src = ` js / ( [ ^ ` ] * \\ \\ bjquery \\ \\ b [ ^ ` ] * ) ` ` )", "meteor-baseline": 0.2465, "meteor-tranx-annot": 0.2146, "meteor-best-tranx": 0.9136, "meteor-best-tranx-rerank": 0.9136, "rougel-baseline": 0.4643, "rougel-tranx-annot": 0.3929, "rougel-best-tranx": 0.9375, "rougel-best-tranx-rerank": 0.9375}, {"intent": "Most efficient way to convert items of a list to int and sum them up", "rewritten_intent": "Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`", "snippet": "sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])", "question_id": 25388796, "baseline-bleu": 0.0818, "tranx-annot-bleu": 0.5519, "best-tranx-bleu": 0.5519, "best-tranx-bleu-rerank": 0.5519, "baseline": "set ( [ 'a' , 'b' , 'b' , 'b' ] )", "tranx-annot": "sum ( sum ( x ) for x in [ ` ` , ` 3 . 4 ` , ` ` , ` ` , ` 1 . 0 ` ] )", "best-tranx": "sum ( sum ( x ) for x in [ ` ` , ` 3 . 4 ` , ` ` , ` ` , ` 1 . 0 ` ] )", "best-tranx-rerank": "sum ( sum ( x ) for x in [ ` ` , ` 3 . 4 ` , ` ` , ` ` , ` 1 . 0 ` ] )", "meteor-baseline": 0.3406, "meteor-tranx-annot": 0.6873, "meteor-best-tranx": 0.6873, "meteor-best-tranx-rerank": 0.6873, "rougel-baseline": 0.4762, "rougel-tranx-annot": 0.7733, "rougel-best-tranx": 0.7733, "rougel-best-tranx-rerank": 0.7733}, {"intent": "How to use subprocess when multiple arguments contain spaces?", "rewritten_intent": "Call a subprocess with arguments `c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat` that may contain spaces", "snippet": "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])", "question_id": 804995, "baseline-bleu": 0.0513, "tranx-annot-bleu": 0.5607, "best-tranx-bleu": 0.7414, "best-tranx-bleu-rerank": 0.7414, "baseline": "os . system ( '#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>' )", "tranx-annot": "l = map ( lambda x : map ( int , x . split ( ` c : \\ \\ Program Files \\ \\ VMware \\ \\ VMware Server \\ \\ vmware - cmd . bat ` ) ) )", "best-tranx": "subprocess . call ( ` c : \\ \\ Program Files \\ \\ VMware \\ \\ VMware Server \\ \\ vmware - cmd . bat ` , shell = True )", "best-tranx-rerank": "subprocess . call ( ` c : \\ \\ Program Files \\ \\ VMware \\ \\ VMware Server \\ \\ vmware - cmd . bat ` , shell = True )", "meteor-baseline": 0.0856, "meteor-tranx-annot": 0.8289, "meteor-best-tranx": 0.8888, "meteor-best-tranx-rerank": 0.8888, "rougel-baseline": 0.1667, "rougel-tranx-annot": 0.7246, "rougel-best-tranx": 0.8667, "rougel-best-tranx-rerank": 0.8667}, {"intent": "how to reverse a priority queue in Python without using classes?", "rewritten_intent": "reverse a priority queue `q` in python without using classes", "snippet": "q.put((-n, n))", "question_id": 26441253, "baseline-bleu": 0.0951, "tranx-annot-bleu": 0.1499, "best-tranx-bleu": 0.1088, "best-tranx-bleu-rerank": 0.1088, "baseline": "print ( [ ( x , 16 ) for x in range ( 100 ) ] )", "tranx-annot": "datetime . datetime . now ( ) . click ( )", "best-tranx": "super ( q , self ) . __init__ ( * args , * * kwargs )", "best-tranx-rerank": "super ( q , self ) . __init__ ( * args , * * kwargs )", "meteor-baseline": 0.2155, "meteor-tranx-annot": 0.2273, "meteor-best-tranx": 0.3043, "meteor-best-tranx-rerank": 0.3043, "rougel-baseline": 0.3571, "rougel-tranx-annot": 0.4545, "rougel-best-tranx": 0.5185, "rougel-best-tranx-rerank": 0.5185}, {"intent": "pandas plot dataframe barplot with colors by category", "rewritten_intent": "make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`", "snippet": "df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])", "question_id": 18897261, "baseline-bleu": 0.0357, "tranx-annot-bleu": 0.0446, "best-tranx-bleu": 0.1013, "best-tranx-bleu-rerank": 0.0847, "baseline": "df . groupby ( [ 'a' , '<unk>' ] )", "tranx-annot": "df = df [ ( df [ group ] = = ` color ` ) & ( df [ color ] = = color ) ]", "best-tranx": "df . groupby ( [ ` group ` , ` color ` ] ) . agg ( lambda x : x . barplot ( ) )", "best-tranx-rerank": "df . groupby ( [ ` group ` , ` color ` ] ) . order_by ( ` color ` )", "meteor-baseline": 0.2183, "meteor-tranx-annot": 0.1448, "meteor-best-tranx": 0.2236, "meteor-best-tranx-rerank": 0.1689, "rougel-baseline": 0.3492, "rougel-tranx-annot": 0.3562, "rougel-best-tranx": 0.3562, "rougel-best-tranx-rerank": 0.4412}, {"intent": "Python regex for MD5 hash", "rewritten_intent": "find all matches of regex pattern '([a-fA-F\\\\d]{32})' in string `data`", "snippet": "re.findall('([a-fA-F\\\\d]{32})', data)", "question_id": 373194, "baseline-bleu": 0.2684, "tranx-annot-bleu": 1.0, "best-tranx-bleu": 1.0, "best-tranx-bleu-rerank": 1.0, "baseline": "re . findall ( '[a-zA-Z]' , '' , text )", "tranx-annot": "re . findall ( ` ( [ a - f A - F \\ \\ d ] { 32 } ) ` , data )", "best-tranx": "re . findall ( ` ( [ a - f A - F \\ \\ d ] { 32 } ) ` , data )", "best-tranx-rerank": "re . findall ( ` ( [ a - f A - F \\ \\ d ] { 32 } ) ` , data )", "meteor-baseline": 0.5181, "meteor-tranx-annot": 1.0, "meteor-best-tranx": 1.0, "meteor-best-tranx-rerank": 1.0, "rougel-baseline": 0.6222, "rougel-tranx-annot": 1.0, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 1.0}, {"intent": "Getting the length of an array", "rewritten_intent": "Get the length of list `my_list`", "snippet": "len(my_list)", "question_id": 518021, "baseline-bleu": 0.1858, "tranx-annot-bleu": 1.0, "best-tranx-bleu": 1.0, "best-tranx-bleu-rerank": 1.0, "baseline": "my_list [ : : - 10 ]", "tranx-annot": "len ( my_list )", "best-tranx": "len ( my_list )", "best-tranx-rerank": "len ( my_list )", "meteor-baseline": 0.1163, "meteor-tranx-annot": 0.9922, "meteor-best-tranx": 0.9922, "meteor-best-tranx-rerank": 0.9922, "rougel-baseline": 0.1818, "rougel-tranx-annot": 1.0, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 1.0}, {"intent": "Getting the length of an array", "rewritten_intent": "Getting the length of array `l`", "snippet": "len(l)", "question_id": 518021, "baseline-bleu": 0.1562, "tranx-annot-bleu": 0.212, "best-tranx-bleu": 1.0, "best-tranx-bleu-rerank": 1.0, "baseline": "x [ : : - 1 ]", "tranx-annot": "np . array ( np . reshape ( l ) )", "best-tranx": "len ( l )", "best-tranx-rerank": "len ( l )", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.5437, "meteor-best-tranx": 0.9922, "meteor-best-tranx-rerank": 0.9922, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.4, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 1.0}, {"intent": "Getting the length of an array", "rewritten_intent": "Getting the length of array `s`", "snippet": "len(s)", "question_id": 518021, "baseline-bleu": 0.1604, "tranx-annot-bleu": 0.212, "best-tranx-bleu": 1.0, "best-tranx-bleu-rerank": 1.0, "baseline": "if s [ : : - 1 ]", "tranx-annot": "np . array ( np . reshape ( s ) )", "best-tranx": "len ( s )", "best-tranx-rerank": "len ( s )", "meteor-baseline": 0.1136, "meteor-tranx-annot": 0.5437, "meteor-best-tranx": 0.9922, "meteor-best-tranx-rerank": 0.9922, "rougel-baseline": 0.1667, "rougel-tranx-annot": 0.4, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 1.0}, {"intent": "Getting the length of an array", "rewritten_intent": "Getting the length of `my_tuple`", "snippet": "len(my_tuple)", "question_id": 518021, "baseline-bleu": 0.1349, "tranx-annot-bleu": 0.3928, "best-tranx-bleu": 0.517, "best-tranx-bleu-rerank": 1.0, "baseline": "my_function [ : : : - 1 ]", "tranx-annot": "len ( set ( my_tuple ) )", "best-tranx": "len ( len ( my_tuple ) )", "best-tranx-rerank": "len ( my_tuple )", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.734, "meteor-best-tranx": 0.8721, "meteor-best-tranx-rerank": 0.9922, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.7273, "rougel-best-tranx": 0.7273, "rougel-best-tranx-rerank": 1.0}, {"intent": "Getting the length of an array", "rewritten_intent": "Getting the length of `my_string`", "snippet": "len(my_string)", "question_id": 518021, "baseline-bleu": 0.1139, "tranx-annot-bleu": 0.3928, "best-tranx-bleu": 0.517, "best-tranx-bleu-rerank": 1.0, "baseline": "my_string [ : : #NEWLINE# #INDENT# pass", "tranx-annot": "len ( set ( my_string ) )", "best-tranx": "len ( len ( my_string ) )", "best-tranx-rerank": "len ( my_string )", "meteor-baseline": 0.1064, "meteor-tranx-annot": 0.734, "meteor-best-tranx": 0.8721, "meteor-best-tranx-rerank": 0.9922, "rougel-baseline": 0.1333, "rougel-tranx-annot": 0.7273, "rougel-best-tranx": 0.7273, "rougel-best-tranx-rerank": 1.0}, {"intent": "remove escape character from string", "rewritten_intent": "remove escape character from string \"\\\\a\"", "snippet": "\"\"\"\\\\a\"\"\".decode('string_escape')", "question_id": 40452956, "baseline-bleu": 0.2843, "tranx-annot-bleu": 0.1248, "best-tranx-bleu": 0.2677, "best-tranx-bleu-rerank": 0.2677, "baseline": "\"\"\"<unk>#SPACE#Hello\"\"\" . strip ( )", "tranx-annot": "\\ a . replace ( ` ` )", "best-tranx": "re . sub ( ` < unk > ` , ` \\ \\ a ` , ` \\ \\ a ` )", "best-tranx-rerank": "re . sub ( ` < unk > ` , ` \\ \\ a ` , ` \\ \\ a ` )", "meteor-baseline": 0.3627, "meteor-tranx-annot": 0.4176, "meteor-best-tranx": 0.5704, "meteor-best-tranx-rerank": 0.5704, "rougel-baseline": 0.5455, "rougel-tranx-annot": 0.5833, "rougel-best-tranx": 0.6316, "rougel-best-tranx-rerank": 0.6316}, {"intent": "Python string replace two things at once?", "rewritten_intent": "replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.", "snippet": "\"\"\"obama\"\"\".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')", "question_id": 8687018, "baseline-bleu": 0.2148, "tranx-annot-bleu": 0.0675, "best-tranx-bleu": 0.0647, "best-tranx-bleu-rerank": 0.0647, "baseline": "\"\"\"a#SPACE#{}\"\"\" . format ( 'a' , 'a' )", "tranx-annot": "` ` ` ` ` ` . join ( str ( i ) for i in obama )", "best-tranx": "a . replace ( ` b ` , ` a ` )", "best-tranx-rerank": "a . replace ( ` b ` , ` a ` )", "meteor-baseline": 0.3013, "meteor-tranx-annot": 0.1449, "meteor-best-tranx": 0.2757, "meteor-best-tranx-rerank": 0.2757, "rougel-baseline": 0.4776, "rougel-tranx-annot": 0.3871, "rougel-best-tranx": 0.4286, "rougel-best-tranx-rerank": 0.4286}, {"intent": "How do I remove/delete a folder that is not empty with Python?", "rewritten_intent": "remove directory tree '/folder_name'", "snippet": "shutil.rmtree('/folder_name')", "question_id": 303200, "baseline-bleu": 0.055, "tranx-annot-bleu": 0.6606, "best-tranx-bleu": 0.376, "best-tranx-bleu-rerank": 0.5332, "baseline": "print ( os . path . getpath ( '<unk>' ) ) #NEWLINE# #INDENT# print ( os . path . get ( ) , '<unk>' ) )", "tranx-annot": "os . chdir ( ` / folder_name ` )", "best-tranx": "sys . path . insert ( 0 , ` / folder_name ` )", "best-tranx-rerank": "sys . path . remove ( ` / folder_name ` )", "meteor-baseline": 0.2101, "meteor-tranx-annot": 0.7687, "meteor-best-tranx": 0.7154, "meteor-best-tranx-rerank": 0.752, "rougel-baseline": 0.2128, "rougel-tranx-annot": 0.7778, "rougel-best-tranx": 0.6364, "rougel-best-tranx-rerank": 0.7}, {"intent": "in pandas how can I groupby weekday() for a datetime column?", "rewritten_intent": "create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`", "snippet": "data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())", "question_id": 13740672, "baseline-bleu": 0.093, "tranx-annot-bleu": 0.1601, "best-tranx-bleu": 0.5067, "best-tranx-bleu-rerank": 0.5067, "baseline": "df . groupby ( [ 'race_id' , 'f' ] , ascending = False )", "tranx-annot": "data [ ` weekday ` ] = np . data", "best-tranx": "data [ ` weekday ` ] = data [ ` my_dt ` ] / data [ ` weekday ` ]", "best-tranx-rerank": "data [ ` weekday ` ] = data [ ` my_dt ` ] / data [ ` weekday ` ]", "meteor-baseline": 0.2615, "meteor-tranx-annot": 0.2929, "meteor-best-tranx": 0.5181, "meteor-best-tranx-rerank": 0.5181, "rougel-baseline": 0.4651, "rougel-tranx-annot": 0.5143, "rougel-best-tranx": 0.6222, "rougel-best-tranx-rerank": 0.6222}, {"intent": "How to sort Counter by value? - python", "rewritten_intent": "reverse sort Counter `x` by values", "snippet": "sorted(x, key=x.get, reverse=True)", "question_id": 20950650, "baseline-bleu": 0.2165, "tranx-annot-bleu": 0.1592, "best-tranx-bleu": 0.1846, "best-tranx-bleu-rerank": 0.1846, "baseline": "sorted ( a , key = lambda x : x [ 1 ] )", "tranx-annot": "x . sort ( key = operator . itemgetter ( 1 ) )", "best-tranx": "sorted ( iter ( x . items ( ) ) , key = itemgetter ( 1 ) )", "best-tranx-rerank": "sorted ( iter ( x . items ( ) ) , key = itemgetter ( 1 ) )", "meteor-baseline": 0.38, "meteor-tranx-annot": 0.2518, "meteor-best-tranx": 0.3695, "meteor-best-tranx-rerank": 0.3695, "rougel-baseline": 0.5714, "rougel-tranx-annot": 0.4444, "rougel-best-tranx": 0.5, "rougel-best-tranx-rerank": 0.5}, {"intent": "How to sort Counter by value? - python", "rewritten_intent": "reverse sort counter `x` by value", "snippet": "sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)", "question_id": 20950650, "baseline-bleu": 0.176, "tranx-annot-bleu": 0.182, "best-tranx-bleu": 0.5526, "best-tranx-bleu-rerank": 0.5526, "baseline": "sorted ( a , key = lambda x : x [ 1 ] )", "tranx-annot": "sorted ( x , key = lambda x : x [ 1 ] )", "best-tranx": "sorted ( iter ( x . items ( ) ) , key = itemgetter ( 1 ) , reverse = True )", "best-tranx-rerank": "sorted ( iter ( x . items ( ) ) , key = itemgetter ( 1 ) , reverse = True )", "meteor-baseline": 0.3568, "meteor-tranx-annot": 0.3568, "meteor-best-tranx": 0.6663, "meteor-best-tranx-rerank": 0.6663, "rougel-baseline": 0.6154, "rougel-tranx-annot": 0.6154, "rougel-best-tranx": 0.766, "rougel-best-tranx-rerank": 0.766}, {"intent": "Append a NumPy array to a NumPy array", "rewritten_intent": "append a numpy array 'b' to a numpy array 'a'", "snippet": "np.vstack((a, b))", "question_id": 9775297, "baseline-bleu": 0.1251, "tranx-annot-bleu": 0.1438, "best-tranx-bleu": 0.0971, "best-tranx-bleu-rerank": 0.5145, "baseline": "np . concatenate ( [ 'a' , 1 ] , axis = 1 )", "tranx-annot": "np . array ( [ b , x ] , axis = 1 )", "best-tranx": "np . append ( my_data , var_1 [ : , ( None ) ] , b [ ( None ) , : ] )", "best-tranx-rerank": "np . append ( a , b )", "meteor-baseline": 0.4023, "meteor-tranx-annot": 0.41, "meteor-best-tranx": 0.4667, "meteor-best-tranx-rerank": 0.6862, "rougel-baseline": 0.4615, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.4706, "rougel-best-tranx-rerank": 0.7778}, {"intent": "numpy concatenate two arrays vertically", "rewritten_intent": "numpy concatenate two arrays `a` and `b` along the first axis", "snippet": "print(concatenate((a, b), axis=0))", "question_id": 21887754, "baseline-bleu": 0.4103, "tranx-annot-bleu": 0.3351, "best-tranx-bleu": 0.7921, "best-tranx-bleu-rerank": 0.7921, "baseline": "a [ np . arange ( a ) , axis = 0 )", "tranx-annot": "numpy . concatenate ( a , b ) [ 0 ] . first ( b )", "best-tranx": "np . concatenate ( ( a , b ) , axis = 0 )", "best-tranx-rerank": "np . concatenate ( ( a , b ) , axis = 0 )", "meteor-baseline": 0.5068, "meteor-tranx-annot": 0.3867, "meteor-best-tranx": 0.7905, "meteor-best-tranx-rerank": 0.7905, "rougel-baseline": 0.5714, "rougel-tranx-annot": 0.5806, "rougel-best-tranx": 0.8276, "rougel-best-tranx-rerank": 0.8276}, {"intent": "numpy concatenate two arrays vertically", "rewritten_intent": "numpy concatenate two arrays `a` and `b` along the second axis", "snippet": "print(concatenate((a, b), axis=1))", "question_id": 21887754, "baseline-bleu": 0.1759, "tranx-annot-bleu": 0.3507, "best-tranx-bleu": 0.4171, "best-tranx-bleu-rerank": 0.4171, "baseline": "np . concatenate ( arr , axis = 0 )", "tranx-annot": "numpy . concatenate ( a , b ) . size ( ) . axis ( )", "best-tranx": "np . concatenate ( [ a , b ] , axis = 1 )", "best-tranx-rerank": "np . concatenate ( [ a , b ] , axis = 1 )", "meteor-baseline": 0.3525, "meteor-tranx-annot": 0.4548, "meteor-best-tranx": 0.6292, "meteor-best-tranx-rerank": 0.6292, "rougel-baseline": 0.48, "rougel-tranx-annot": 0.7097, "rougel-best-tranx": 0.6897, "rougel-best-tranx-rerank": 0.6897}, {"intent": "numpy concatenate two arrays vertically", "rewritten_intent": "numpy concatenate two arrays `a` and `b` along the first axis", "snippet": "c = np.r_[(a[None, :], b[None, :])]", "question_id": 21887754, "baseline-bleu": 0.0985, "tranx-annot-bleu": 0.1013, "best-tranx-bleu": 0.1056, "best-tranx-bleu-rerank": 0.1056, "baseline": "a [ np . arange ( a ) , axis = 0 )", "tranx-annot": "numpy . concatenate ( a , b ) [ 0 ] . first ( b )", "best-tranx": "np . concatenate ( ( a , b ) , axis = 0 )", "best-tranx-rerank": "np . concatenate ( ( a , b ) , axis = 0 )", "meteor-baseline": 0.2992, "meteor-tranx-annot": 0.1869, "meteor-best-tranx": 0.3616, "meteor-best-tranx-rerank": 0.3616, "rougel-baseline": 0.4571, "rougel-tranx-annot": 0.4211, "rougel-best-tranx": 0.5, "rougel-best-tranx-rerank": 0.5}, {"intent": "numpy concatenate two arrays vertically", "rewritten_intent": "numpy concatenate two arrays `a` and `b` along the first axis", "snippet": "np.array((a, b))", "question_id": 21887754, "baseline-bleu": 0.1778, "tranx-annot-bleu": 0.3118, "best-tranx-bleu": 0.4547, "best-tranx-bleu-rerank": 0.4547, "baseline": "a [ np . arange ( a ) , axis = 0 )", "tranx-annot": "numpy . concatenate ( a , b ) [ 0 ] . first ( b )", "best-tranx": "np . concatenate ( ( a , b ) , axis = 0 )", "best-tranx-rerank": "np . concatenate ( ( a , b ) , axis = 0 )", "meteor-baseline": 0.5558, "meteor-tranx-annot": 0.5019, "meteor-best-tranx": 0.7912, "meteor-best-tranx-rerank": 0.7912, "rougel-baseline": 0.6087, "rougel-tranx-annot": 0.6154, "rougel-best-tranx": 0.75, "rougel-best-tranx-rerank": 0.75}, {"intent": "How can I do DNS lookups in Python, including referring to /etc/hosts?", "rewritten_intent": "fetch address information for host 'google.com' ion port 80", "snippet": "print(socket.getaddrinfo('google.com', 80))", "question_id": 2805231, "baseline-bleu": 0.0867, "tranx-annot-bleu": 0.3368, "best-tranx-bleu": 0.1268, "best-tranx-bleu-rerank": 0.3933, "baseline": "os . system ( '<unk>#SPACE#<unk>#SPACE#<unk>' )", "tranx-annot": "plt . address ( 0 , ` google . com ` )", "best-tranx": "port . google . com ( )", "best-tranx-rerank": "socket . system ( ` google . com ` )", "meteor-baseline": 0.2369, "meteor-tranx-annot": 0.5598, "meteor-best-tranx": 0.3599, "meteor-best-tranx-rerank": 0.6092, "rougel-baseline": 0.2703, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.5455, "rougel-best-tranx-rerank": 0.72}, {"intent": "How to update a subset of a MultiIndexed pandas DataFrame", "rewritten_intent": "add a column 'day' with value 'sat' to dataframe `df`", "snippet": "df.xs('sat', level='day', drop_level=False)", "question_id": 17552997, "baseline-bleu": 0.1067, "tranx-annot-bleu": 0.2844, "best-tranx-bleu": 0.2621, "best-tranx-bleu-rerank": 0.2621, "baseline": "df [ 'a' ] = df [ 'col' ] . str . split ( ',' ) ]", "tranx-annot": "df . set_index ( [ ` day ` , ` sat ` ] )", "best-tranx": "df [ ` day ` ] = df ( ` sat ` )", "best-tranx-rerank": "df [ ` day ` ] = df ( ` sat ` )", "meteor-baseline": 0.2703, "meteor-tranx-annot": 0.3902, "meteor-best-tranx": 0.2857, "meteor-best-tranx-rerank": 0.2857, "rougel-baseline": 0.4878, "rougel-tranx-annot": 0.6875, "rougel-best-tranx": 0.6452, "rougel-best-tranx-rerank": 0.6452}, {"intent": "How do I return a 401 Unauthorized in Django?", "rewritten_intent": "return a 401 unauthorized in django", "snippet": "return HttpResponse('Unauthorized', status=401)", "question_id": 4356842, "baseline-bleu": 0.1555, "tranx-annot-bleu": 0.1051, "best-tranx-bleu": 0.1006, "best-tranx-bleu-rerank": 0.1006, "baseline": "ax . xaxis . get_ticks_position ( 'top' ) )", "tranx-annot": "{ { datetime . datetime . now ( ) } , { } }", "best-tranx": "request . GET . get ( ` < unk > ` , ` % d % b % Y ` )", "best-tranx-rerank": "request . GET . get ( ` < unk > ` , ` % d % b % Y ` )", "meteor-baseline": 0.2652, "meteor-tranx-annot": 0.123, "meteor-best-tranx": 0.1938, "meteor-best-tranx-rerank": 0.1938, "rougel-baseline": 0.3478, "rougel-tranx-annot": 0.2308, "rougel-best-tranx": 0.303, "rougel-best-tranx-rerank": 0.303}, {"intent": "How to dynamically select template directory to be used in flask?", "rewritten_intent": "Flask set folder 'wherever' as the default template folder", "snippet": "Flask(__name__, template_folder='wherever')", "question_id": 13598363, "baseline-bleu": 0.1868, "tranx-annot-bleu": 0.3672, "best-tranx-bleu": 0.1656, "best-tranx-bleu-rerank": 0.3816, "baseline": "os . chdir ( 'username' )", "tranx-annot": "sys . stdout . template ( ` wherever ` )", "best-tranx": "app = subprocess . Assertion Error ( ` wherever ` ) shutil . copy2 ( ` wherever ` , ` wherever ` )", "best-tranx-rerank": "app = subprocess . request ( ` wherever ` )", "meteor-baseline": 0.3221, "meteor-tranx-annot": 0.484, "meteor-best-tranx": 0.5617, "meteor-best-tranx-rerank": 0.5625, "rougel-baseline": 0.4444, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.4242, "rougel-best-tranx-rerank": 0.6}, {"intent": "How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?", "rewritten_intent": "How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?", "snippet": "session.execute('INSERT INTO t1 (SELECT * FROM t2)')", "question_id": 1849375, "baseline-bleu": 0.1426, "tranx-annot-bleu": 0.0883, "best-tranx-bleu": 0.2705, "best-tranx-bleu-rerank": 0.2705, "baseline": "re . compile ( '(ddd)' , re . UNICODE )", "tranx-annot": "session . stack ( ) . reset_index ( ) . reset_index ( key = lambda x : x . startswith ( ` * ` ) [ 0 ] )", "best-tranx": "cursor . execute ( ` INSERT INTO table ( ` column1 ` ) VALUES ( % s ) ` , ( t2 , ) )", "best-tranx-rerank": "cursor . execute ( ` INSERT INTO table ( ` column1 ` ) VALUES ( % s ) ` , ( t2 , ) )", "meteor-baseline": 0.3623, "meteor-tranx-annot": 0.2601, "meteor-best-tranx": 0.4726, "meteor-best-tranx-rerank": 0.4726, "rougel-baseline": 0.4667, "rougel-tranx-annot": 0.4, "rougel-best-tranx": 0.5366, "rougel-best-tranx-rerank": 0.5366}, {"intent": "Sorting a list of lists in Python", "rewritten_intent": "sort a list of lists 'c2' such that third row comes first", "snippet": "c2.sort(key=lambda row: row[2])", "question_id": 3398589, "baseline-bleu": 0.3218, "tranx-annot-bleu": 0.1296, "best-tranx-bleu": 0.1323, "best-tranx-bleu-rerank": 0.1331, "baseline": "users . sort ( key = lambda x : x [ 1 ] , x [ 1 ] ) )", "tranx-annot": "sorted ( c2 , key = lambda x : ( - x [ 0 ] , len ( y ) ) )", "best-tranx": "sorted ( c2 , * * [ c2 ] )", "best-tranx-rerank": "sorted ( c2 , key = lambda x : int ( list ( x [ 0 ] ) [ 0 ] ) )", "meteor-baseline": 0.6421, "meteor-tranx-annot": 0.5397, "meteor-best-tranx": 0.4209, "meteor-best-tranx-rerank": 0.5361, "rougel-baseline": 0.5882, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.4167, "rougel-best-tranx-rerank": 0.4865}, {"intent": "Sorting a list of lists in Python", "rewritten_intent": null, "snippet": "c2.sort(key=lambda row: (row[2], row[1], row[0]))", "question_id": 3398589, "baseline-bleu": 0.1191, "tranx-annot-bleu": 0.1594, "best-tranx-bleu": 0.1183, "best-tranx-bleu-rerank": 0.032, "baseline": "zip ( list , zip ( lambda x : x [ 1 ] ) )", "tranx-annot": "sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] )", "best-tranx": "sorted ( var_1 , key = lambda x : x [ 1 ] )", "best-tranx-rerank": "[ sorted ( item ) for item in lists ]", "meteor-baseline": 0.2988, "meteor-tranx-annot": 0.3968, "meteor-best-tranx": 0.3439, "meteor-best-tranx-rerank": 0.123, "rougel-baseline": 0.4878, "rougel-tranx-annot": 0.5532, "rougel-best-tranx": 0.5, "rougel-best-tranx-rerank": 0.2222}, {"intent": "Sorting a list of lists in Python", "rewritten_intent": null, "snippet": "c2.sort(key=lambda row: (row[2], row[1]))", "question_id": 3398589, "baseline-bleu": 0.235, "tranx-annot-bleu": 0.2585, "best-tranx-bleu": 0.2161, "best-tranx-bleu-rerank": 0.0528, "baseline": "zip ( list , zip ( lambda x : x [ 1 ] ) )", "tranx-annot": "sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] )", "best-tranx": "sorted ( var_1 , key = lambda x : x [ 1 ] )", "best-tranx-rerank": "[ sorted ( item ) for item in lists ]", "meteor-baseline": 0.4373, "meteor-tranx-annot": 0.5734, "meteor-best-tranx": 0.5036, "meteor-best-tranx-rerank": 0.1508, "rougel-baseline": 0.5556, "rougel-tranx-annot": 0.619, "rougel-best-tranx": 0.5714, "rougel-best-tranx-rerank": 0.2581}, {"intent": "Non-ASCII characters in Matplotlib", "rewritten_intent": "set font `Arial` to display non-ascii characters in matplotlib", "snippet": "matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})", "question_id": 10960463, "baseline-bleu": 0.0623, "tranx-annot-bleu": 0.0284, "best-tranx-bleu": 0.0855, "best-tranx-bleu-rerank": 0.0855, "baseline": "re . findall ( '[a-zA-Z]' , style = True )", "tranx-annot": "datetime . datetime . combine ( Arial , ` ` )", "best-tranx": "plt . savefig ( ` Arial ` , bbox_inches = ` size ` )", "best-tranx-rerank": "plt . savefig ( ` Arial ` , bbox_inches = ` size ` )", "meteor-baseline": 0.1303, "meteor-tranx-annot": 0.1171, "meteor-best-tranx": 0.149, "meteor-best-tranx-rerank": 0.149, "rougel-baseline": 0.3137, "rougel-tranx-annot": 0.3256, "rougel-best-tranx": 0.3913, "rougel-best-tranx-rerank": 0.3913}, {"intent": "Pandas datetime column to ordinal", "rewritten_intent": "Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal", "snippet": "df['date'].apply(lambda x: x.toordinal())", "question_id": 20576618, "baseline-bleu": 0.4915, "tranx-annot-bleu": 0.453, "best-tranx-bleu": 0.1104, "best-tranx-bleu-rerank": 0.1104, "baseline": "df [ 'a' ] = df [ 'a' ] . apply ( lambda x : x . mean ( ) )", "tranx-annot": "df [ ` date ` ] = df [ ` date ` ] . apply ( pd . Series )", "best-tranx": "pd . to_datetime ( pd . Time Grouper ( hours = 5 ) ) + 1", "best-tranx-rerank": "pd . to_datetime ( pd . Time Grouper ( hours = 5 ) ) + 1", "meteor-baseline": 0.8528, "meteor-tranx-annot": 0.5899, "meteor-best-tranx": 0.2395, "meteor-best-tranx-rerank": 0.2395, "rougel-baseline": 0.7442, "rougel-tranx-annot": 0.5789, "rougel-best-tranx": 0.3529, "rougel-best-tranx-rerank": 0.3529}, {"intent": "Get HTML Source of WebElement in Selenium WebDriver using Python", "rewritten_intent": "get html source of Selenium WebElement `element`", "snippet": "element.get_attribute('innerHTML')", "question_id": 7263824, "baseline-bleu": 0.1683, "tranx-annot-bleu": 0.201, "best-tranx-bleu": 0.2003, "best-tranx-bleu-rerank": 0.2003, "baseline": "print ( soup . current_url ( ) )", "tranx-annot": "element . size ( ) . strftime ( ` ? ` )", "best-tranx": "print ( element . page_source )", "best-tranx-rerank": "print ( element . page_source )", "meteor-baseline": 0.1685, "meteor-tranx-annot": 0.5496, "meteor-best-tranx": 0.3628, "meteor-best-tranx-rerank": 0.3628, "rougel-baseline": 0.3529, "rougel-tranx-annot": 0.5714, "rougel-best-tranx": 0.5333, "rougel-best-tranx-rerank": 0.5333}, {"intent": "Most efficient way to get the integer index of a key in pandas", "rewritten_intent": "Get the integer location of a key `bob` in a pandas data frame", "snippet": "df.index.get_loc('bob')", "question_id": 31793195, "baseline-bleu": 0.1163, "tranx-annot-bleu": 0.2254, "best-tranx-bleu": 0.1599, "best-tranx-bleu-rerank": 0.1352, "baseline": "pd . concat ( [ 'stock' , 'same2' ] )", "tranx-annot": "int ( df . groupby ( ` bob ` , axis = 1 ) [ 0 ] )", "best-tranx": "df [ ` bob ` ] . apply ( lambda x : int ( x ) )", "best-tranx-rerank": "df [ ` bob ` ] . apply ( lambda x : int ( x [ 0 ] ) )", "meteor-baseline": 0.2404, "meteor-tranx-annot": 0.5877, "meteor-best-tranx": 0.535, "meteor-best-tranx-rerank": 0.5204, "rougel-baseline": 0.4167, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.5185, "rougel-best-tranx-rerank": 0.4667}, {"intent": "open a terminal from python", "rewritten_intent": "open a 'gnome' terminal from python script and run  'sudo apt-get update' command.", "snippet": "os.system('gnome-terminal -e \\'bash -c \"sudo apt-get update; exec bash\"\\'')", "question_id": 7574841, "baseline-bleu": 0.0654, "tranx-annot-bleu": 0.0582, "best-tranx-bleu": 0.0582, "best-tranx-bleu-rerank": 0.0582, "baseline": "subprocess . call ( 'echo#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>' )", "tranx-annot": "os . system ( ` gnome ` )", "best-tranx": "os . system ( ` gnome ` )", "best-tranx-rerank": "os . system ( ` gnome ` )", "meteor-baseline": 0.127, "meteor-tranx-annot": 0.2788, "meteor-best-tranx": 0.2788, "meteor-best-tranx-rerank": 0.2788, "rougel-baseline": 0.1639, "rougel-tranx-annot": 0.4324, "rougel-best-tranx": 0.4324, "rougel-best-tranx-rerank": 0.4324}, {"intent": "Python - How to declare and add items to an array?", "rewritten_intent": "add an item with key 'third_key' and value 1 to an dictionary `my_dict`", "snippet": "my_dict.update({'third_key': 1})", "question_id": 10487278, "baseline-bleu": 0.1125, "tranx-annot-bleu": 0.0565, "best-tranx-bleu": 0.4002, "best-tranx-bleu-rerank": 0.4444, "baseline": "print ( my_dict , key = operator . itemgetter ( 'an' ) )", "tranx-annot": "dict ( ( i , x + my_dict [ i ] ) for i in range ( 1 , len ( my_dict ) , 1 ) )", "best-tranx": "my_dict [ ` third_key ` ] . update ( { third_key } )", "best-tranx-rerank": "my_dict [ ` third_key ` ] . update ( { ` third_key ` : ` third_key ` } )", "meteor-baseline": 0.2439, "meteor-tranx-annot": 0.1481, "meteor-best-tranx": 0.7372, "meteor-best-tranx-rerank": 0.8255, "rougel-baseline": 0.4444, "rougel-tranx-annot": 0.2051, "rougel-best-tranx": 0.8, "rougel-best-tranx-rerank": 0.7097}, {"intent": "Python - How to declare and add items to an array?", "rewritten_intent": "declare an array", "snippet": "my_list = []", "question_id": 10487278, "baseline-bleu": 0.2296, "tranx-annot-bleu": 0.0884, "best-tranx-bleu": 0.1996, "best-tranx-bleu-rerank": 0.6687, "baseline": "sys . version ( )", "tranx-annot": "data = numpy . array ( 0 , 0 , axis = 0 )", "best-tranx": "T = [ 1 , 2 , 3 ]", "best-tranx-rerank": "i = [ ]", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.1, "meteor-best-tranx": 0.5679, "meteor-best-tranx-rerank": 0.7361, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.1111, "rougel-best-tranx": 0.4615, "rougel-best-tranx-rerank": 0.75}, {"intent": "Python - How to declare and add items to an array?", "rewritten_intent": "Insert item `12` to a list `my_list`", "snippet": "my_list.append(12)", "question_id": 10487278, "baseline-bleu": 0.1858, "tranx-annot-bleu": 0.2398, "best-tranx-bleu": 0.1973, "best-tranx-bleu-rerank": 0.1973, "baseline": "my_list [ : : - 10 ]", "tranx-annot": "my_list . insert ( 0 , 1 )", "best-tranx": "my_list . insert ( 2 , ` 12 ` )", "best-tranx-rerank": "my_list . insert ( 2 , ` 12 ` )", "meteor-baseline": 0.082, "meteor-tranx-annot": 0.5091, "meteor-best-tranx": 0.5813, "meteor-best-tranx-rerank": 0.5813, "rougel-baseline": 0.1538, "rougel-tranx-annot": 0.5714, "rougel-best-tranx": 0.625, "rougel-best-tranx-rerank": 0.625}, {"intent": "Add entry to list and remove first one in Python", "rewritten_intent": "add an entry 'wuggah' at the beginning of list `myList`", "snippet": "myList.insert(0, 'wuggah')", "question_id": 10155684, "baseline-bleu": 0.1204, "tranx-annot-bleu": 0.1287, "best-tranx-bleu": 0.123, "best-tranx-bleu-rerank": 0.1358, "baseline": "print ( [ '<unk>' , '<unk>' ] )", "tranx-annot": "my List = [ ( wuggah + x ) for x in my List ]", "best-tranx": "my List = list ( int ( x ) for x in my List )", "best-tranx-rerank": "my List = [ wuggah ]", "meteor-baseline": 0.3235, "meteor-tranx-annot": 0.3263, "meteor-best-tranx": 0.2769, "meteor-best-tranx-rerank": 0.2434, "rougel-baseline": 0.3704, "rougel-tranx-annot": 0.3846, "rougel-best-tranx": 0.3077, "rougel-best-tranx-rerank": 0.3529}, {"intent": "Converting a hex-string representation to actual bytes in Python", "rewritten_intent": "convert a hex-string representation to actual bytes", "snippet": "\"\"\"\\\\xF3\\\\xBE\\\\x80\\\\x80\"\"\".replace('\\\\x', '').decode('hex')", "question_id": 3519125, "baseline-bleu": 0.0362, "tranx-annot-bleu": 0.0066, "best-tranx-bleu": 0.0579, "best-tranx-bleu-rerank": 0.0579, "baseline": "print ( s . encode ( 'hex' ) )", "tranx-annot": "locale . pack ( str ( 10 ) )", "best-tranx": "struct . pack ( ` < I ` , 1633837924 ) . encode ( ` utf - 8 ` )", "best-tranx-rerank": "struct . pack ( ` < I ` , 1633837924 ) . encode ( ` utf - 8 ` )", "meteor-baseline": 0.194, "meteor-tranx-annot": 0.0833, "meteor-best-tranx": 0.2395, "meteor-best-tranx-rerank": 0.2395, "rougel-baseline": 0.32, "rougel-tranx-annot": 0.2083, "rougel-best-tranx": 0.3729, "rougel-best-tranx-rerank": 0.3729}, {"intent": "How to select the last column of dataframe", "rewritten_intent": "select the last column of dataframe `df`", "snippet": "df[df.columns[-1]]", "question_id": 40144769, "baseline-bleu": 0.1644, "tranx-annot-bleu": 0.0828, "best-tranx-bleu": 0.1345, "best-tranx-bleu-rerank": 0.1345, "baseline": "df . groupby ( 'ID' )", "tranx-annot": "df . apply ( lambda x : x . fillna ( x . index ( x [ 0 ] ) ) )", "best-tranx": "df . loc [ ~ df [ ` A ` ] . isin ( df ) ]", "best-tranx-rerank": "df . loc [ ~ df [ ` A ` ] . isin ( df ) ]", "meteor-baseline": 0.1913, "meteor-tranx-annot": 0.1786, "meteor-best-tranx": 0.3271, "meteor-best-tranx-rerank": 0.3271, "rougel-baseline": 0.2222, "rougel-tranx-annot": 0.25, "rougel-best-tranx": 0.5185, "rougel-best-tranx-rerank": 0.5185}, {"intent": "How to get a value from a Pandas DataFrame and not the index and object type", "rewritten_intent": "get the first value from dataframe `df` where column 'Letters' is equal to 'C'", "snippet": "df.loc[df['Letters'] == 'C', 'Letters'].values[0]", "question_id": 30787901, "baseline-bleu": 0.2572, "tranx-annot-bleu": 0.5389, "best-tranx-bleu": 0.4239, "best-tranx-bleu-rerank": 0.5498, "baseline": "df [ 'a' ] = df [ 'a' ] == 'Male' )", "tranx-annot": "df . loc [ : , ( ( df [ ` Letters ` ] = = ` C ` ) ( ) ) ]", "best-tranx": "df . loc [ gb . groups [ ` Letters ` ] , ( ` C ` , ` C ` ) ]", "best-tranx-rerank": "df . loc [ df [ ` Letters ` ] = = ` C ` ]", "meteor-baseline": 0.3931, "meteor-tranx-annot": 0.3981, "meteor-best-tranx": 0.4941, "meteor-best-tranx-rerank": 0.3904, "rougel-baseline": 0.6364, "rougel-tranx-annot": 0.6939, "rougel-best-tranx": 0.7083, "rougel-best-tranx-rerank": 0.7805}, {"intent": "Converting two lists into a matrix", "rewritten_intent": "converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix", "snippet": "np.column_stack(([1, 2, 3], [4, 5, 6]))", "question_id": 18730044, "baseline-bleu": 0.3816, "tranx-annot-bleu": 0.4075, "best-tranx-bleu": 0.824, "best-tranx-bleu-rerank": 0.824, "baseline": "np . dot ( [ 1 , 2 , 3 , 4 , 3 , 4 ] )", "tranx-annot": "print ( ` \\ n ` . join ( [ 1 , 2 , 3 ] ) )", "best-tranx": "list ( zip ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) )", "best-tranx-rerank": "list ( zip ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) )", "meteor-baseline": 0.5575, "meteor-tranx-annot": 0.3948, "meteor-best-tranx": 0.8671, "meteor-best-tranx-rerank": 0.8671, "rougel-baseline": 0.75, "rougel-tranx-annot": 0.6, "rougel-best-tranx": 0.8837, "rougel-best-tranx-rerank": 0.8837}, {"intent": "determine the variable type", "rewritten_intent": "get the type of `i`", "snippet": "type(i)", "question_id": 402504, "baseline-bleu": 0.2296, "tranx-annot-bleu": 0.3457, "best-tranx-bleu": 0.3457, "best-tranx-bleu-rerank": 0.3457, "baseline": "x [ - 1 ]", "tranx-annot": "int ( len ( i ) )", "best-tranx": "isinstance ( i , i )", "best-tranx-rerank": "isinstance ( i , i )", "meteor-baseline": 0.122, "meteor-tranx-annot": 0.5943, "meteor-best-tranx": 0.6085, "meteor-best-tranx-rerank": 0.6085, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.5455, "rougel-best-tranx": 0.6, "rougel-best-tranx-rerank": 0.6}, {"intent": "determine the variable type", "rewritten_intent": "determine the type of variable `v`", "snippet": "type(v)", "question_id": 402504, "baseline-bleu": 0.091, "tranx-annot-bleu": 0.1783, "best-tranx-bleu": 0.3457, "best-tranx-bleu-rerank": 0.3457, "baseline": "x = list ( a , key = lambda x : x . index )", "tranx-annot": "int ( v [ : : - 1 ] )", "best-tranx": "isinstance ( v , v )", "best-tranx-rerank": "isinstance ( v , v )", "meteor-baseline": 0.1961, "meteor-tranx-annot": 0.5556, "meteor-best-tranx": 0.6085, "meteor-best-tranx-rerank": 0.6085, "rougel-baseline": 0.2105, "rougel-tranx-annot": 0.4286, "rougel-best-tranx": 0.6, "rougel-best-tranx-rerank": 0.6}, {"intent": "determine the variable type", "rewritten_intent": "determine the type of variable `v`", "snippet": "type(v)", "question_id": 402504, "baseline-bleu": 0.091, "tranx-annot-bleu": 0.1783, "best-tranx-bleu": 0.3457, "best-tranx-bleu-rerank": 0.3457, "baseline": "x = list ( a , key = lambda x : x . index )", "tranx-annot": "int ( v [ : : - 1 ] )", "best-tranx": "isinstance ( v , v )", "best-tranx-rerank": "isinstance ( v , v )", "meteor-baseline": 0.1961, "meteor-tranx-annot": 0.5556, "meteor-best-tranx": 0.6085, "meteor-best-tranx-rerank": 0.6085, "rougel-baseline": 0.2105, "rougel-tranx-annot": 0.4286, "rougel-best-tranx": 0.6, "rougel-best-tranx-rerank": 0.6}, {"intent": "determine the variable type", "rewritten_intent": "determine the type of variable `v`", "snippet": "type(v)", "question_id": 402504, "baseline-bleu": 0.091, "tranx-annot-bleu": 0.1783, "best-tranx-bleu": 0.3457, "best-tranx-bleu-rerank": 0.3457, "baseline": "x = list ( a , key = lambda x : x . index )", "tranx-annot": "int ( v [ : : - 1 ] )", "best-tranx": "isinstance ( v , v )", "best-tranx-rerank": "isinstance ( v , v )", "meteor-baseline": 0.1961, "meteor-tranx-annot": 0.5556, "meteor-best-tranx": 0.6085, "meteor-best-tranx-rerank": 0.6085, "rougel-baseline": 0.2105, "rougel-tranx-annot": 0.4286, "rougel-best-tranx": 0.6, "rougel-best-tranx-rerank": 0.6}, {"intent": "determine the variable type", "rewritten_intent": "determine the type of variable `v`", "snippet": "type(v)", "question_id": 402504, "baseline-bleu": 0.091, "tranx-annot-bleu": 0.1783, "best-tranx-bleu": 0.3457, "best-tranx-bleu-rerank": 0.3457, "baseline": "x = list ( a , key = lambda x : x . index )", "tranx-annot": "int ( v [ : : - 1 ] )", "best-tranx": "isinstance ( v , v )", "best-tranx-rerank": "isinstance ( v , v )", "meteor-baseline": 0.1961, "meteor-tranx-annot": 0.5556, "meteor-best-tranx": 0.6085, "meteor-best-tranx-rerank": 0.6085, "rougel-baseline": 0.2105, "rougel-tranx-annot": 0.4286, "rougel-best-tranx": 0.6, "rougel-best-tranx-rerank": 0.6}, {"intent": "determine the variable type", "rewritten_intent": "get the type of variable `variable_name`", "snippet": "print(type(variable_name))", "question_id": 402504, "baseline-bleu": 0.1562, "tranx-annot-bleu": 0.3159, "best-tranx-bleu": 0.2644, "best-tranx-bleu-rerank": 0.2644, "baseline": "some_string [ : : - 1 ]", "tranx-annot": "isinstance ( variable_name )", "best-tranx": "isinstance ( variable_name , int )", "best-tranx-rerank": "isinstance ( variable_name , int )", "meteor-baseline": 0.0, "meteor-tranx-annot": 0.3814, "meteor-best-tranx": 0.3704, "meteor-best-tranx-rerank": 0.3704, "rougel-baseline": 0.0, "rougel-tranx-annot": 0.5455, "rougel-best-tranx": 0.4615, "rougel-best-tranx-rerank": 0.4615}, {"intent": "Get the nth item of a generator in Python", "rewritten_intent": "get the 5th item of a generator", "snippet": "next(itertools.islice(range(10), 5, 5 + 1))", "question_id": 2300756, "baseline-bleu": 0.1235, "tranx-annot-bleu": 0.1085, "best-tranx-bleu": 0.0813, "best-tranx-bleu-rerank": 0.0356, "baseline": "list ( range ( 1 , 2 ) )", "tranx-annot": "sum ( 1 for i in range ( 100 ) )", "best-tranx": "print ( json . load ( f ) )", "best-tranx-rerank": "json . load ( f )", "meteor-baseline": 0.3712, "meteor-tranx-annot": 0.2954, "meteor-best-tranx": 0.2175, "meteor-best-tranx-rerank": 0.0893, "rougel-baseline": 0.5185, "rougel-tranx-annot": 0.4138, "rougel-best-tranx": 0.3704, "rougel-best-tranx-rerank": 0.25}, {"intent": "printing double quotes around a variable", "rewritten_intent": "Print a string `word` with string format", "snippet": "print('\"{}\"'.format(word))", "question_id": 20056548, "baseline-bleu": 0.2351, "tranx-annot-bleu": 0.1939, "best-tranx-bleu": 0.5706, "best-tranx-bleu-rerank": 0.5706, "baseline": "\"\"\"\"\"\" . join ( chr ( s ) )", "tranx-annot": "print ( word . decode ( ` utf8 ` ) )", "best-tranx": "print ( ` < unk > ` . format ( word ) )", "best-tranx-rerank": "print ( ` < unk > ` . format ( word ) )", "meteor-baseline": 0.5877, "meteor-tranx-annot": 0.5024, "meteor-best-tranx": 0.7097, "meteor-best-tranx-rerank": 0.7097, "rougel-baseline": 0.6429, "rougel-tranx-annot": 0.72, "rougel-best-tranx": 0.7407, "rougel-best-tranx-rerank": 0.7407}, {"intent": "Python concat string with list", "rewritten_intent": "join a list of strings `list` using a space ' '", "snippet": "\"\"\" \"\"\".join(list)", "question_id": 8546245, "baseline-bleu": 0.7166, "tranx-annot-bleu": 0.1706, "best-tranx-bleu": 0.6141, "best-tranx-bleu-rerank": 0.6141, "baseline": "\"\"\"\"\"\" . join ( list ( a ) )", "tranx-annot": "list . strip ( ` ` )", "best-tranx": "print ( ` ` . join ( list ) )", "best-tranx-rerank": "print ( ` ` . join ( list ) )", "meteor-baseline": 0.95, "meteor-tranx-annot": 0.4023, "meteor-best-tranx": 0.6347, "meteor-best-tranx-rerank": 0.6347, "rougel-baseline": 0.88, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.6667, "rougel-best-tranx-rerank": 0.6667}, {"intent": "Extending a list of lists in Python?", "rewritten_intent": "create list `y` containing two empty lists", "snippet": "y = [[] for n in range(2)]", "question_id": 2276416, "baseline-bleu": 0.4842, "tranx-annot-bleu": 0.5731, "best-tranx-bleu": 0.5731, "best-tranx-bleu-rerank": 0.5731, "baseline": "listone = [ [ ] for i in range ( 3 ) ]", "tranx-annot": "y = [ [ ] for i in range ( 5 ) ]", "best-tranx": "y = [ [ ] for i in range ( 3 ) ]", "best-tranx-rerank": "y = [ [ ] for i in range ( 3 ) ]", "meteor-baseline": 0.7588, "meteor-tranx-annot": 0.8376, "meteor-best-tranx": 0.8376, "meteor-best-tranx-rerank": 0.8376, "rougel-baseline": 0.7692, "rougel-tranx-annot": 0.8462, "rougel-best-tranx": 0.8462, "rougel-best-tranx-rerank": 0.8462}, {"intent": "How do you read a file into a list in Python?", "rewritten_intent": "read a file 'C:/name/MyDocuments/numbers' into a list `data`", "snippet": "data = [line.strip() for line in open('C:/name/MyDocuments/numbers', 'r')]", "question_id": 3925614, "baseline-bleu": 0.0901, "tranx-annot-bleu": 0.7338, "best-tranx-bleu": 0.7338, "best-tranx-bleu-rerank": 0.7338, "baseline": "print ( [ '<unk>' , '<unk>' , '<unk>' ] )", "tranx-annot": "data = [ line . split ( ` \\ n ` ) for line in open ( ` C : / name / My Documents / numbers ` ) ]", "best-tranx": "data = [ line . rstrip ( ` \\ n ` ) for line in open ( ` C : / name / My Documents / numbers ` ) ]", "best-tranx-rerank": "data = [ line . rstrip ( ` \\ n ` ) for line in open ( ` C : / name / My Documents / numbers ` ) ]", "meteor-baseline": 0.2357, "meteor-tranx-annot": 0.8883, "meteor-best-tranx": 0.8883, "meteor-best-tranx-rerank": 0.8883, "rougel-baseline": 0.3462, "rougel-tranx-annot": 0.9, "rougel-best-tranx": 0.9, "rougel-best-tranx-rerank": 0.9}, {"intent": "How to delete all instances of a character in a string in python?", "rewritten_intent": "delete all occurrences of character 'i' in string 'it is icy'", "snippet": "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])", "question_id": 22187233, "baseline-bleu": 0.032, "tranx-annot-bleu": 0.334, "best-tranx-bleu": 0.3137, "best-tranx-bleu-rerank": 0.3137, "baseline": "print ( s . split ( ',' ) )", "tranx-annot": "` ` ` it is icy ` ` ` . join ( ` i ` )", "best-tranx": "` ` ` it is icy ` ` ` . replace ( ` i ` , ` ` )", "best-tranx-rerank": "` ` ` it is icy ` ` ` . replace ( ` i ` , ` ` )", "meteor-baseline": 0.0951, "meteor-tranx-annot": 0.5597, "meteor-best-tranx": 0.5635, "meteor-best-tranx-rerank": 0.5635, "rougel-baseline": 0.2564, "rougel-tranx-annot": 0.7273, "rougel-best-tranx": 0.7234, "rougel-best-tranx-rerank": 0.7234}, {"intent": "How to delete all instances of a character in a string in python?", "rewritten_intent": "delete all instances of a character 'i' in a string 'it is icy'", "snippet": "re.sub('i', '', 'it is icy')", "question_id": 22187233, "baseline-bleu": 0.1984, "tranx-annot-bleu": 0.2499, "best-tranx-bleu": 0.5475, "best-tranx-bleu-rerank": 0.5475, "baseline": "\"\"\"0,1,2\"\"\" . split ( ',' )", "tranx-annot": "[ s . strip ( ) for item in it is icy . split ( ` i ` ) ]", "best-tranx": "re . sub ( ` < unk > ` , ` ` , it is icy )", "best-tranx-rerank": "re . sub ( ` < unk > ` , ` ` , it is icy )", "meteor-baseline": 0.4987, "meteor-tranx-annot": 0.4432, "meteor-best-tranx": 0.7141, "meteor-best-tranx-rerank": 0.7141, "rougel-baseline": 0.6286, "rougel-tranx-annot": 0.4865, "rougel-best-tranx": 0.8235, "rougel-best-tranx-rerank": 0.8235}, {"intent": "How to delete all instances of a character in a string in python?", "rewritten_intent": "delete all characters \"i\" in string \"it is icy\"", "snippet": "\"\"\"it is icy\"\"\".replace('i', '')", "question_id": 22187233, "baseline-bleu": 0.1339, "tranx-annot-bleu": 0.6544, "best-tranx-bleu": 0.3501, "best-tranx-bleu-rerank": 0.3501, "baseline": "print ( s . split ( ',' ) )", "tranx-annot": "` ` ` it is icy ` ` ` . join ( ` i ` )", "best-tranx": "` ` ` it is icy ` ` ` . translate ( ` ` . join ( c for c in it is icy if c not in c ) )", "best-tranx-rerank": "` ` ` it is icy ` ` ` . translate ( ` ` . join ( c for c in it is icy if c not in c ) )", "meteor-baseline": 0.1648, "meteor-tranx-annot": 0.644, "meteor-best-tranx": 0.5668, "meteor-best-tranx-rerank": 0.5668, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.8571, "rougel-best-tranx": 0.56, "rougel-best-tranx-rerank": 0.56}, {"intent": "How to delete all instances of a character in a string in python?", "rewritten_intent": null, "snippet": "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])", "question_id": 22187233, "baseline-bleu": 0.063, "tranx-annot-bleu": 0, "best-tranx-bleu": 0.0522, "best-tranx-bleu-rerank": 0.0522, "baseline": "re . findall ( '[a-zA-Z0-9-)' , '\\\\1' , s )", "tranx-annot": "", "best-tranx": "newstr = oldstr . replace ( ` M ` , ` ` )", "best-tranx-rerank": "newstr = oldstr . replace ( ` M ` , ` ` )", "meteor-baseline": 0.2101, "meteor-tranx-annot": 0.0, "meteor-best-tranx": 0.1509, "meteor-best-tranx-rerank": 0.1509, "rougel-baseline": 0.2963, "rougel-tranx-annot": 0.0, "rougel-best-tranx": 0.3902, "rougel-best-tranx-rerank": 0.3902}, {"intent": "How to drop rows of Pandas DataFrame whose value in certain columns is NaN", "rewritten_intent": "Drop rows of pandas dataframe `df` having NaN in column at index \"1\"", "snippet": "df.dropna(subset=[1])", "question_id": 13413590, "baseline-bleu": 0.0848, "tranx-annot-bleu": 0.0943, "best-tranx-bleu": 0.0806, "best-tranx-bleu-rerank": 0.0785, "baseline": "df [ 'a' ] = df [ 'a' ] == 'a' )", "tranx-annot": "df . loc [ df [ ` 1 ` ] . isin ( [ ` 1 ` , ` 1 ` ] ) ]", "best-tranx": "df . loc [ df [ ` 1 ` ] . isin ( [ ` 1 ` , ` 1 ` ] ) , ` 1 ` ]", "best-tranx-rerank": "df . loc [ ( df [ ` 1 ` ] > 42 ) | ( df [ ` 1 ` ] > n ) ]", "meteor-baseline": 0.2294, "meteor-tranx-annot": 0.307, "meteor-best-tranx": 0.2966, "meteor-best-tranx-rerank": 0.3017, "rougel-baseline": 0.3448, "rougel-tranx-annot": 0.4118, "rougel-best-tranx": 0.3684, "rougel-best-tranx-rerank": 0.3889}, {"intent": "Searching a list of objects in Python", "rewritten_intent": "get elements from list `myList`, that have a field `n` value 30", "snippet": "[x for x in myList if x.n == 30]", "question_id": 598398, "baseline-bleu": 0.0951, "tranx-annot-bleu": 0.1383, "best-tranx-bleu": 0.0931, "best-tranx-bleu-rerank": 0.2237, "baseline": "max ( zip ( a , key = lambda x : x [ 1 ] ) )", "tranx-annot": "my List [ n . find ( ` n ` ) ! = 0 ]", "best-tranx": "[ list ( item ) for key , item in list ( my List . _fields . items ( ) ) ]", "best-tranx-rerank": "[ item . attribute for item in my List if item [ ` n ` ] = = n ]", "meteor-baseline": 0.1645, "meteor-tranx-annot": 0.3197, "meteor-best-tranx": 0.3055, "meteor-best-tranx-rerank": 0.6182, "rougel-baseline": 0.3125, "rougel-tranx-annot": 0.4667, "rougel-best-tranx": 0.3784, "rougel-best-tranx-rerank": 0.6286}, {"intent": "converting list of string to list of integer", "rewritten_intent": "converting list of strings `intstringlist` to list of integer `nums`", "snippet": "nums = [int(x) for x in intstringlist]", "question_id": 10351772, "baseline-bleu": 0.1111, "tranx-annot-bleu": 0.1531, "best-tranx-bleu": 0.7861, "best-tranx-bleu-rerank": 1.0, "baseline": "[ item [ i : i + n ] for item in lst ]", "tranx-annot": "[ x for item in intstringlist if nums ! = ` nums ` ]", "best-tranx": "intstringlist = [ int ( x ) for x in nums ]", "best-tranx-rerank": "nums = [ int ( x ) for x in intstringlist ]", "meteor-baseline": 0.1639, "meteor-tranx-annot": 0.4361, "meteor-best-tranx": 0.9815, "meteor-best-tranx-rerank": 0.9997, "rougel-baseline": 0.3077, "rougel-tranx-annot": 0.6154, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 1.0}, {"intent": "converting list of string to list of integer", "rewritten_intent": "convert list of string numbers into list of integers", "snippet": "map(int, eval(input('Enter the unfriendly numbers: ')))", "question_id": 10351772, "baseline-bleu": 0.0856, "tranx-annot-bleu": 0.1306, "best-tranx-bleu": 0.1267, "best-tranx-bleu-rerank": 0.1267, "baseline": "[ int ( i ) for i in range ( 3 ) ]", "tranx-annot": "[ int ( i ) for i in s . split ( ` , ` ) ]", "best-tranx": "[ int ( x ) for x in map ( list , zip ( * integers ) ) ]", "best-tranx-rerank": "[ int ( x ) for x in map ( list , zip ( * integers ) ) ]", "meteor-baseline": 0.1429, "meteor-tranx-annot": 0.2972, "meteor-best-tranx": 0.3226, "meteor-best-tranx-rerank": 0.3226, "rougel-baseline": 0.3226, "rougel-tranx-annot": 0.4571, "rougel-best-tranx": 0.4865, "rougel-best-tranx-rerank": 0.4865}, {"intent": "print in Python without newline or space", "rewritten_intent": "print \".\" without newline", "snippet": "sys.stdout.write('.')", "question_id": 493386, "baseline-bleu": 0.2086, "tranx-annot-bleu": 0.1973, "best-tranx-bleu": 0.0828, "best-tranx-bleu-rerank": 0.0828, "baseline": "print ( 'Hello#SPACE#args' )", "tranx-annot": "` ` ` ` ` ` . rstrip ( )", "best-tranx": "print ( ` < unk > % s , < unk > ` % ( 1 , 2 , 3 ) )", "best-tranx-rerank": "print ( ` < unk > % s , < unk > ` % ( 1 , 2 , 3 ) )", "meteor-baseline": 0.375, "meteor-tranx-annot": 0.25, "meteor-best-tranx": 0.1786, "meteor-best-tranx-rerank": 0.1786, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.25, "rougel-best-tranx-rerank": 0.25}, {"intent": "Python float to int conversion", "rewritten_intent": "round off the float that is the product of `2.52 * 100` and convert it to an int", "snippet": "int(round(2.51 * 100))", "question_id": 6569528, "baseline-bleu": 0.1554, "tranx-annot-bleu": 0.26, "best-tranx-bleu": 0.1863, "best-tranx-bleu-rerank": 0.634, "baseline": "print ( [ x for i in range ( 100 ) ]", "tranx-annot": "float ( round ( 10 , 2 ) )", "best-tranx": "sum ( x * y for x , y in zip ( 2 . 52 * 100 , 2 . 52 * 100 ) )", "best-tranx-rerank": "float ( round ( 2 . 52 * 100 ) )", "meteor-baseline": 0.1802, "meteor-tranx-annot": 0.5208, "meteor-best-tranx": 0.6048, "meteor-best-tranx-rerank": 0.8137, "rougel-baseline": 0.3478, "rougel-tranx-annot": 0.6, "rougel-best-tranx": 0.4444, "rougel-best-tranx-rerank": 0.8182}, {"intent": "Find all files in directory with extension .txt", "rewritten_intent": "Find all files in directory \"/mydir\" with extension \".txt\"", "snippet": "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass", "question_id": 3964681, "baseline-bleu": 0.109, "tranx-annot-bleu": 0.1336, "best-tranx-bleu": 0.3321, "best-tranx-bleu-rerank": 0.3321, "baseline": "with open ( 'file.txt' , 'file' )", "tranx-annot": "os . listdir ( ` / mydir ` )", "best-tranx": "results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]", "best-tranx-rerank": "results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]", "meteor-baseline": 0.3006, "meteor-tranx-annot": 0.3122, "meteor-best-tranx": 0.6724, "meteor-best-tranx-rerank": 0.6724, "rougel-baseline": 0.4865, "rougel-tranx-annot": 0.4848, "rougel-best-tranx": 0.6538, "rougel-best-tranx-rerank": 0.6538}, {"intent": "Find all files in directory with extension .txt", "rewritten_intent": "Find all files in directory \"/mydir\" with extension \".txt\"", "snippet": "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass", "question_id": 3964681, "baseline-bleu": 0.1082, "tranx-annot-bleu": 0.169, "best-tranx-bleu": 0.5912, "best-tranx-bleu-rerank": 0.5912, "baseline": "with open ( 'file.txt' , 'file' )", "tranx-annot": "os . listdir ( ` / mydir ` )", "best-tranx": "results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]", "best-tranx-rerank": "results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]", "meteor-baseline": 0.3126, "meteor-tranx-annot": 0.3276, "meteor-best-tranx": 0.7874, "meteor-best-tranx-rerank": 0.7874, "rougel-baseline": 0.5263, "rougel-tranx-annot": 0.5294, "rougel-best-tranx": 0.7547, "rougel-best-tranx-rerank": 0.7547}, {"intent": "Find all files in directory with extension .txt", "rewritten_intent": "Find all files in directory \"/mydir\" with extension \".txt\"", "snippet": "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass", "question_id": 3964681, "baseline-bleu": 0.0474, "tranx-annot-bleu": 0.0352, "best-tranx-bleu": 0.3669, "best-tranx-bleu-rerank": 0.3669, "baseline": "with open ( 'file.txt' , 'file' )", "tranx-annot": "os . listdir ( ` / mydir ` )", "best-tranx": "results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]", "best-tranx-rerank": "results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]", "meteor-baseline": 0.237, "meteor-tranx-annot": 0.2109, "meteor-best-tranx": 0.5313, "meteor-best-tranx-rerank": 0.5313, "rougel-baseline": 0.449, "rougel-tranx-annot": 0.3556, "rougel-best-tranx": 0.5937, "rougel-best-tranx-rerank": 0.5937}, {"intent": "Pandas (python) plot() without a legend", "rewritten_intent": "plot dataframe `df` without a legend", "snippet": "df.plot(legend=False)", "question_id": 20865487, "baseline-bleu": 0.2241, "tranx-annot-bleu": 0.205, "best-tranx-bleu": 0.3814, "best-tranx-bleu-rerank": 0.3814, "baseline": "df . reset_index ( )", "tranx-annot": "df . legend ( columns = ` True ` )", "best-tranx": "df . legend ( frameon = False )", "best-tranx-rerank": "df . legend ( frameon = False )", "meteor-baseline": 0.4099, "meteor-tranx-annot": 0.52, "meteor-best-tranx": 0.7934, "meteor-best-tranx-rerank": 0.7934, "rougel-baseline": 0.6154, "rougel-tranx-annot": 0.6667, "rougel-best-tranx": 0.875, "rougel-best-tranx-rerank": 0.875}, {"intent": "loop through an IP address range", "rewritten_intent": "loop through the IP address range \"192.168.x.x\"", "snippet": "for i in range(256):\n    for j in range(256):\n        ip = ('192.168.%d.%d' % (i, j))\n        print(ip)", "question_id": 13368659, "baseline-bleu": 0.0252, "tranx-annot-bleu": 0.1279, "best-tranx-bleu": 0.1468, "best-tranx-bleu-rerank": 0.1468, "baseline": "winsound . savefig ( '<unk>#SPACE#<unk>' )", "tranx-annot": "f . ip ( list ( range ( 0 , list ( range ( 0 , set ( 192 . 168 . x . x ) ) ) ) ) )", "best-tranx": "print ( socket . loads ( os . path . normpath ( ` 192 . 168 . x . x ` ) ) )", "best-tranx-rerank": "print ( socket . loads ( os . path . normpath ( ` 192 . 168 . x . x ` ) ) )", "meteor-baseline": 0.0649, "meteor-tranx-annot": 0.3581, "meteor-best-tranx": 0.3089, "meteor-best-tranx-rerank": 0.3089, "rougel-baseline": 0.1754, "rougel-tranx-annot": 0.5278, "rougel-best-tranx": 0.4308, "rougel-best-tranx-rerank": 0.4308}, {"intent": "loop through an IP address range", "rewritten_intent": "loop through the IP address range \"192.168.x.x\"", "snippet": "for (i, j) in product(list(range(256)), list(range(256))):\n    pass", "question_id": 13368659, "baseline-bleu": 0.0428, "tranx-annot-bleu": 0.3206, "best-tranx-bleu": 0.0957, "best-tranx-bleu-rerank": 0.0957, "baseline": "winsound . savefig ( '<unk>#SPACE#<unk>' )", "tranx-annot": "f . ip ( list ( range ( 0 , list ( range ( 0 , set ( 192 . 168 . x . x ) ) ) ) ) )", "best-tranx": "print ( socket . loads ( os . path . normpath ( ` 192 . 168 . x . x ` ) ) )", "best-tranx-rerank": "print ( socket . loads ( os . path . normpath ( ` 192 . 168 . x . x ` ) ) )", "meteor-baseline": 0.0386, "meteor-tranx-annot": 0.4668, "meteor-best-tranx": 0.1914, "meteor-best-tranx-rerank": 0.1914, "rougel-baseline": 0.093, "rougel-tranx-annot": 0.6207, "rougel-best-tranx": 0.2353, "rougel-best-tranx-rerank": 0.2353}, {"intent": "loop through an IP address range", "rewritten_intent": "loop through the IP address range \"192.168.x.x\"", "snippet": "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)", "question_id": 13368659, "baseline-bleu": 0.0569, "tranx-annot-bleu": 0.1322, "best-tranx-bleu": 0.2266, "best-tranx-bleu-rerank": 0.2266, "baseline": "winsound . savefig ( '<unk>#SPACE#<unk>' )", "tranx-annot": "f . ip ( list ( range ( 0 , list ( range ( 0 , set ( 192 . 168 . x . x ) ) ) ) ) )", "best-tranx": "print ( socket . loads ( os . path . normpath ( ` 192 . 168 . x . x ` ) ) )", "best-tranx-rerank": "print ( socket . loads ( os . path . normpath ( ` 192 . 168 . x . x ` ) ) )", "meteor-baseline": 0.0933, "meteor-tranx-annot": 0.2928, "meteor-best-tranx": 0.3704, "meteor-best-tranx-rerank": 0.3704, "rougel-baseline": 0.2273, "rougel-tranx-annot": 0.339, "rougel-best-tranx": 0.4615, "rougel-best-tranx-rerank": 0.4615}, {"intent": "Python/Numpy: Convert list of bools to unsigned int", "rewritten_intent": "Sum the corresponding decimal values for binary values of each boolean element in list `x`", "snippet": "sum(1 << i for i, b in enumerate(x) if b)", "question_id": 4065737, "baseline-bleu": 0.0921, "tranx-annot-bleu": 0.0953, "best-tranx-bleu": 0.1477, "best-tranx-bleu-rerank": 0.1477, "baseline": "[ x [ 0 ] for x in range ( 0 , X ) ]", "tranx-annot": "map ( sum , zip ( * x ) )", "best-tranx": "sum ( float ( x ) for x in x )", "best-tranx-rerank": "sum ( int ( x ) for x in x )", "meteor-baseline": 0.1695, "meteor-tranx-annot": 0.2788, "meteor-best-tranx": 0.3075, "meteor-best-tranx-rerank": 0.3075, "rougel-baseline": 0.3636, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.5517, "rougel-best-tranx-rerank": 0.5517}, {"intent": "Python: How to write multiple strings in one line?", "rewritten_intent": "write multiple strings `line1`, `line2` and `line3` in one line in a file `target`", "snippet": "target.write('%r\\n%r\\n%r\\n' % (line1, line2, line3))", "question_id": 8691311, "baseline-bleu": 0.07, "tranx-annot-bleu": 0.1033, "best-tranx-bleu": 0.2327, "best-tranx-bleu-rerank": 0.2122, "baseline": "cursor . execute ( 'INSERT#SPACE#INTO#SPACE#INTO#SPACE#foo#SPACE#foo' )", "tranx-annot": "line1 = ` \\ n ` . join ( [ c for c in line1 if line3 not in line3 ] )", "best-tranx": "line2 . write ( ` \\ n ` . join ( line3 for i , v in zip ( line1 , line2 ) if c ! = ` line3 ` ) )", "best-tranx-rerank": "line2 . write ( ` \\ n ` . join ( line3 for i , v in zip ( line1 , target ) if c not in line2 ) )", "meteor-baseline": 0.0936, "meteor-tranx-annot": 0.2597, "meteor-best-tranx": 0.4058, "meteor-best-tranx-rerank": 0.4625, "rougel-baseline": 0.1961, "rougel-tranx-annot": 0.3673, "rougel-best-tranx": 0.5085, "rougel-best-tranx-rerank": 0.5614}, {"intent": "How to flatten a hetrogenous list of list into a single list in python?", "rewritten_intent": "Convert list of lists `data` into a flat list", "snippet": "[y for x in data for y in (x if isinstance(x, list) else [x])]", "question_id": 10632111, "baseline-bleu": 0.046, "tranx-annot-bleu": 0.0712, "best-tranx-bleu": 0.0773, "best-tranx-bleu-rerank": 0.0773, "baseline": "list ( itertools . chain . from_iterable ( 1 ) )", "tranx-annot": "print ( map ( lambda x : map ( int , x . split ( ) ) , s ) )", "best-tranx": "[ j for i in data for j in i ]", "best-tranx-rerank": "[ j for i in data for j in i ]", "meteor-baseline": 0.1101, "meteor-tranx-annot": 0.1477, "meteor-best-tranx": 0.2522, "meteor-best-tranx-rerank": 0.2522, "rougel-baseline": 0.2857, "rougel-tranx-annot": 0.3111, "rougel-best-tranx": 0.4, "rougel-best-tranx-rerank": 0.4}, {"intent": "In Python, is it possible to escape newline characters when printing a string?", "rewritten_intent": "Print new line character as `\\n` in a string `foo\\nbar`", "snippet": "print('foo\\nbar'.encode('string_escape'))", "question_id": 15392730, "baseline-bleu": 0.131, "tranx-annot-bleu": 0.1666, "best-tranx-bleu": 0.223, "best-tranx-bleu-rerank": 0.223, "baseline": "with open ( 'a#SPACE#String' )", "tranx-annot": "print ( foo bar . find ( ` \\ n ` ) [ 1 ] )", "best-tranx": "print ( ` \\ n ` . format ( foo bar ) )", "best-tranx-rerank": "print ( ` \\ n ` . format ( foo bar ) )", "meteor-baseline": 0.2162, "meteor-tranx-annot": 0.5487, "meteor-best-tranx": 0.5027, "meteor-best-tranx-rerank": 0.5027, "rougel-baseline": 0.3077, "rougel-tranx-annot": 0.6452, "rougel-best-tranx": 0.7143, "rougel-best-tranx-rerank": 0.7143}, {"intent": "String Slicing Python", "rewritten_intent": "remove last comma character ',' in string `s`", "snippet": "\"\"\"\"\"\".join(s.rsplit(',', 1))", "question_id": 1010961, "baseline-bleu": 0.5388, "tranx-annot-bleu": 0.2585, "best-tranx-bleu": 0.2585, "best-tranx-bleu-rerank": 0.2585, "baseline": "\"\"\"\"\"\" . join ( [ 'a' , '' , s )", "tranx-annot": "s = s . replace ( ` , ` , ` ` )", "best-tranx": "s = s . replace ( ` , ` , ` ` )", "best-tranx-rerank": "s = s . replace ( ` , ` , ` ` )", "meteor-baseline": 0.6051, "meteor-tranx-annot": 0.3293, "meteor-best-tranx": 0.3293, "meteor-best-tranx-rerank": 0.3293, "rougel-baseline": 0.7692, "rougel-tranx-annot": 0.6061, "rougel-best-tranx": 0.6061, "rougel-best-tranx-rerank": 0.6061}, {"intent": "Middle point of each pair of an numpy.array", "rewritten_intent": "calculate the mean of each element in array `x` with the element previous to it", "snippet": "(x[1:] + x[:-1]) / 2", "question_id": 23855976, "baseline-bleu": 0.1474, "tranx-annot-bleu": 0.1072, "best-tranx-bleu": 0.1529, "best-tranx-bleu-rerank": 0.1529, "baseline": "[ x [ 0 ] for i in range ( len ( x ) ) ]", "tranx-annot": "r = map ( int , np . product ( x ) )", "best-tranx": "np . dot ( x [ : , ( 2 ) ] , axis = 0 ) . mean ( )", "best-tranx-rerank": "np . dot ( x [ : , ( 2 ) ] , axis = 0 ) . mean ( )", "meteor-baseline": 0.2812, "meteor-tranx-annot": 0.0955, "meteor-best-tranx": 0.3469, "meteor-best-tranx-rerank": 0.3469, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.2069, "rougel-best-tranx": 0.3784, "rougel-best-tranx-rerank": 0.3784}, {"intent": "Middle point of each pair of an numpy.array", "rewritten_intent": "get an array of the mean of each two consecutive values in numpy array `x`", "snippet": "x[:-1] + (x[1:] - x[:-1]) / 2", "question_id": 23855976, "baseline-bleu": 0.0636, "tranx-annot-bleu": 0.0584, "best-tranx-bleu": 0.1425, "best-tranx-bleu-rerank": 0.2736, "baseline": "arr [ arr [ 0 ] for i in range ( 0 ) ]", "tranx-annot": "var_1 = np . mean ( 0 , 2 , axis = 1 )", "best-tranx": "np . mean ( np . mean ( x [ : , ( None ) ] ) , axis = 0 )", "best-tranx-rerank": "np . mean ( np . mean ( x [ : : - 1 ] ) , axis = 0 )", "meteor-baseline": 0.1584, "meteor-tranx-annot": 0.0905, "meteor-best-tranx": 0.2232, "meteor-best-tranx-rerank": 0.3609, "rougel-baseline": 0.3243, "rougel-tranx-annot": 0.2162, "rougel-best-tranx": 0.2667, "rougel-best-tranx-rerank": 0.4091}, {"intent": "Reading unicode elements into numpy array", "rewritten_intent": "load data containing `utf-8` from file `new.txt` into numpy array `arr`", "snippet": "arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')", "question_id": 6375343, "baseline-bleu": 0.1046, "tranx-annot-bleu": 0.0611, "best-tranx-bleu": 0.3304, "best-tranx-bleu-rerank": 0.4796, "baseline": "arr = open ( 'file.txt' , delimiter = None )", "tranx-annot": "arr = [ line [ i : i + arr ] for i in range ( 0 , len ( arr ) ) ]", "best-tranx": "numpy . loadtxt ( open ( ` new . txt ` , ` rb ` ) , delimiter = ` new . txt ` )", "best-tranx-rerank": "numpy . loadtxt ( open ( ` new . txt ` , ` rb ` ) , delimiter = ` utf - 8 ` , dtype = None )", "meteor-baseline": 0.2645, "meteor-tranx-annot": 0.1122, "meteor-best-tranx": 0.599, "meteor-best-tranx-rerank": 0.6969, "rougel-baseline": 0.4783, "rougel-tranx-annot": 0.25, "rougel-best-tranx": 0.7018, "rougel-best-tranx-rerank": 0.7869}, {"intent": "How to sort this list in Python?", "rewritten_intent": "reverse sort list of dicts `l` by value for key `time`", "snippet": "l = sorted(l, key=itemgetter('time'), reverse=True)", "question_id": 1547733, "baseline-bleu": 0.1435, "tranx-annot-bleu": 0.2981, "best-tranx-bleu": 0.3635, "best-tranx-bleu-rerank": 0.3635, "baseline": "sorted ( list ( d . items ( ) ) , key = lambda x : x [ 1 ] ) )", "tranx-annot": "sorted ( l , key = lambda x : x [ time ] )", "best-tranx": "sorted ( l , key = lambda x : x [ ` time ` ] )", "best-tranx-rerank": "sorted ( l , key = lambda x : x [ ` time ` ] )", "meteor-baseline": 0.2073, "meteor-tranx-annot": 0.2162, "meteor-best-tranx": 0.3979, "meteor-best-tranx-rerank": 0.3979, "rougel-baseline": 0.3902, "rougel-tranx-annot": 0.4848, "rougel-best-tranx": 0.5714, "rougel-best-tranx-rerank": 0.5714}, {"intent": "How to sort this list in Python?", "rewritten_intent": "Sort a list of dictionary `l` based on key `time` in descending order", "snippet": "l = sorted(l, key=lambda a: a['time'], reverse=True)", "question_id": 1547733, "baseline-bleu": 0.1971, "tranx-annot-bleu": 0.2465, "best-tranx-bleu": 0.3731, "best-tranx-bleu-rerank": 0.4549, "baseline": "sorted ( my_dict . items ( ) ) , key = lambda x : x [ 1 ] )", "tranx-annot": "sorted ( l , on = [ ` True ` , ` False ` ] , inplace = ` True ` )", "best-tranx": "sorted ( l , key = l . get , reverse = True )", "best-tranx-rerank": "sorted ( l , key = lambda x : list ( x . values ( ) ) [ 0 ] , reverse = True )", "meteor-baseline": 0.2304, "meteor-tranx-annot": 0.4564, "meteor-best-tranx": 0.5456, "meteor-best-tranx-rerank": 0.6511, "rougel-baseline": 0.4878, "rougel-tranx-annot": 0.5909, "rougel-best-tranx": 0.6667, "rougel-best-tranx-rerank": 0.6383}, {"intent": "pandas DataFrame filter regex", "rewritten_intent": "get rows of dataframe `df` that match regex '(Hel|Just)'", "snippet": "df.loc[df[0].str.contains('(Hel|Just)')]", "question_id": 37080612, "baseline-bleu": 0.0778, "tranx-annot-bleu": 0.3118, "best-tranx-bleu": 0.4293, "best-tranx-bleu-rerank": 0.4293, "baseline": "df . groupby ( [ '<unk>' , '<unk>' : '<unk><unk>' ] )", "tranx-annot": "df [ re . path . join ( re . path . map ( str , ` ( Hel | Just ) ` ) , axis = 1 ) ]", "best-tranx": "df . apply ( lambda x : x . endswith ( ` ( Hel | Just ) ` ) )", "best-tranx-rerank": "df . apply ( lambda x : x . startswith ( ` ( Hel | Just ) ` ) )", "meteor-baseline": 0.1778, "meteor-tranx-annot": 0.6161, "meteor-best-tranx": 0.4958, "meteor-best-tranx-rerank": 0.4958, "rougel-baseline": 0.3265, "rougel-tranx-annot": 0.6154, "rougel-best-tranx": 0.5714, "rougel-best-tranx-rerank": 0.5714}, {"intent": "How do I find the string between two special characters?", "rewritten_intent": "find the string in `your_string` between two special characters \"[\" and \"]\"", "snippet": "re.search('\\\\[(.*)\\\\]', your_string).group(1)", "question_id": 14716342, "baseline-bleu": 0.0865, "tranx-annot-bleu": 0.0884, "best-tranx-bleu": 0.2007, "best-tranx-bleu-rerank": 0.179, "baseline": "driver . find_elements_by_css_selector ( 'a#SPACE#' ) . split ( )", "tranx-annot": "` ` ` ` ` ` . join ( your_string . split ( ` [ ` ) for x in str ( ] ) . split ( ` ] ` ) )", "best-tranx": "print ( ` ` . join ( re . findall ( ` < unk > ` , your_string ) ) )", "best-tranx-rerank": "print ( ` ` . join ( re . findall ( ` \u00ab ( [ \\ \\ s \\ \\ S ] * ? ) \u00bb ` , your_string ) ) )", "meteor-baseline": 0.2303, "meteor-tranx-annot": 0.3385, "meteor-best-tranx": 0.3824, "meteor-best-tranx-rerank": 0.6, "rougel-baseline": 0.4103, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.5778, "rougel-best-tranx-rerank": 0.7143}, {"intent": "How to create a list of date string in 'yyyymmdd' format with Python Pandas?", "rewritten_intent": null, "snippet": "[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]", "question_id": 18684076, "baseline-bleu": 0.0804, "tranx-annot-bleu": 0.0277, "best-tranx-bleu": 0.0673, "best-tranx-bleu-rerank": 0.0673, "baseline": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) , key = lambda x : x [ 1 ] )", "tranx-annot": "datetime . datetime . now ( ) . date ( )", "best-tranx": "pd . to_datetime ( df . index . dt [ 0 ] , format = ` < unk > ` )", "best-tranx-rerank": "pd . to_datetime ( df . index . dt [ 0 ] , format = ` < unk > ` )", "meteor-baseline": 0.1993, "meteor-tranx-annot": 0.1068, "meteor-best-tranx": 0.2007, "meteor-best-tranx-rerank": 0.2007, "rougel-baseline": 0.3607, "rougel-tranx-annot": 0.2927, "rougel-best-tranx": 0.3529, "rougel-best-tranx-rerank": 0.3529}, {"intent": "How to count the number of times something occurs inside a certain string?", "rewritten_intent": "count number of times string 'brown' occurred in string 'The big brown fox is brown'", "snippet": "\"\"\"The big brown fox is brown\"\"\".count('brown')", "question_id": 1666700, "baseline-bleu": 0.0105, "tranx-annot-bleu": 0.266, "best-tranx-bleu": 1.0, "best-tranx-bleu-rerank": 1.0, "baseline": "<unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk>' )", "tranx-annot": "sum ( isinstance ( x , ` brown ` ) for i in range ( 0 , len ( The big brown fox is brown ) , 2 ) )", "best-tranx": "` ` ` The big brown fox is brown ` ` ` . count ( ` brown ` )", "best-tranx-rerank": "` ` ` The big brown fox is brown ` ` ` . count ( ` brown ` )", "meteor-baseline": 0.0586, "meteor-tranx-annot": 0.3974, "meteor-best-tranx": 0.9999, "meteor-best-tranx-rerank": 0.9999, "rougel-baseline": 0.0238, "rougel-tranx-annot": 0.449, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 1.0}, {"intent": "Sending post data from angularjs to django as JSON and not as raw content", "rewritten_intent": "decode json string `request.body` to python dict", "snippet": "json.loads(request.body)", "question_id": 18979111, "baseline-bleu": 0.081, "tranx-annot-bleu": 0.2224, "best-tranx-bleu": 0.2367, "best-tranx-bleu-rerank": 0.2102, "baseline": "urllib . parse . unquote ( urllib . parse . unquote ( 'utf-8' ) )", "tranx-annot": "urllib . parse . unquote ( ` request . body ` )", "best-tranx": "json . load ( json )", "best-tranx-rerank": "json . load ( json , content_type = ` request . body ` )", "meteor-baseline": 0.2198, "meteor-tranx-annot": 0.6085, "meteor-best-tranx": 0.4769, "meteor-best-tranx-rerank": 0.8721, "rougel-baseline": 0.2963, "rougel-tranx-annot": 0.6, "rougel-best-tranx": 0.5714, "rougel-best-tranx-rerank": 0.6364}, {"intent": "Download file from web in Python 3", "rewritten_intent": "download the file from url `url` and save it under file `file_name`", "snippet": "urllib.request.urlretrieve(url, file_name)", "question_id": 7243750, "baseline-bleu": 0.1585, "tranx-annot-bleu": 0.1428, "best-tranx-bleu": 0.1868, "best-tranx-bleu-rerank": 0.1868, "baseline": "print ( os . path . get ( file_url )", "tranx-annot": "f = open ( open ( url ) , ` url ` )", "best-tranx": "file_name = wget . download ( file_name )", "best-tranx-rerank": "file_name = wget . download ( file_name )", "meteor-baseline": 0.2, "meteor-tranx-annot": 0.1942, "meteor-best-tranx": 0.3221, "meteor-best-tranx-rerank": 0.3221, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.3478, "rougel-best-tranx": 0.4444, "rougel-best-tranx-rerank": 0.4444}, {"intent": "Split string into a list", "rewritten_intent": "split string `text` by space", "snippet": "text.split()", "question_id": 743806, "baseline-bleu": 0.1355, "tranx-annot-bleu": 0.3013, "best-tranx-bleu": 0.2907, "best-tranx-bleu-rerank": 0.2907, "baseline": "\"\"\"\"\"\" . join ( s )", "tranx-annot": "[ x . strip ( ) for item in text . split ( ) ]", "best-tranx": "re . split ( ` ` , text )", "best-tranx-rerank": "re . split ( ` ` , text )", "meteor-baseline": 0.2679, "meteor-tranx-annot": 0.83, "meteor-best-tranx": 0.8259, "meteor-best-tranx-rerank": 0.8259, "rougel-baseline": 0.375, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.7143, "rougel-best-tranx-rerank": 0.7143}, {"intent": "Split string into a list", "rewritten_intent": "split string `text` by \",\"", "snippet": "text.split(',')", "question_id": 743806, "baseline-bleu": 0.0716, "tranx-annot-bleu": 0.6077, "best-tranx-bleu": 0.5594, "best-tranx-bleu-rerank": 0.8633, "baseline": "\"\"\"<unk>#SPACE#Hello#SPACE#Hello#SPACE#Hello#SPACE#string' )", "tranx-annot": "re . split ( ` , ` , text )", "best-tranx": "re . split ( ` , ` , ` , ` )", "best-tranx-rerank": ", . split ( ` , ` )", "meteor-baseline": 0.2662, "meteor-tranx-annot": 0.8565, "meteor-best-tranx": 0.8236, "meteor-best-tranx-rerank": 0.8737, "rougel-baseline": 0.1875, "rougel-tranx-annot": 0.8889, "rougel-best-tranx": 0.7, "rougel-best-tranx-rerank": 0.875}, {"intent": "Split string into a list", "rewritten_intent": "Split string `line` into a list by whitespace", "snippet": "line.split()", "question_id": 743806, "baseline-bleu": 0.1051, "tranx-annot-bleu": 0.2097, "best-tranx-bleu": 0.2097, "best-tranx-bleu-rerank": 0.2097, "baseline": "\"\"\"\"\"\" . join ( '\\n' )", "tranx-annot": "[ x . strip ( ) for x in line . split ( ` , ` ) ]", "best-tranx": "[ x . strip ( ) for x in line . split ( ` , ` ) ]", "best-tranx-rerank": "[ x . strip ( ) for x in line . split ( ` , ` ) ]", "meteor-baseline": 0.2542, "meteor-tranx-annot": 0.7683, "meteor-best-tranx": 0.7683, "meteor-best-tranx-rerank": 0.7683, "rougel-baseline": 0.3158, "rougel-tranx-annot": 0.4348, "rougel-best-tranx": 0.4348, "rougel-best-tranx-rerank": 0.4348}, {"intent": "Replacing characters in a regex", "rewritten_intent": "replace dot characters  '.' associated with ascii letters in list `s` with space ' '", "snippet": "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', ' ', i) for i in s]", "question_id": 35044115, "baseline-bleu": 0.1578, "tranx-annot-bleu": 0.0081, "best-tranx-bleu": 0.1845, "best-tranx-bleu-rerank": 0.0807, "baseline": "re . sub ( '(ddd)' , '*' , s )", "tranx-annot": "s . dot ( ` . ` )", "best-tranx": "` ` ` ` ` ` . join ( [ chr ( i ) for i in s ] )", "best-tranx-rerank": "` ` ` ` ` ` . replace ( ` , ` , ` ` )", "meteor-baseline": 0.3367, "meteor-tranx-annot": 0.1054, "meteor-best-tranx": 0.3895, "meteor-best-tranx-rerank": 0.1718, "rougel-baseline": 0.5385, "rougel-tranx-annot": 0.3182, "rougel-best-tranx": 0.5714, "rougel-best-tranx-rerank": 0.3462}, {"intent": "Sort A list of Strings Based on certain field", "rewritten_intent": "sort list `list_of_strings` based on second index of each string `s`", "snippet": "sorted(list_of_strings, key=lambda s: s.split(',')[1])", "question_id": 38388799, "baseline-bleu": 0.0848, "tranx-annot-bleu": 0.0918, "best-tranx-bleu": 0.1942, "best-tranx-bleu-rerank": 0.1942, "baseline": "my_list = [ ( k , v ) for k , v in list ( my_dict . items ( ) ) ]", "tranx-annot": "list_of_strings . sort ( key = operator . itemgetter ( 1 ) )", "best-tranx": "list_of_strings . sort ( key = lambda x : s . index ( x [ 0 ] ) )", "best-tranx-rerank": "list_of_strings . sort ( key = lambda x : s . index ( x [ 0 ] ) )", "meteor-baseline": 0.237, "meteor-tranx-annot": 0.3683, "meteor-best-tranx": 0.5837, "meteor-best-tranx-rerank": 0.5837, "rougel-baseline": 0.4651, "rougel-tranx-annot": 0.5294, "rougel-best-tranx": 0.65, "rougel-best-tranx-rerank": 0.65}, {"intent": "how to call multiple bash functions using | in python", "rewritten_intent": "call multiple bash function \u2018vasp\u2019 and \u2018tee tee_output\u2019 using \u2018|\u2019", "snippet": "subprocess.check_call('vasp | tee tee_output', shell=True)", "question_id": 9609375, "baseline-bleu": 0.0372, "tranx-annot-bleu": 0.1368, "best-tranx-bleu": 0.4263, "best-tranx-bleu-rerank": 0.1179, "baseline": "re . compile ( '(://zA)' , '<unk>#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#<unk>' )", "tranx-annot": "tee . vasp ( vasp = ` str_1 ` , tee = ` tee ` )", "best-tranx": "pandas . read_csv ( ` | ` , shell = True )", "best-tranx-rerank": "os . system ( ` tee_output en_US ` )", "meteor-baseline": 0.1554, "meteor-tranx-annot": 0.298, "meteor-best-tranx": 0.6585, "meteor-best-tranx-rerank": 0.2961, "rougel-baseline": 0.1644, "rougel-tranx-annot": 0.5806, "rougel-best-tranx": 0.7407, "rougel-best-tranx-rerank": 0.5}, {"intent": "How to eliminate all strings from a list", "rewritten_intent": "eliminate all strings from list `lst`", "snippet": "[element for element in lst if isinstance(element, int)]", "question_id": 37004138, "baseline-bleu": 0.1046, "tranx-annot-bleu": 0.1875, "best-tranx-bleu": 0.1421, "best-tranx-bleu-rerank": 0.0959, "baseline": "list ( map ( list , list ( s ) ) )", "tranx-annot": "print ( [ item for item in lst if x not in k ] )", "best-tranx": "[ dict ( y ) for y in lst ]", "best-tranx-rerank": "[ k for k , v in [ x . split ( ` = ` ) for x in lst ] ]", "meteor-baseline": 0.1087, "meteor-tranx-annot": 0.3773, "meteor-best-tranx": 0.3526, "meteor-best-tranx-rerank": 0.3595, "rougel-baseline": 0.2308, "rougel-tranx-annot": 0.5517, "rougel-best-tranx": 0.5833, "rougel-best-tranx-rerank": 0.4444}, {"intent": "How to eliminate all strings from a list", "rewritten_intent": "get all the elements except strings from the list 'lst'.", "snippet": "[element for element in lst if not isinstance(element, str)]", "question_id": 37004138, "baseline-bleu": 0.1251, "tranx-annot-bleu": 0.1345, "best-tranx-bleu": 0.1761, "best-tranx-bleu-rerank": 0.1761, "baseline": "[ item [ 0 ] for x in s . split ( '' ) ]", "tranx-annot": "[ [ x for x in lst ] for item in zip ( * lst ) ]", "best-tranx": "[ x for x in lst if x [ 2 ] = = 1 ]", "best-tranx-rerank": "[ x for x in lst if x [ 2 ] = = 1 ]", "meteor-baseline": 0.2824, "meteor-tranx-annot": 0.3155, "meteor-best-tranx": 0.3407, "meteor-best-tranx-rerank": 0.3407, "rougel-baseline": 0.3871, "rougel-tranx-annot": 0.4375, "rougel-best-tranx": 0.4, "rougel-best-tranx-rerank": 0.4}, {"intent": "How do I sort a list of dictionaries by values of the dictionary in Python?", "rewritten_intent": "Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`", "snippet": "newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])", "question_id": 72899, "baseline-bleu": 0.2078, "tranx-annot-bleu": 0.4092, "best-tranx-bleu": 0.4092, "best-tranx-bleu-rerank": 0.4092, "baseline": "sorted ( list ( my_dict . items ( ) ) , key = lambda x : x [ 1 ] ) )", "tranx-annot": "sorted ( list_to_be_sorted , key = lambda x : x [ x ] )", "best-tranx": "sorted ( list_to_be_sorted , key = lambda x : trial_dict [ x ] )", "best-tranx-rerank": "sorted ( list_to_be_sorted , key = lambda x : trial_dict [ x ] )", "meteor-baseline": 0.4828, "meteor-tranx-annot": 0.61, "meteor-best-tranx": 0.61, "meteor-best-tranx-rerank": 0.61, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.6875, "rougel-best-tranx": 0.6875, "rougel-best-tranx-rerank": 0.6875}, {"intent": "How do I sort a list of dictionaries by values of the dictionary in Python?", "rewritten_intent": "sort a list of dictionaries `l` by values in key `name` in descending order", "snippet": "newlist = sorted(l, key=itemgetter('name'), reverse=True)", "question_id": 72899, "baseline-bleu": 0.1505, "tranx-annot-bleu": 0.1573, "best-tranx-bleu": 0.3699, "best-tranx-bleu-rerank": 0.3699, "baseline": "sorted ( list ( mydict . items ( ) ) , key = lambda x : x [ 1 ] )", "tranx-annot": "l . sort ( key = [ ` True ` , ` False ` ] , reverse = ` True ` )", "best-tranx": "sorted ( l , key = lambda i : list ( i . values ( ) ) [ 0 ] , reverse = True )", "best-tranx-rerank": "sorted ( l , key = lambda i : list ( i . values ( ) ) [ 0 ] , reverse = True )", "meteor-baseline": 0.3041, "meteor-tranx-annot": 0.5203, "meteor-best-tranx": 0.6696, "meteor-best-tranx-rerank": 0.6696, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.5854, "rougel-best-tranx": 0.5909, "rougel-best-tranx-rerank": 0.5909}, {"intent": "How do I sort a list of dictionaries by values of the dictionary in Python?", "rewritten_intent": null, "snippet": "list_of_dicts.sort(key=operator.itemgetter('name'))", "question_id": 72899, "baseline-bleu": 0.1081, "tranx-annot-bleu": 0.0953, "best-tranx-bleu": 0.1081, "best-tranx-bleu-rerank": 0.0904, "baseline": "sorted ( list ( my_dict . items ( ) ) , key = lambda x : x [ 1 ] )", "tranx-annot": "sorted ( d , key = lambda x : x [ 1 ] [ 1 ] , reverse = ` True ` )", "best-tranx": "sorted ( data , key = lambda i : list ( i . values ( ) ) [ 0 ] )", "best-tranx-rerank": "sorted ( data , key = lambda x : list ( x . values ( ) ) [ 0 ] , reverse = True )", "meteor-baseline": 0.4074, "meteor-tranx-annot": 0.2532, "meteor-best-tranx": 0.4074, "meteor-best-tranx-rerank": 0.3125, "rougel-baseline": 0.3889, "rougel-tranx-annot": 0.3158, "rougel-best-tranx": 0.3889, "rougel-best-tranx-rerank": 0.35}, {"intent": "How do I sort a list of dictionaries by values of the dictionary in Python?", "rewritten_intent": null, "snippet": "list_of_dicts.sort(key=operator.itemgetter('age'))", "question_id": 72899, "baseline-bleu": 0.1081, "tranx-annot-bleu": 0.0953, "best-tranx-bleu": 0.1081, "best-tranx-bleu-rerank": 0.0904, "baseline": "sorted ( list ( my_dict . items ( ) ) , key = lambda x : x [ 1 ] )", "tranx-annot": "sorted ( d , key = lambda x : x [ 1 ] [ 1 ] , reverse = ` True ` )", "best-tranx": "sorted ( data , key = lambda i : list ( i . values ( ) ) [ 0 ] )", "best-tranx-rerank": "sorted ( data , key = lambda x : list ( x . values ( ) ) [ 0 ] , reverse = True )", "meteor-baseline": 0.3743, "meteor-tranx-annot": 0.2532, "meteor-best-tranx": 0.3743, "meteor-best-tranx-rerank": 0.2812, "rougel-baseline": 0.3889, "rougel-tranx-annot": 0.3158, "rougel-best-tranx": 0.3889, "rougel-best-tranx-rerank": 0.35}, {"intent": "How to sort a Dataframe by the ocurrences in a column in Python (pandas)", "rewritten_intent": null, "snippet": "df.groupby('prots').sum().sort('scores', ascending=False)", "question_id": 36402748, "baseline-bleu": 0.2117, "tranx-annot-bleu": 0.0835, "best-tranx-bleu": 0.0618, "best-tranx-bleu-rerank": 0.1503, "baseline": "pd . concat ( [ df [ 'value' ] , ascending = False )", "tranx-annot": "pd . Data Frame ( df . values [ 0 ] , axis = 1 )", "best-tranx": "df . sort_values ( * * ` row ` )", "best-tranx-rerank": "df . sort_values ( [ ` A ` , ` B ` ] , ascending = [ True , False ] )", "meteor-baseline": 0.4, "meteor-tranx-annot": 0.157, "meteor-best-tranx": 0.1382, "meteor-best-tranx-rerank": 0.3222, "rougel-baseline": 0.5128, "rougel-tranx-annot": 0.359, "rougel-best-tranx": 0.3636, "rougel-best-tranx-rerank": 0.5333}, {"intent": "How can I access elements inside a list within a dictionary python?", "rewritten_intent": "join together with \",\" elements inside a list indexed with 'category' within a dictionary `trans`", "snippet": "\"\"\",\"\"\".join(trans['category'])", "question_id": 29881993, "baseline-bleu": 0.0731, "tranx-annot-bleu": 0.1494, "best-tranx-bleu": 0.1031, "best-tranx-bleu-rerank": 0.1031, "baseline": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )", "tranx-annot": "print ( max ( list ( trans . items ( ) ) , key = lambda x : x [ ` , ` ] ) )", "best-tranx": "dict ( ( i , list ( trans . items ( ) ) [ i ] ) for i in trans )", "best-tranx-rerank": "dict ( ( i , list ( trans . items ( ) ) [ i ] ) for i in trans )", "meteor-baseline": 0.1149, "meteor-tranx-annot": 0.3845, "meteor-best-tranx": 0.2, "meteor-best-tranx-rerank": 0.2, "rougel-baseline": 0.2105, "rougel-tranx-annot": 0.4186, "rougel-best-tranx": 0.359, "rougel-best-tranx-rerank": 0.359}, {"intent": "Variants of string concatenation?", "rewritten_intent": "concatenate array of strings `['A', 'B', 'C', 'D']` into a string", "snippet": "\"\"\"\"\"\".join(['A', 'B', 'C', 'D'])", "question_id": 34158494, "baseline-bleu": 0.1753, "tranx-annot-bleu": 0.7607, "best-tranx-bleu": 1.0, "best-tranx-bleu-rerank": 1.0, "baseline": "\"\"\"\"\"\" . join ( [ 'a' , 'b' , 'b' , 'b' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , '", "tranx-annot": "print ( ` ` . join ( concatenate ( [ ` A ` , ` B ` , ` C ` , ` D ` ] ) ) )", "best-tranx": "` ` ` ` ` ` . join ( [ ` A ` , ` B ` , ` C ` , ` D ` ] )", "best-tranx-rerank": "` ` ` ` ` ` . join ( [ ` A ` , ` B ` , ` C ` , ` D ` ] )", "meteor-baseline": 0.4736, "meteor-tranx-annot": 0.8447, "meteor-best-tranx": 1.0, "meteor-best-tranx-rerank": 1.0, "rougel-baseline": 0.3818, "rougel-tranx-annot": 0.8214, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 1.0}, {"intent": "How do I get JSON data from RESTful service using Python?", "rewritten_intent": "get json data from restful service 'url'", "snippet": "json.load(urllib.request.urlopen('url'))", "question_id": 7750557, "baseline-bleu": 0.0959, "tranx-annot-bleu": 0.1718, "best-tranx-bleu": 0.2754, "best-tranx-bleu-rerank": 0.2754, "baseline": "parser . parse ( '<unk>#SPACE#<unk>#SPACE#<unk>' )", "tranx-annot": "json . dumps ( [ ` url ` , ` url ` ] ) [ 0 ]", "best-tranx": "json . loads ( ` url ` )", "best-tranx-rerank": "json . loads ( ` url ` )", "meteor-baseline": 0.2369, "meteor-tranx-annot": 0.3766, "meteor-best-tranx": 0.5361, "meteor-best-tranx-rerank": 0.5361, "rougel-baseline": 0.2703, "rougel-tranx-annot": 0.4375, "rougel-best-tranx": 0.6087, "rougel-best-tranx-rerank": 0.6087}, {"intent": "Removing an item from list matching a substring - Python", "rewritten_intent": "Remove all strings from a list a strings `sents` where the values starts with `@$\\t` or `#`", "snippet": "[x for x in sents if not x.startswith('@$\\t') and not x.startswith('#')]", "question_id": 12666897, "baseline-bleu": 0.0538, "tranx-annot-bleu": 0.0023, "best-tranx-bleu": 0.1352, "best-tranx-bleu-rerank": 0.1352, "baseline": "re . split ( '[a]' , '' , s )", "tranx-annot": "sents . strip ( )", "best-tranx": "[ x for x in sents if x is not None ]", "best-tranx-rerank": "[ x for x in sents if x not in to_del ]", "meteor-baseline": 0.1579, "meteor-tranx-annot": 0.0727, "meteor-best-tranx": 0.2638, "meteor-best-tranx-rerank": 0.2254, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.2286, "rougel-best-tranx": 0.4762, "rougel-best-tranx-rerank": 0.4762}, {"intent": "Django filter by hour", "rewritten_intent": "django filter by hour", "snippet": "Entry.objects.filter(pub_date__contains='08:00')", "question_id": 2984751, "baseline-bleu": 0.0537, "tranx-annot-bleu": 0.0654, "best-tranx-bleu": 0.0859, "best-tranx-bleu-rerank": 0.0859, "baseline": "con . version ( )", "tranx-annot": "pd . to_datetime ( { ` str_2 ` : pd . Series ( var_0 . values [ : , ( ` None ` ) ] ) } , axis = 1 )", "best-tranx": "datetime . datetime . now ( )", "best-tranx-rerank": "datetime . datetime . now ( )", "meteor-baseline": 0.1145, "meteor-tranx-annot": 0.2532, "meteor-best-tranx": 0.1504, "meteor-best-tranx-rerank": 0.1504, "rougel-baseline": 0.3158, "rougel-tranx-annot": 0.3478, "rougel-best-tranx": 0.381, "rougel-best-tranx-rerank": 0.381}, {"intent": "sort a list of dicts by x then by y", "rewritten_intent": "sort a list of dictionary `list` first by key `points` and then by `time`", "snippet": "list.sort(key=lambda item: (item['points'], item['time']))", "question_id": 5944630, "baseline-bleu": 0.1547, "tranx-annot-bleu": 0.2708, "best-tranx-bleu": 0.6843, "best-tranx-bleu-rerank": 0.6843, "baseline": "sorted ( list ( my_dict . items ( ) ) , key = lambda x : x [ 1 ] ) )", "tranx-annot": "sorted ( list ( list . items ( ) ) , key = lambda x : time [ 1 ] [ ` points ` ] , reverse = ` True ` )", "best-tranx": "list . sort ( key = lambda x : ( x [ ` points ` ] , x [ ` time ` ] ) )", "best-tranx-rerank": "list . sort ( key = lambda x : ( x [ ` points ` ] , x [ ` time ` ] ) )", "meteor-baseline": 0.5344, "meteor-tranx-annot": 0.6413, "meteor-best-tranx": 0.8774, "meteor-best-tranx-rerank": 0.8774, "rougel-baseline": 0.5532, "rougel-tranx-annot": 0.7368, "rougel-best-tranx": 0.88, "rougel-best-tranx-rerank": 0.88}, {"intent": "How to convert a Python datetime object to seconds", "rewritten_intent": "convert datetime object `(1970, 1, 1)` to seconds", "snippet": "(t - datetime.datetime(1970, 1, 1)).total_seconds()", "question_id": 7852855, "baseline-bleu": 0.1108, "tranx-annot-bleu": 0.172, "best-tranx-bleu": 0.0287, "best-tranx-bleu-rerank": 0.2174, "baseline": "\"\"\"\"\"\" . join ( [ 1 , 2 , 3 ] )", "tranx-annot": "datetime . datetime . combine ( datetime . datetime . now ( ) )", "best-tranx": "time . time ( )", "best-tranx-rerank": "datetime . datetime . strptime ( ` ( 1970 , 1 , 1 ) ` , ` % a , % d % b % Y % H : % M : % S % Z ` )", "meteor-baseline": 0.1676, "meteor-tranx-annot": 0.3587, "meteor-best-tranx": 0.153, "meteor-best-tranx-rerank": 0.4531, "rougel-baseline": 0.3429, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.2609, "rougel-best-tranx-rerank": 0.4643}, {"intent": "How to replace only part of the match with python re.sub", "rewritten_intent": "insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.", "snippet": "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'long.file.name.jpg')", "question_id": 2763750, "baseline-bleu": 0.074, "tranx-annot-bleu": 0.1145, "best-tranx-bleu": 0.1795, "best-tranx-bleu-rerank": 0.2619, "baseline": "os . system ( 'file.<unk>' , './_<unk>_<unk>' , shell = True )", "tranx-annot": "re . extension ( ` long . file . name . jpg ` , _suff )", "best-tranx": "suff . append ( [ ( x + y ) for x , y in zip ( long . file . name . jpg , _a ) ] )", "best-tranx-rerank": "suff . append ( [ ( x + _a ) for x in open ( ` long . file . name . jpg ` , ` _a ` ) ] )", "meteor-baseline": 0.1736, "meteor-tranx-annot": 0.3456, "meteor-best-tranx": 0.3755, "meteor-best-tranx-rerank": 0.4488, "rougel-baseline": 0.3288, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.5205, "rougel-best-tranx-rerank": 0.5867}, {"intent": "How can I reload objects in my namespace in ipython", "rewritten_intent": "reload a module `module`", "snippet": "import imp\nimp.reload(module)", "question_id": 6420361, "baseline-bleu": 0.1123, "tranx-annot-bleu": 0.1775, "best-tranx-bleu": 0.1015, "best-tranx-bleu-rerank": 0.1015, "baseline": "print ( )", "tranx-annot": "module = module ( ) . click ( )", "best-tranx": "module = 1", "best-tranx-rerank": "module = 1", "meteor-baseline": 0.1333, "meteor-tranx-annot": 0.2469, "meteor-best-tranx": 0.0667, "meteor-best-tranx-rerank": 0.0667, "rougel-baseline": 0.3636, "rougel-tranx-annot": 0.4706, "rougel-best-tranx": 0.1818, "rougel-best-tranx-rerank": 0.1818}, {"intent": "How to get a 16bit Unsigned integer in python", "rewritten_intent": "Convert integer `number` into an unassigned integer", "snippet": "struct.unpack('H', struct.pack('h', number))", "question_id": 19546911, "baseline-bleu": 0.0421, "tranx-annot-bleu": 0.1573, "best-tranx-bleu": 0.0689, "best-tranx-bleu-rerank": 0.0689, "baseline": "datetime . datetime . now ( )", "tranx-annot": "int ( ` ` . join ( int ( i ) for i in number ) )", "best-tranx": "int ( round ( number ) )", "best-tranx-rerank": "int ( int ( number ) )", "meteor-baseline": 0.1124, "meteor-tranx-annot": 0.3358, "meteor-best-tranx": 0.2506, "meteor-best-tranx-rerank": 0.2506, "rougel-baseline": 0.3077, "rougel-tranx-annot": 0.4444, "rougel-best-tranx": 0.3846, "rougel-best-tranx-rerank": 0.3846}, {"intent": "How can I use sum() function for a list in Python?", "rewritten_intent": "convert int values in list `numlist` to float", "snippet": "numlist = [float(x) for x in numlist]", "question_id": 9746522, "baseline-bleu": 0.1753, "tranx-annot-bleu": 0.4222, "best-tranx-bleu": 0.0727, "best-tranx-bleu-rerank": 0.3096, "baseline": "[ x [ 0 ] for i in range ( len ( x ) ) ]", "tranx-annot": "[ float ( x ) for x in zip ( numlist , float [ 1 : ] ) ]", "best-tranx": "float ( numlist )", "best-tranx-rerank": "[ float ( i ) for i in numlist ]", "meteor-baseline": 0.3226, "meteor-tranx-annot": 0.5858, "meteor-best-tranx": 0.2818, "meteor-best-tranx-rerank": 0.6601, "rougel-baseline": 0.5714, "rougel-tranx-annot": 0.6452, "rougel-best-tranx": 0.5, "rougel-best-tranx-rerank": 0.7273}, {"intent": "Removing index column in pandas", "rewritten_intent": "write dataframe `df`, excluding index, to a csv file", "snippet": "df.to_csv(filename, index=False)", "question_id": 20107570, "baseline-bleu": 0.1108, "tranx-annot-bleu": 0.1885, "best-tranx-bleu": 0.5784, "best-tranx-bleu-rerank": 0.5784, "baseline": "df . groupby ( [ 'Peak' , 'a' ] , inplace = True )", "tranx-annot": "df . write . csv ( ` True ` )", "best-tranx": "df . to_csv ( ` 5 ` , index = False )", "best-tranx-rerank": "df . to_csv ( ` file ` , index = False )", "meteor-baseline": 0.3948, "meteor-tranx-annot": 0.2, "meteor-best-tranx": 0.8775, "meteor-best-tranx-rerank": 0.8775, "rougel-baseline": 0.4286, "rougel-tranx-annot": 0.4, "rougel-best-tranx": 0.8182, "rougel-best-tranx-rerank": 0.8182}, {"intent": "How to convert a string data to a JSON object in python?", "rewritten_intent": "convert a urllib unquoted string `unescaped` to a json data `json_data`", "snippet": "json_data = json.loads(unescaped)", "question_id": 8740353, "baseline-bleu": 0.1678, "tranx-annot-bleu": 0.1819, "best-tranx-bleu": 0.2016, "best-tranx-bleu-rerank": 0.2016, "baseline": "driver . find_element_by_css_by_css_selector ( 'button' ) )", "tranx-annot": "json_data = json . dumps ( [ x for x in unescaped . split ( ` , ` ) ] )", "best-tranx": "parser . parse ( ` unescaped ` )", "best-tranx-rerank": "parser . parse ( ` json_data ` )", "meteor-baseline": 0.1852, "meteor-tranx-annot": 0.6155, "meteor-best-tranx": 0.25, "meteor-best-tranx-rerank": 0.25, "rougel-baseline": 0.3529, "rougel-tranx-annot": 0.4828, "rougel-best-tranx": 0.5, "rougel-best-tranx-rerank": 0.5}, {"intent": "Is there a Python Library that contains a list of all the ascii characters?", "rewritten_intent": "Create a list containing all ascii characters as its elements", "snippet": "[chr(i) for i in range(127)]", "question_id": 5891453, "baseline-bleu": 0.1066, "tranx-annot-bleu": 0.061, "best-tranx-bleu": 0.254, "best-tranx-bleu-rerank": 0.254, "baseline": "\"\"\"\"\"\" . join ( chr ( ord ( 'aaabcabccd' ) )", "tranx-annot": "list ( ` ` )", "best-tranx": "[ ord ( c ) for c in range ( 10 ) ]", "best-tranx-rerank": "[ ord ( c ) for c in range ( 10 ) ]", "meteor-baseline": 0.2756, "meteor-tranx-annot": 0.082, "meteor-best-tranx": 0.633, "meteor-best-tranx-rerank": 0.633, "rougel-baseline": 0.3226, "rougel-tranx-annot": 0.2222, "rougel-best-tranx": 0.6923, "rougel-best-tranx-rerank": 0.6923}, {"intent": "Python how to write to a binary file?", "rewritten_intent": "write `newFileBytes` to a binary file `newFile`", "snippet": "newFile.write(struct.pack('5B', *newFileBytes))", "question_id": 18367007, "baseline-bleu": 0.0735, "tranx-annot-bleu": 0.1465, "best-tranx-bleu": 0.3279, "best-tranx-bleu-rerank": 0.3279, "baseline": "[ ( x [ 0 ] for x in range ( 100 ) ]", "tranx-annot": "with open ( new File Bytes , ` r ` ) as f : print ( new File Bytes . split ( ) )", "best-tranx": "new File . write ( ` { 0 : 0b } ` . format ( new File ) )", "best-tranx-rerank": "new File . write ( ` { 0 : 0b } ` . format ( new File ) )", "meteor-baseline": 0.0811, "meteor-tranx-annot": 0.5561, "meteor-best-tranx": 0.6308, "meteor-best-tranx-rerank": 0.6308, "rougel-baseline": 0.1818, "rougel-tranx-annot": 0.6047, "rougel-best-tranx": 0.6842, "rougel-best-tranx-rerank": 0.6842}, {"intent": "Python Regex - checking for a capital letter with a lowercase after", "rewritten_intent": "python regex - check for a capital letter with a following lowercase in string `string`", "snippet": "re.sub('^[A-Z0-9]*(?![a-z])', '', string)", "question_id": 21805490, "baseline-bleu": 0.331, "tranx-annot-bleu": 0.212, "best-tranx-bleu": 0.3065, "best-tranx-bleu-rerank": 0.3065, "baseline": "re . sub ( '([a-zA-Z]*-Z]' , string )", "tranx-annot": "[ m . lower ( ) for c , letter in re . sub ( ` INSERT ` , string , re . UNICODE ) ]", "best-tranx": "re . sub ( ` < unk > ` , ` ` , string ) . lower ( )", "best-tranx-rerank": "re . sub ( ` < unk > ` , ` ` , string ) . lower ( )", "meteor-baseline": 0.611, "meteor-tranx-annot": 0.2836, "meteor-best-tranx": 0.4542, "meteor-best-tranx-rerank": 0.4542, "rougel-baseline": 0.7692, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.5714, "rougel-best-tranx-rerank": 0.5714}, {"intent": "Last Key in Python Dictionary", "rewritten_intent": "get the last key of dictionary `dict`", "snippet": "list(dict.keys())[-1]", "question_id": 16125229, "baseline-bleu": 0.2033, "tranx-annot-bleu": 0.1961, "best-tranx-bleu": 0.3219, "best-tranx-bleu-rerank": 0.3219, "baseline": "for k , v in list ( d . items ( ) ) )", "tranx-annot": "dict [ - 1 ]", "best-tranx": "print ( dict [ - 1 ] )", "best-tranx-rerank": "print ( dict [ - 1 ] )", "meteor-baseline": 0.4189, "meteor-tranx-annot": 0.4283, "meteor-best-tranx": 0.5471, "meteor-best-tranx-rerank": 0.5471, "rougel-baseline": 0.4615, "rougel-tranx-annot": 0.5882, "rougel-best-tranx": 0.7, "rougel-best-tranx-rerank": 0.7}, {"intent": "write line to file", "rewritten_intent": "write line \"hi there\" to file `f`", "snippet": "print('hi there', file=f)", "question_id": 6159900, "baseline-bleu": 0.1976, "tranx-annot-bleu": 0.4448, "best-tranx-bleu": 0.4448, "best-tranx-bleu-rerank": 0.4448, "baseline": "open ( 'filename' , 'r' )", "tranx-annot": "f . write ( ` hi there ` )", "best-tranx": "f . write ( ` hi there ` )", "best-tranx-rerank": "f . write ( ` hi there ` )", "meteor-baseline": 0.2294, "meteor-tranx-annot": 0.6226, "meteor-best-tranx": 0.6226, "meteor-best-tranx-rerank": 0.6226, "rougel-baseline": 0.4762, "rougel-tranx-annot": 0.7, "rougel-best-tranx": 0.7, "rougel-best-tranx-rerank": 0.7}, {"intent": "write line to file", "rewritten_intent": "write line \"hi there\" to file `myfile`", "snippet": "f = open('myfile', 'w')\nf.write('hi there\\n')\nf.close()", "question_id": 6159900, "baseline-bleu": 0.0671, "tranx-annot-bleu": 0.0879, "best-tranx-bleu": 0.0879, "best-tranx-bleu-rerank": 0.0879, "baseline": "open ( [ 'a' , 'r' ] )", "tranx-annot": "myfile . write ( ` hi there ` )", "best-tranx": "myfile . write ( ` hi there ` )", "best-tranx-rerank": "myfile . write ( ` hi there ` )", "meteor-baseline": 0.1515, "meteor-tranx-annot": 0.2637, "meteor-best-tranx": 0.2637, "meteor-best-tranx-rerank": 0.2637, "rougel-baseline": 0.4, "rougel-tranx-annot": 0.4865, "rougel-best-tranx": 0.4865, "rougel-best-tranx-rerank": 0.4865}, {"intent": "write line to file", "rewritten_intent": "write line \"Hello\" to file `somefile.txt`", "snippet": "with open('somefile.txt', 'a') as the_file:\n    the_file.write('Hello\\n')", "question_id": 6159900, "baseline-bleu": 0.2944, "tranx-annot-bleu": 0.2841, "best-tranx-bleu": 0.0696, "best-tranx-bleu-rerank": 0.0696, "baseline": "with open ( 'example.txt' ) as f : #NEWLINE# #INDENT# f . write ( 'file.txt' )", "tranx-annot": "os . system ( ` somefile . txt ` , ` somefile . txt ` )", "best-tranx": "f . write ( ` Hello ` )", "best-tranx-rerank": "f . write ( ` Hello ` )", "meteor-baseline": 0.5563, "meteor-tranx-annot": 0.2747, "meteor-best-tranx": 0.2859, "meteor-best-tranx-rerank": 0.2859, "rougel-baseline": 0.5926, "rougel-tranx-annot": 0.5238, "rougel-best-tranx": 0.4118, "rougel-best-tranx-rerank": 0.4118}, {"intent": "Python - Unicode to ASCII conversion", "rewritten_intent": "convert unicode string `s` to ascii", "snippet": "s.encode('iso-8859-15')", "question_id": 19527279, "baseline-bleu": 0.1881, "tranx-annot-bleu": 0.2012, "best-tranx-bleu": 0.1345, "best-tranx-bleu-rerank": 0.1345, "baseline": "s . decode ( 'utf8' )", "tranx-annot": "ord ( s . decode ( ` unicode_escape ` ) )", "best-tranx": "ord ( ` c ` )", "best-tranx-rerank": "ord ( ` c ` )", "meteor-baseline": 0.4849, "meteor-tranx-annot": 0.4295, "meteor-best-tranx": 0.3289, "meteor-best-tranx-rerank": 0.3289, "rougel-baseline": 0.6, "rougel-tranx-annot": 0.5217, "rougel-best-tranx": 0.4444, "rougel-best-tranx-rerank": 0.4444}, {"intent": "How to get max value in django ORM", "rewritten_intent": "Django get maximum value associated with field 'added' in model `AuthorizedEmail`", "snippet": "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]", "question_id": 10668585, "baseline-bleu": 0.1484, "tranx-annot-bleu": 0.5184, "best-tranx-bleu": 0.3603, "best-tranx-bleu-rerank": 0.3603, "baseline": "pandas . set_option ( 'User' ) [ : : - 1 ] . dt . mean ( )", "tranx-annot": "Authorized Email . objects . filter ( select = ` added ` ) . order_by ( ` added ` )", "best-tranx": "Authorized Email . objects . order_by ( ` ? ` ) [ ` added ` ]", "best-tranx-rerank": "Authorized Email . objects . order_by ( ` ? ` ) [ ` added ` ]", "meteor-baseline": 0.2752, "meteor-tranx-annot": 0.7282, "meteor-best-tranx": 0.5367, "meteor-best-tranx-rerank": 0.5367, "rougel-baseline": 0.5714, "rougel-tranx-annot": 0.7619, "rougel-best-tranx": 0.6842, "rougel-best-tranx-rerank": 0.6842}, {"intent": "Python regex findall numbers and dots", "rewritten_intent": "Find all numbers and dots from a string `text` using regex", "snippet": "re.findall('Test([0-9.]*[0-9]+)', text)", "question_id": 356483, "baseline-bleu": 0.2313, "tranx-annot-bleu": 0.08, "best-tranx-bleu": 0.1753, "best-tranx-bleu-rerank": 0.456, "baseline": "re . findall ( '\\\\w<unk>)' , '\\\\1' , s )", "tranx-annot": "re . all ( list ( str ( text ) ) , key = lambda x : map ( str , re . split ( ` \\ \\ d + ` , s ) ) )", "best-tranx": "print ( re . findall ( ` \\ \\ d + ` , ` ` . join ( [ str ( p ) for p in re . finditer ( ` [ A - Za - z ` ] + ` , text ) ] ) ) )", "best-tranx-rerank": "re . findall ( ` ( ( [ 0 - 9 ] + ) ( [ A - Z ] ) ) ` , ` 20M10000N80M ` )", "meteor-baseline": 0.2364, "meteor-tranx-annot": 0.2827, "meteor-best-tranx": 0.4467, "meteor-best-tranx-rerank": 0.3755, "rougel-baseline": 0.383, "rougel-tranx-annot": 0.3934, "rougel-best-tranx": 0.5205, "rougel-best-tranx-rerank": 0.717}, {"intent": "Python regex findall numbers and dots", "rewritten_intent": "python regex  to find all numbers and dots from 'text'", "snippet": "re.findall('Test([\\\\d.]*\\\\d+)', text)", "question_id": 356483, "baseline-bleu": 0.2264, "tranx-annot-bleu": 0.3464, "best-tranx-bleu": 0.1752, "best-tranx-bleu-rerank": 0.2292, "baseline": "re . findall ( '[a-zA-Z]' , s )", "tranx-annot": "print ( re . findall ( ` \\ \\ d + ` , re . compile ( ` text ` ) ) )", "best-tranx": "` ` ` ` ` ` . join ( ` ` . join ( map ( str , x ) ) for x in re . findall ( ` [ A - Za - z ` ] + ` , text ) )", "best-tranx-rerank": "` ` ` ` ` ` . join ( map ( str , re . findall ( ` [ A - Za - z ` ] + ` , text ) ) )", "meteor-baseline": 0.2837, "meteor-tranx-annot": 0.5826, "meteor-best-tranx": 0.4047, "meteor-best-tranx-rerank": 0.4216, "rougel-baseline": 0.5, "rougel-tranx-annot": 0.6957, "rougel-best-tranx": 0.4545, "rougel-best-tranx-rerank": 0.5357}, {"intent": "Is there a way to run powershell code in python", "rewritten_intent": "execute script 'script.ps1' using 'powershell.exe' shell", "snippet": "os.system('powershell.exe', 'script.ps1')", "question_id": 38081866, "baseline-bleu": 0.0861, "tranx-annot-bleu": 0.4959, "best-tranx-bleu": 0.4525, "best-tranx-bleu-rerank": 0.4525, "baseline": "subprocess . call ( [ 'some#SPACE#c#SPACE#<unk>' , shell = True )", "tranx-annot": "os . system ( ` script . ps1 ` )", "best-tranx": "subprocess . call ( [ ` script . ps1 ` , ` powershell . exe ` , script . ps1 ] )", "best-tranx-rerank": "subprocess . call ( [ ` script . ps1 ` , ` powershell . exe ` , script . ps1 ] )", "meteor-baseline": 0.1796, "meteor-tranx-annot": 0.6286, "meteor-best-tranx": 0.6897, "meteor-best-tranx-rerank": 0.6897, "rougel-baseline": 0.3077, "rougel-tranx-annot": 0.7692, "rougel-best-tranx": 0.7368, "rougel-best-tranx-rerank": 0.7368}, {"intent": "Sorting a dictionary of tuples in Python", "rewritten_intent": "Sort a list of tuples `b` by third item in the tuple", "snippet": "b.sort(key=lambda x: x[1][2])", "question_id": 7349646, "baseline-bleu": 0.5481, "tranx-annot-bleu": 0.3514, "best-tranx-bleu": 0.1794, "best-tranx-bleu-rerank": 0.1794, "baseline": "sorted ( lst , key = lambda x : x [ 1 ] ) )", "tranx-annot": "sorted ( b , key = lambda x : ( - x [ 1 ] , x [ 0 ] ) )", "best-tranx": "sorted ( b , key = lambda e : e [ 0 ] )", "best-tranx-rerank": "sorted ( b , key = lambda e : e [ 0 ] )", "meteor-baseline": 0.7134, "meteor-tranx-annot": 0.7214, "meteor-best-tranx": 0.5738, "meteor-best-tranx-rerank": 0.5738, "rougel-baseline": 0.6875, "rougel-tranx-annot": 0.7179, "rougel-best-tranx": 0.5806, "rougel-best-tranx-rerank": 0.5806}, {"intent": "How do I get all the keys that are stored in the Cassandra column family with pycassa?", "rewritten_intent": "get a list of all keys in Cassandra database `cf` with pycassa", "snippet": "list(cf.get_range().get_keys())", "question_id": 2430539, "baseline-bleu": 0.0696, "tranx-annot-bleu": 0.1022, "best-tranx-bleu": 0.1127, "best-tranx-bleu-rerank": 0.1127, "baseline": "print ( s , key = lambda x : x [ 1 ] ) for i in range ( 100 ) ]", "tranx-annot": "[ k for k , v in enumerate ( cf ) if v = = 0 ]", "best-tranx": "[ k for k , v in cf . items ( ) if v = = 1 ]", "best-tranx-rerank": "[ k for k , v in cf . items ( ) if v = = 1 ]", "meteor-baseline": 0.1538, "meteor-tranx-annot": 0.12, "meteor-best-tranx": 0.1587, "meteor-best-tranx-rerank": 0.1587, "rougel-baseline": 0.2353, "rougel-tranx-annot": 0.2069, "rougel-best-tranx": 0.2667, "rougel-best-tranx-rerank": 0.2667}, {"intent": "how to create a file name with the current date & time in python?", "rewritten_intent": "create a datetime with the current date & time", "snippet": "datetime.datetime.now()", "question_id": 10607688, "baseline-bleu": 0.4429, "tranx-annot-bleu": 1.0, "best-tranx-bleu": 1.0, "best-tranx-bleu-rerank": 0.3128, "baseline": "datetime . datetime . now ( ) . date ( ) . isoformat ( )", "tranx-annot": "datetime . datetime . now ( )", "best-tranx": "datetime . datetime . now ( )", "best-tranx-rerank": "datetime . datetime . now ( ) . strftime ( ` % Y - % m - % d ` )", "meteor-baseline": 0.6149, "meteor-tranx-annot": 0.9985, "meteor-best-tranx": 0.9985, "meteor-best-tranx-rerank": 0.4167, "rougel-baseline": 0.6364, "rougel-tranx-annot": 1.0, "rougel-best-tranx": 1.0, "rougel-best-tranx-rerank": 0.5}, {"intent": "How to get the index of an integer from a list if the list contains a boolean?", "rewritten_intent": "get the index of an integer `1` from a list `lst` if the list also contains boolean items", "snippet": "next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)", "question_id": 30843103, "baseline-bleu": 0.0943, "tranx-annot-bleu": 0.0793, "best-tranx-bleu": 0.0624, "best-tranx-bleu-rerank": 0.0624, "baseline": "[ ( x , y ) for i in range ( 3 ) ]", "tranx-annot": "[ int ( x ) for x in zip ( * lst ) ]", "best-tranx": "[ i for i in lst if i > 3 ]", "best-tranx-rerank": "[ i for i in lst if i > 3 ]", "meteor-baseline": 0.2355, "meteor-tranx-annot": 0.1815, "meteor-best-tranx": 0.1429, "meteor-best-tranx-rerank": 0.1429, "rougel-baseline": 0.45, "rougel-tranx-annot": 0.45, "rougel-best-tranx": 0.3243, "rougel-best-tranx-rerank": 0.3243}, {"intent": "Subtract a value from every number in a list in Python?", "rewritten_intent": "subtract 13 from every number in a list `a`", "snippet": "a[:] = [(x - 13) for x in a]", "question_id": 4918425, "baseline-bleu": 0.0946, "tranx-annot-bleu": 0.2682, "best-tranx-bleu": 0.144, "best-tranx-bleu-rerank": 0.144, "baseline": "[ i for i in range ( 3 ) ]", "tranx-annot": "[ print ( x ) for x in zip ( * a ) ]", "best-tranx": "[ ( x1 - x2 ) for x1 , x2 in zip ( a , 13 ) ]", "best-tranx-rerank": "[ ( x1 - x2 ) for x1 , x2 in zip ( a , 13 ) ]", "meteor-baseline": 0.1948, "meteor-tranx-annot": 0.4356, "meteor-best-tranx": 0.3605, "meteor-best-tranx-rerank": 0.3605, "rougel-baseline": 0.4615, "rougel-tranx-annot": 0.6, "rougel-best-tranx": 0.5294, "rougel-best-tranx-rerank": 0.5294}, {"intent": "Best way to choose a random file from a directory", "rewritten_intent": "choose a random file from the directory contents of the C drive, `C:\\\\`", "snippet": "random.choice(os.listdir('C:\\\\'))", "question_id": 701402, "baseline-bleu": 0.144, "tranx-annot-bleu": 0.1993, "best-tranx-bleu": 0.7332, "best-tranx-bleu-rerank": 0.7332, "baseline": "os . chdir ( 'start#SPACE#excel' )", "tranx-annot": "os . random . dirname ( os . random . getctime ( __file__ ) )", "best-tranx": "random . choice ( os . path . expanduser ( ` C : \\ \\ ` ) )", "best-tranx-rerank": "random . choice ( os . path . expanduser ( ` C : \\ \\ ` ) )", "meteor-baseline": 0.3276, "meteor-tranx-annot": 0.397, "meteor-best-tranx": 0.9088, "meteor-best-tranx-rerank": 0.9088, "rougel-baseline": 0.4286, "rougel-tranx-annot": 0.5161, "rougel-best-tranx": 0.8824, "rougel-best-tranx-rerank": 0.8824}, {"intent": "How to get the highest element in absolute value in a numpy matrix?", "rewritten_intent": "get the highest element in absolute value in a numpy matrix `x`", "snippet": "max(x.min(), x.max(), key=abs)", "question_id": 17794266, "baseline-bleu": 0.0981, "tranx-annot-bleu": 0.1151, "best-tranx-bleu": 0.1817, "best-tranx-bleu-rerank": 0.1817, "baseline": "x = np . where ( x == 0 )", "tranx-annot": "x [ np . all ( np . isnan ( x ) ) ]", "best-tranx": "print ( max ( x , key = x ) )", "best-tranx-rerank": "print ( max ( x , key = x ) )", "meteor-baseline": 0.1734, "meteor-tranx-annot": 0.2273, "meteor-best-tranx": 0.4789, "meteor-best-tranx-rerank": 0.4789, "rougel-baseline": 0.4138, "rougel-tranx-annot": 0.5, "rougel-best-tranx": 0.6897, "rougel-best-tranx-rerank": 0.6897}, {"intent": "Using Regular Expressions to extract specific urls in python", "rewritten_intent": "Get all urls within text `s`", "snippet": "re.findall('\"(http.*?)\"', s, re.MULTILINE | re.DOTALL)", "question_id": 30551576, "baseline-bleu": 0.0241, "tranx-annot-bleu": 0.0142, "best-tranx-bleu": 0.0004, "best-tranx-bleu-rerank": 0.0004, "baseline": "s = soup . find ( url )", "tranx-annot": "s [ : : - 1 ]", "best-tranx": "s . tag", "best-tranx-rerank": "s . tag", "meteor-baseline": 0.0858, "meteor-tranx-annot": 0.0216, "meteor-best-tranx": 0.0439, "meteor-best-tranx-rerank": 0.0439, "rougel-baseline": 0.2424, "rougel-tranx-annot": 0.0625, "rougel-best-tranx": 0.1429, "rougel-best-tranx-rerank": 0.1429}, {"intent": "Using Regular Expressions to extract specific urls in python", "rewritten_intent": "match urls whose domain doesn't start with `t` from string `document` using regex", "snippet": "re.findall('http://[^t][^s\"]+\\\\.html', document)", "question_id": 30551576, "baseline-bleu": 0.2069, "tranx-annot-bleu": 0.0609, "best-tranx-bleu": 0.0822, "best-tranx-bleu-rerank": 0.1657, "baseline": "re . findall ( '\\\\w\\\\w<unk>)' , re . UNICODE )", "tranx-annot": "` ` ` ` ` ` . join ( c for c in document if c not in c )", "best-tranx": "re . match ( ` find_element_by_xpath ` , document )", "best-tranx-rerank": "re . findall ( ` find_element_by_xpath | , ` , document )", "meteor-baseline": 0.363, "meteor-tranx-annot": 0.1331, "meteor-best-tranx": 0.2776, "meteor-best-tranx-rerank": 0.3227, "rougel-baseline": 0.4583, "rougel-tranx-annot": 0.2979, "rougel-best-tranx": 0.4324, "rougel-best-tranx-rerank": 0.4615}, {"intent": "Is there a function in Python to split a string without ignoring the spaces?", "rewritten_intent": "split a string `mystring` considering the spaces ' '", "snippet": "mystring.replace(' ', '! !').split('!')", "question_id": 113534, "baseline-bleu": 0.1134, "tranx-annot-bleu": 0.2243, "best-tranx-bleu": 0.269, "best-tranx-bleu-rerank": 0.269, "baseline": "\"\"\"<unk>#SPACE#\"\"\" . strip ( )", "tranx-annot": "mystring . split ( ` ` ) [ : - 1 ]", "best-tranx": "[ x . strip ( ) for x in mystring . split ( ` ` ) ]", "best-tranx-rerank": "[ x . strip ( ) for x in mystring . split ( ` ` ) ]", "meteor-baseline": 0.3123, "meteor-tranx-annot": 0.3675, "meteor-best-tranx": 0.4745, "meteor-best-tranx-rerank": 0.4745, "rougel-baseline": 0.5143, "rougel-tranx-annot": 0.4516, "rougel-best-tranx": 0.5556, "rougel-best-tranx-rerank": 0.5556}, {"intent": "Open file in Python", "rewritten_intent": "open file `path` with mode 'r'", "snippet": "open(path, 'r')", "question_id": 5838735, "baseline-bleu": 0.1853, "tranx-annot-bleu": 0.7861, "best-tranx-bleu": 0.428, "best-tranx-bleu-rerank": 0.428, "baseline": "with open ( 'HOME' , shell = True )", "tranx-annot": "r = open ( path , ` r ` )", "best-tranx": "f = open ( ` r ` , ` r ` )", "best-tranx-rerank": "f = open ( ` r ` , ` r ` )", "meteor-baseline": 0.5137, "meteor-tranx-annot": 0.9747, "meteor-best-tranx": 0.8236, "meteor-best-tranx-rerank": 0.8236, "rougel-baseline": 0.6316, "rougel-tranx-annot": 0.8889, "rougel-best-tranx": 0.7, "rougel-best-tranx-rerank": 0.7}, {"intent": "Sum of multiple list of lists index wise", "rewritten_intent": "sum elements at the same index in list `data`", "snippet": "[[sum(item) for item in zip(*items)] for items in zip(*data)]", "question_id": 36003967, "baseline-bleu": 0.0917, "tranx-annot-bleu": 0.072, "best-tranx-bleu": 0.133, "best-tranx-bleu-rerank": 0.126, "baseline": "sum ( zip ( a , key = lambda x : x [ 1 ] ) )", "tranx-annot": "sum ( data [ i ] for i in data )", "best-tranx": "sum ( j for i , j in zip ( data , data ) if i ! = 1 )", "best-tranx-rerank": "map ( sum , zip ( * data ) )", "meteor-baseline": 0.2283, "meteor-tranx-annot": 0.2344, "meteor-best-tranx": 0.2916, "meteor-best-tranx-rerank": 0.3108, "rougel-baseline": 0.3902, "rougel-tranx-annot": 0.4571, "rougel-best-tranx": 0.4091, "rougel-best-tranx-rerank": 0.4706}, {"intent": "numpy: syntax/idiom to cast (n,) array to a (n, 1) array?", "rewritten_intent": "add a new axis to array `a`", "snippet": "a[:, (np.newaxis)]", "question_id": 7635237, "baseline-bleu": 0.2031, "tranx-annot-bleu": 0.2242, "best-tranx-bleu": 0.1111, "best-tranx-bleu-rerank": 0.1916, "baseline": "np . delete ( a , a )", "tranx-annot": "a = a [ : : - 1 ] + 1", "best-tranx": "plt . yscale ( ` log ` , nonposy = ` clip ` )", "best-tranx-rerank": "a [ ( - 1 ) , : ] = a", "meteor-baseline": 0.4351, "meteor-tranx-annot": 0.3125, "meteor-best-tranx": 0.1923, "meteor-best-tranx-rerank": 0.3465, "rougel-baseline": 0.6667, "rougel-tranx-annot": 0.381, "rougel-best-tranx": 0.3333, "rougel-best-tranx-rerank": 0.6667}]