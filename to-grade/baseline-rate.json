[{"intent": "send a signal `signal.SIGUSR1` to the current process", "snippet": "os . system ( '<unk>.png' , s = 300 )"}, {"intent": "decode a hex string '4a4b4c' to UTF-8.", "snippet": "\"\"\"\\\\ascii . decode ( 'utf-8' ) . decode ( 'utf-8' )"}, {"intent": "check if all elements in list `myList` are identical", "snippet": "[ int ( i ) for i in range ( 100 ) ]"}, {"intent": "format number of spaces between strings `Python`, `:` and `Very Good` to be `20`", "snippet": "cursor . execute ( 'INSERT#SPACE#INTO#SPACE#INTO#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>' )"}, {"intent": "How to convert a string from CP-1251 to UTF-8?", "snippet": "print ( '<unk>#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>' )"}, {"intent": "get rid of None values in dictionary `kwargs`", "snippet": "sum ( d , v ) for k , v in list ( d . items ( ) ) )"}, {"intent": "get rid of None values in dictionary `kwargs`", "snippet": "sum ( d , v ) for k , v in list ( d . items ( ) ) )"}, {"intent": "capture final output of a chain of system commands `ps -ef | grep something | wc -l`", "snippet": "soup . find_element_by_css_selector ( 'li.png' , re . compile ( 'unicode_escape' ) )"}, {"intent": "concatenate a list of strings `['a', 'b', 'c']`", "snippet": "set ( [ 'a' , 'b' , 'b' ] )"}, {"intent": "find intersection data between series `s1` and series `s2`", "snippet": "pd . concat ( [ df [ 'A' ] , how = [ 'A' , '<unk>' ] ) )"}, {"intent": "sending http headers to `client`", "snippet": "soup . find_all ( '?' )"}, {"intent": "Format a datetime string `when` to extract date only", "snippet": "datetime . datetime . now ( )"}, {"intent": "split a multi-line string `inputString` into separate strings", "snippet": "\"\"\"#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPAC"}, {"intent": "Split a multi-line string ` a \\n b \\r\\n c ` by new line character `\\n`", "snippet": "my_string . split ( '\\n' , '' )"}, {"intent": "concatenate elements of list `b` by a colon \":\"", "snippet": "s . sort ( key = lambda x : : : - 1 ] )"}, {"intent": "get the first object from a queryset in django model `Entry`", "snippet": "print ( s . encode ( 'length' ) )"}, {"intent": "Calculate sum over all rows of 2D numpy array", "snippet": "np . array ( [ 0 , 0 ] , [ 0 ] , None )"}, {"intent": "enable warnings using action 'always'", "snippet": "[ int ( x ) for x in s . split ( ',' ) ]"}, {"intent": "concatenate items of list `l` with a space ' '", "snippet": "[ item for item in list ( d . items ( ) ) ]"}, {"intent": "run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable", "snippet": "subprocess . call ( 'c#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>#SPACE#|#SPACE#<unk>' )"}, {"intent": "How can I parse a time string containing milliseconds in it with python?", "snippet": "print ( s . split ( ',' ) )"}, {"intent": "convert a string `my_string` with dot and comma into a float number `my_float`", "snippet": "print ( my_string . split ( ',' ) )"}, {"intent": "convert a string `123,456.908` with dot and comma into a floating number", "snippet": "struct . unpack ( 'January#SPACE#11,#SPACE#11,#SPACE#11,#SPACE#%s' )"}, {"intent": "set pythonpath in python script.", "snippet": "sys . exit ( )"}, {"intent": "split string 'Words, words, words.' using a regex '(\\\\W+)'", "snippet": "\"\"\"This#SPACE#<unk>#SPACE#{0}\"\"\" . strip ( )"}, {"intent": "open a file `Output.txt` in append mode", "snippet": "with open ( 'test.txt' ) . read ( ) #NEWLINE# #INDENT# pass"}, {"intent": "download a file \"http://www.example.com/songs/mp3.mp3\" over HTTP and save to \"mp3.mp3\"", "snippet": "urllib . request . urlretrieve ( 'http://spam.com/search.com/' , '<unk>' )"}, {"intent": "download a file `url` over HTTP and save to `file_name`", "snippet": "with open ( 'filename.txt' , shell = True )"}, {"intent": "download a file 'http://www.example.com/' over HTTP", "snippet": "urllib . request . urlretrieve ( 'http://www.stackoverflow.com/' ) )"}, {"intent": "download a file `url` over HTTP", "snippet": "print ( os . path . realpath ( filename ) )"}, {"intent": "download a file `url` over HTTP and save to \"10MB\"", "snippet": "print ( os . path . commonprefix ( 'utf-8' ) )"}, {"intent": "argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`", "snippet": "soup . find_all ( 'li' , '' , s )"}, {"intent": "remove key 'c' from dictionary `d`", "snippet": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )"}, {"intent": "Create new DataFrame object by merging columns \"key\" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively", "snippet": "df . loc [ : : : , ( ____id' ] ) )"}, {"intent": "Split a string `s` by space with `4` splits", "snippet": "print ( s . split ( ) )"}, {"intent": "read keyboard-input", "snippet": "sys . exit ( )"}, {"intent": "enable debug mode on Flask application `app`", "snippet": "cursor . execute ( 'INSERT#SPACE#INTO#SPACE#INTO#SPACE#%s' )"}, {"intent": "python save list `mylist` to file object 'save.txt'", "snippet": "[ f for item in open ( 'file.txt' ) ]"}, {"intent": "Multiply a matrix `P` with a 3d tensor `T` in scipy", "snippet": "plt . set_option ( 'display.png' , s = False )"}, {"intent": "Create 3d array of zeroes of size `(3,3,3)`", "snippet": "np . zeros ( [ 1 , 2 , 3 , 4 ] )"}, {"intent": "cut off the last word of a sentence `content`", "snippet": "a [ : : - 1 ]"}, {"intent": "convert scalar `x` to array", "snippet": "x = np . array ( x , 2 )"}, {"intent": "sum all elements of nested list `L`", "snippet": "sum ( x , key = lambda x : abs ( x [ 1 ] ) )"}, {"intent": "convert hex string '470FC614' to a float number", "snippet": "struct . unpack ( 'a' , struct . pack ( '<unk>' ) )"}, {"intent": "Multiple each value by `2` for all keys in a dictionary `my_dict`", "snippet": "print ( list ( my_dict . items ( ) ) )"}, {"intent": "running bash script 'sleep.sh'", "snippet": "os . system ( 'echo#SPACE#<unk>' )"}, {"intent": "Join elements of list `l` with a comma `,`", "snippet": "list ( map ( lambda x : x [ 1 ] ) )"}, {"intent": "make a comma-separated string from a list `myList`", "snippet": "print ( [ int ( x ) for x in s . split ( ',' ) )"}, {"intent": "reverse the list that contains 1 to 10", "snippet": "list ( range ( 1 ) )"}, {"intent": "remove substring 'bag,' from a string 'lamp, bag, mirror'", "snippet": "re . compile ( '(ddd)' , 'aaa#SPACE#bbb#SPACE#bbb#SPACE#ccc#SPACE#ccc#SPACE#ccc#SPACE#ccc#SPACE#ccc#SPACE#<unk>' )"}, {"intent": "Reverse the order of words, delimited by `.`, in string `s`", "snippet": "\"\"\"\"\"\" . join ( [ 1 , 2 ] for i in range ( 0 , len ( s ) ] ) )"}, {"intent": "convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'", "snippet": "datetime . datetime . strptime ( 'Jun#SPACE#<unk>#SPACE#1#SPACE#%H:%M:%S' )"}, {"intent": "parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'", "snippet": "datetime . datetime . strptime ( 'Jun#SPACE#22' , '%Y-%m-%d#SPACE#%H:%M:%S' )"}, {"intent": "get the date 7 days before the current date", "snippet": "datetime . datetime . now ( ) . date ( )"}, {"intent": "sum elements at index `column` of each list in list `data`", "snippet": "[ x [ 0 ] for x in zip ( a , b ) ]"}, {"intent": "sum columns of a list `array`", "snippet": "a . shape [ 0 ]"}, {"intent": "encode binary string 'your string' to base64 code", "snippet": "\"\"\"\"\"\" . join ( chr ( ord ( 'ascii' ) )"}, {"intent": "combine list of dictionaries `dicts` with the same keys in each list to a single dictionary", "snippet": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) , reverse = True )"}, {"intent": "Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`", "snippet": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )"}, {"intent": "How do I get the url parameter in a Flask view", "snippet": "self . <unk>ession . get ( 'top' )"}, {"intent": "identify duplicate values in list `mylist`", "snippet": "mylist = list ( my_dict . items ( ) ) )"}, {"intent": "Insert directory 'apps' into directory `__file__`", "snippet": "os . chdir ( 'HTTP#SPACE#<unk>#SPACE#<unk>' )"}, {"intent": "modify sys.path for python module `subdir`", "snippet": "print ( os . path . dirname ( 'filename' ) )"}, {"intent": "Insert a 'None' value into a SQLite3 table.", "snippet": "raise ( '<unk>#SPACE#INTO#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#%s' )"}, {"intent": "flatten list `list_of_menuitems`", "snippet": "sorted ( list_of_tuples )"}, {"intent": "append elements of a set `b` to a list `a`", "snippet": "a . remove ( a , b )"}, {"intent": "Append elements of a set to a list in Python", "snippet": "np . dot ( [ 1 , 2 ] )"}, {"intent": "write the data of dataframe `df` into text file `np.txt`", "snippet": "df . write ( 'filename.txt' , s = False )"}, {"intent": "write content of DataFrame `df` into text file 'c:\\\\data\\\\pandas.txt'", "snippet": "df = pd . read_csv ( 'mycsv.csv' )"}, {"intent": "Split a string `x` by last occurrence of character `-`", "snippet": "x [ : : - 1 ]"}, {"intent": "get the last part of a string before the character '-'", "snippet": "os . path . normrange ( 'utf8' )"}, {"intent": "upload file using FTP", "snippet": "sys . exit ( )"}, {"intent": "add one to the hidden web element with id 'XYZ' with selenium python script", "snippet": "driver . find_element_by_xpath ( 'http://www.org' ) . get ( )"}, {"intent": "create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`", "snippet": "np . dot ( [ 1 , 2 , 3 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , ["}, {"intent": "print a list `l` and move first 3 elements to the end of the list", "snippet": "[ x for x in zip ( x , x ) for x in x ]"}, {"intent": "loop over files in directory '.'", "snippet": "os . path . dirname ( 'file' )"}, {"intent": "loop over files in directory `source`", "snippet": "os . path . dirname ( os . path . dirname ( __file__ ) )"}, {"intent": "create a random list of integers", "snippet": "lst = [ ( int ( x ) for x in range ( 10 ) ]"}, {"intent": "Using %f with strftime() in Python to get microseconds", "snippet": "datetime . datetime . now ( ) . date ( )"}, {"intent": "Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`", "snippet": "cursor . execute ( 'INSERT#SPACE#INTO#SPACE#INTO#SPACE#table#SPACE#table#SPACE#table#SPACE#table#SPACE#table#SPACE#table#SPACE#table#SPACE#table#SPACE#table#SPACE#(%s,#SPACE"}, {"intent": "filter rows in pandas starting with alphabet 'f' using regular expression.", "snippet": "json . dumps ( ) . replace ( ',#SPACE#' )"}, {"intent": "print a 2 dimensional list `tab` as a table with delimiters", "snippet": "print ( a , key = lambda x : x [ 1 ] )"}, {"intent": "pandas: delete rows in dataframe `df` based on multiple columns values", "snippet": "df . groupby ( [ 'stock' , 'Weeks' ] , axis = 1 )"}, {"intent": "format the variables `self.goals` and `self.penalties` using string formatting", "snippet": "soup . find_element_by_css_selector ( 'sample.org' , s = '<unk>' )"}, {"intent": "format string \"({} goals, ${})\" with variables `goals` and `penalties`", "snippet": "re . split ( '(.*?[.?!])' , 'aaa#SPACE#' , s )"}, {"intent": "format string \"({0.goals} goals, ${0.penalties})\"", "snippet": "re . findall ( 'abc-z])\\\\)' , 'Current#SPACE#bbb#SPACE#bbb#SPACE#<unk>#SPACE#<unk>#SPACE#this#SPACE#<unk>' )"}, {"intent": "convert list of lists `L` to list of integers", "snippet": "[ int ( i ) for i in range ( 3 ) ]"}, {"intent": "combine elements of each list in list `L` into digits of a single integer", "snippet": "list ( lst , key = lambda x : x [ 1 ] ) for i in range ( 3 ) ]"}, {"intent": "convert a list of lists `L` to list of integers", "snippet": "[ int ( x ) for x in L ]"}, {"intent": "write the elements of list `lines` concatenated by special character '\\n' to file `myfile`", "snippet": "[ x for x in my_list if not isinstance ( a , b ) ]"}, {"intent": "removing an element from a list based on a predicate 'X' or 'N'", "snippet": "sorted ( item , key = lambda x : x [ 'weight' ] )"}, {"intent": "Remove duplicate words from a string `text` using regex", "snippet": "\"\"\"\"\"\" . join ( chr ( s ) )"}, {"intent": "count non zero values in each column in pandas data frame", "snippet": "df . groupby ( [ 'stock' , 'same2' ] )"}, {"intent": "search for string that matches regular expression pattern '(?<!Distillr)\\\\\\\\AcroTray\\\\.exe' in string 'C:\\\\SomeDir\\\\AcroTray.exe'", "snippet": "soup . find_all ( '<unk>' , href = re . compile ( '<unk>' ) )"}, {"intent": "split string 'QH QD JC KD JS' into a list on white spaces", "snippet": "re . split ( '(ddd)' , 'aaa#SPACE#' , '#SPACE#' )"}, {"intent": "search for occurrences of regex pattern '>.*<' in xml string `line`", "snippet": "re . findall ( 'a-zA-Z]' , line )"}, {"intent": "erase all the contents of a file `filename`", "snippet": "with open ( 'filename.txt' ) as f : #NEWLINE# #INDENT# f . read ( )"}, {"intent": "convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'", "snippet": "datetime . datetime . strptime ( 'Jun#SPACE#1#SPACE#1#SPACE#%H:%M:%S' )"}, {"intent": "find the index of a list with the first element equal to '332' within the list of lists `thelist`", "snippet": "[ x [ 'value' ] for item in list_list ]"}, {"intent": "lower a string `text` and remove non-alphanumeric characters aside from space", "snippet": "re . split ( 'a-zA-Z]' , '' , text )"}, {"intent": "remove all non-alphanumeric characters except space from a string `text` and lower it", "snippet": "re . sub ( '($' , '' , s )"}, {"intent": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.", "snippet": "data [ 'a' ] = df [ 'a' ] == 'a' )"}, {"intent": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.", "snippet": "data [ 'a' ] = df [ 'a' ] == 'a' )"}, {"intent": "loop over a list `mylist` if sublists length equals 3", "snippet": "[ item [ 0 ] for item in range ( 0 , len ( l ) ]"}, {"intent": "initialize a list `lst` of 100 objects Object()", "snippet": "[ ( x , y ) for i in range ( 100 ) ]"}, {"intent": "create list `lst` containing 100 instances of object `Object`", "snippet": "[ ( x [ 0 ] for item in<unk><unk> ) ]"}, {"intent": "get the content of child tag with`href` attribute whose parent has css `someclass`", "snippet": "print ( soup . get ( '<unk>' ) )"}, {"intent": "joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes", "snippet": "df [ pd . DataFrame ( df [ 'col_name' ] , how = 'inner' )"}, {"intent": "use `%s` operator to print variable values `str1` inside a string", "snippet": "print ( '#SPACE#' . join ( s )"}, {"intent": "Split a string by a delimiter in python", "snippet": "\"\"\"\"\"\" . join ( lambda x : : : - 1 ]"}, {"intent": "check if directory `directory ` exists and create it if necessary", "snippet": "os . chdir ( )"}, {"intent": "check if a directory `path` exists and create it if necessary", "snippet": "os . path . split ( [ '<unk>' , '/r' ] )"}, {"intent": "check if a directory `path` exists and create it if necessary", "snippet": "os . path . split ( [ '<unk>' , '/r' ] )"}, {"intent": "check if a directory `path` exists and create it if necessary", "snippet": "os . path . split ( [ '<unk>' , '/r' ] )"}, {"intent": "Replace a separate word 'H3' by 'H1' in a string 'text'", "snippet": "re . sub ( '[a-zA-Z]' , 'a#SPACE#' )"}, {"intent": "substitute ASCII letters in string 'aas30dsa20' with empty string ''", "snippet": "re . split ( ',' , '' , '' , text )"}, {"intent": "get digits only from a string `aas30dsa20` using lambda function", "snippet": "[ int ( x ) for x in s . split ( ) ]"}, {"intent": "access a tag called \"name\" in beautifulsoup `soup`", "snippet": "soup . find_all ( 'div' , s )"}, {"intent": "get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`", "snippet": "dict ( ( k , v ) for k , v in list ( myDict . items ( ) ) )"}, {"intent": "Create new matrix object  by concatenating data from matrix A and matrix B", "snippet": "np . dot ( [ 1 , 2 , 3 ] )"}, {"intent": "concat two matrices `A` and `B` in numpy", "snippet": "np . array ( [ : , ( None ) , axis = 0 )"}, {"intent": "Get the characters count in a file `filepath`", "snippet": "os . path . dirname ( os . path . abspath ( filename ) )"}, {"intent": "count the occurrences of item \"a\" in list `l`", "snippet": "[ item [ 0 ] for x in l ]"}, {"intent": "count the occurrences of items in list `l`", "snippet": "len ( s , it )"}, {"intent": "count the occurrences of items in list `l`", "snippet": "len ( s , it )"}, {"intent": "count the occurrences of items in list `l`", "snippet": "len ( s , it )"}, {"intent": "count the occurrences of item \"b\" in list `l`", "snippet": "x [ : : - 1 ]"}, {"intent": "copy file `srcfile` to directory `dstdir`", "snippet": "os . path . dirname ( os . path . dirname ( 'file' ) )"}, {"intent": "find the key associated with the largest value in dictionary `x` whilst key is non-zero value", "snippet": "sorted ( my_dict , key = lambda x : x [ 1 ] )"}, {"intent": "get the largest key whose not associated with value of 0 in dictionary `x`", "snippet": "max ( x , key = operator . itemgetter ( 'resultType' ) )"}, {"intent": "get the largest key in a dictionary `x` with non-zero value", "snippet": "sorted ( a , key = lambda x : x [ 1 ] )"}, {"intent": "Put the curser at beginning of the file", "snippet": "os . system ( 'start#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>\\n' )"}, {"intent": "combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`", "snippet": "df . groupby ( [ 'stock' , 'col2' , 'same2' ] , how = 'inner' )"}, {"intent": "remove key 'ele' from dictionary `d`", "snippet": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )"}, {"intent": "Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years", "snippet": "datetime . datetime . now ( ) . date_date ( '%Y-%m-%Y' )"}, {"intent": "merge list `['it']` and list `['was']` and list `['annoying']` into one list", "snippet": "zip ( [ [ 'a' , 'c' ] , [ 'a' , 'c' ] , inplace = True )"}, {"intent": "increment a value with leading zeroes in a number `x`", "snippet": "x = [ x [ 0 ] for i in range ( len ( x ) ) ]"}, {"intent": "check if a pandas dataframe `df`'s index is sorted", "snippet": "df [ 'value' ] = df [ 'positions' ] . asform ( )"}, {"intent": "Convert tuple `t` to list", "snippet": "x = [ : : - 1 ]"}, {"intent": "Convert list `t` to tuple", "snippet": "x = [ : : - 1 ]"}, {"intent": "Convert tuple `level1` to list", "snippet": "l = lambda x : x . isnan ( )"}, {"intent": "send the output of pprint object `dataobject` to file `logFile`", "snippet": "print ( os . args . get ( '<unk>' ) )"}, {"intent": "get index of rows in column 'BoolCol'", "snippet": "df . groupby ( [ 'year' , '<unk>' ] )"}, {"intent": "Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True", "snippet": "df . groupby ( 'User' ) [ : - 1 ] . sum ( )"}, {"intent": "get list of indexes of rows where column 'BoolCol' values match True", "snippet": "sorted ( [ x [ 1 ] , x [ 1 ] ) )"}, {"intent": "get index of rows in dataframe `df` which column 'BoolCol' matches value True", "snippet": "df . groupby ( 'User' ) . agg ( lambda x : x . index )"}, {"intent": "change working directory to the directory `owd`", "snippet": "os . chdir ( os . path . abspath ( '<unk>' ) )"}, {"intent": "insert data from a string `testfield` to sqlite db `c`", "snippet": "re . findall ( 'a-zA)' , '' , text )"}, {"intent": "decode string \"\\\\x89\\\\n\" into a normal string", "snippet": "\"\"\"\\\\u003b4<unk>\"\"\" . decode ( 'unicode_escape' )"}, {"intent": "convert a raw string `raw_string` into a normal string", "snippet": "\"\"\"\"\"\" . join ( chr . split ( ',' ) )"}, {"intent": "convert a raw string `raw_byte_string` into a normal string", "snippet": "print ( s . encode ( 'unicode_escape' ) )"}, {"intent": "split a string `s` with into all strings of repeated characters", "snippet": "re . split ( '(00-\\\\s)' , '\\\\1' , s )"}, {"intent": "scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none", "snippet": "plt . savefig ( 'font.png' , s = [ 1 , 1 ] )"}, {"intent": "do a scatter plot with empty circles", "snippet": "logging . <unk><unk> ( ) . date ( )"}, {"intent": "remove a div with a id `main-content` using beautifulsoup", "snippet": "soup . find_all ( 'div-escape' )"}, {"intent": "filter rows containing key word `ball` in column `ids`", "snippet": "pd . concat ( [ 'foo' , 'foo' ] )"}, {"intent": "convert index at level 0 into a column in dataframe `df`", "snippet": "df . groupby ( [ 'stock' , 'same2' ] )"}, {"intent": "Add indexes in a data frame `df` to a column `index1`", "snippet": "df [ 'a' ] = df [ 'a' ] == 'a' ]"}, {"intent": "convert pandas index in a dataframe to columns", "snippet": "df . apply ( [ 'a' , 'B' ] )"}, {"intent": "Get reverse of list items from list 'b' using extended slicing", "snippet": "s . sort ( key = lambda x : x . startswith ( 's' ) )"}, {"intent": "join each element in array `a` with element at the same index in array `b` as a tuple", "snippet": "a = np . concatenate ( [ a , b , b ) ]"}, {"intent": "zip two 2-d arrays `a` and `b`", "snippet": "a , b , b )"}, {"intent": "convert list `list_of_ints` into a comma separated string", "snippet": "print ( my_list , key = lambda x : int ( x ) ) )"}, {"intent": "Send a post request with raw data `DATA` and basic authentication with `username` and `password`", "snippet": "request = requests . get ( 'https://<unk>.<unk>/post#SPACE#<unk>#SPACE#<unk>' )"}, {"intent": "Find last occurrence of character '}' in string \"abcd}def}\"", "snippet": "parser . parse ( 'monkey#SPACE#love#SPACE#banana' )"}, {"intent": "Iterate ove list `[1, 2, 3]` using list comprehension", "snippet": "np . dot ( [ 1 , 2 , 3 , 4 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 2 ]"}, {"intent": "extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples", "snippet": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )"}, {"intent": "get the filename without the extension from file 'hemanth.txt'", "snippet": "<unk><unk> = os . getdir ( '<unk>' , '<unk>' ) )"}, {"intent": "create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it", "snippet": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) , reverse = True )"}, {"intent": "create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`", "snippet": "set ( [ 'a' , 'b' , 'b' , 'b' , 'b' , 'b' ] )"}, {"intent": "select rows in a dataframe `df` column 'closing_price' between two values 99 and 101", "snippet": "df . groupby ( [ 'grade' , 'Weeks' ] , inplace = True )"}, {"intent": "replace all occurences of newlines `\\n` with `<br>` in dataframe `df`", "snippet": "df . drop ( [ '<unk>' , '<unk>' ] )"}, {"intent": "replace all occurrences of a string `\\n` by string `<br>` in a pandas data frame `df`", "snippet": "df . drop ( [ 'a' , '<unk>' ] )"}, {"intent": "create a list containing each two adjacent letters in string `word` as its elements", "snippet": "\"\"\"\"\"\" . join ( [ str ( i ) for x in s . split ( ',' ) ]"}, {"intent": "Get a list of pairs from a string `word` using lambda function", "snippet": "[ item [ i : i + n ] for i in range ( 3 ) ]"}, {"intent": "extract a url from a string `myString`", "snippet": "myString . strip ( )"}, {"intent": "extract a url from a string `myString`", "snippet": "myString . strip ( )"}, {"intent": "remove all special characters, punctuation and spaces from a string `mystring` using regex", "snippet": "re . findall ( '\\\\w\\\\w<unk>)' , re . UNICODE )"}, {"intent": "create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'", "snippet": "datetime . datetime . strptime ( '<unk>' ) . date ( '<unk>' ) . date ( )"}, {"intent": "Create multidimensional array `matrix` with 3 rows and 2 columns in python", "snippet": "np . dot ( [ 1 , 2 , 3 ] , [ 1 , 2 ] )"}, {"intent": "replace spaces with underscore", "snippet": "print ( s )"}, {"intent": "get an absolute file path of file 'mydir/myfile.txt'", "snippet": "shutil . copy ( 'file.txt' )"}, {"intent": "split string `my_string` on white spaces", "snippet": "print ( s . split ( ) )"}, {"intent": "get filename without extension from file `filename`", "snippet": "os . walk ( '\\n' )"}, {"intent": "get a list containing the sum of each element `i` in list `l` plus the previous elements", "snippet": "[ ( x , y ) for k , v in enumerate ( my_list ) ]"}, {"intent": "split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result", "snippet": "print ( os . path . split ( 'utf-8' ) )"}, {"intent": "shuffle columns of an numpy array 'r'", "snippet": "np . delete ( 0 , 1 )"}, {"intent": "copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'", "snippet": "df [ 'value' ] = df [ 'value' ] = df [ 'value' ] . astype ( df )"}, {"intent": "find a value within nested json 'data' where the key inside another key 'B' is unknown.", "snippet": "data [ 'a' ] = df [ 'a' ] . replace ( 'My#SPACE#' )"}, {"intent": "check characters of string `string` are true predication of function `predicate`", "snippet": "[ x [ 0 ] for x in s . split ( ',' ) ]"}, {"intent": "determine number of files on a drive with python", "snippet": "print ( '{0:.2f}' . format ( s ) )"}, {"intent": "how to get a single result from a SQLite query in python?", "snippet": "cursor . execute ( 'INSERT#SPACE#INTO#SPACE#INTO#SPACE#INTO#SPACE#table#SPACE#%s,#SPACE#%s,#SPACE#%s,#SPACE#%s,#SPACE#%s,#SPACE#%s)' )"}, {"intent": "convert string `user_input` into a list of integers `user_list`", "snippet": "print ( [ x for x in my_list if x > 0 ] )"}, {"intent": "Get a list of integers by splitting  a string `user` with comma", "snippet": "\"\"\"\"\"\" . join ( list ( s ) )"}, {"intent": "Sorting a Python list by two criteria", "snippet": "sorted ( a , key = lambda x : x [ 1 ] )"}, {"intent": "sort a list of objects `ut`, based on a function `cmpfun` in descending order", "snippet": "sorted ( a , key = lambda x : ( x [ 1 ] ) )"}, {"intent": "reverse list `ut` based on the `count` attribute of each object", "snippet": "mylist . sort ( key = operator . itemgetter ( 'resultType' ) )"}, {"intent": "sort a list of objects `ut` in reverse order by their `count` property", "snippet": "sorted ( li , key = lambda x : x [ 1 ] ) )"}, {"intent": "click a href button 'Send' with selenium", "snippet": "driver . find_element_by_css_selector ( 'button' ) )"}, {"intent": "click a href button having text `Send InMail` with selenium", "snippet": "driver . find_element_by_xpath ( '<check_box_id-Z' ) . click ( )"}, {"intent": "click a href button with text 'Send InMail' with selenium", "snippet": "driver . find_element_by_css_selector ( '<check_box_id-<unk><unk>' ) . click ( )"}, {"intent": "cast an int `i` to a string and concat to string 'ME'", "snippet": "\"\"\"<unk>\"\"\" . join ( [ '<unk>' , 16 )"}, {"intent": "Sorting data in DataFrame Pandas", "snippet": "df . sort ( lambda x : x [ 1 ] , ascending = False )"}, {"intent": "prepend the line '#test firstline\\n' to the contents of file 'infile' and save as the file 'outfile'", "snippet": "os . system ( 'some_command#SPACE#with#SPACE#World' )"}, {"intent": "sort a list `l` by length of value in tuple", "snippet": "sorted ( a , key = lambda x : x [ 1 ] ) )"}, {"intent": "split string `s` by words that ends with 'd'", "snippet": "s . split ( ',' )"}, {"intent": "return `True` if string `foobarrrr` contains regex `ba[rzd]`", "snippet": "re . findall ( '[a-zA-Z]' , s )"}, {"intent": "Removing duplicates in list `t`", "snippet": "print ( [ i for i in range ( 100 ) ]"}, {"intent": "Removing duplicates in list `source_list`", "snippet": "some_list [ : : - 1 ]"}, {"intent": "Removing duplicates in list `abracadabra`", "snippet": "print ( set ( d . items ( ) ) , key = lambda x : x [ 1 ] )"}, {"intent": "Convert array `a` into a list", "snippet": "a . shape [ : : - 1 ]"}, {"intent": "Convert the first row of numpy matrix `a` to a list", "snippet": "np . dot ( a , a )"}, {"intent": "In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`", "snippet": "soup . find_all ( 'monkey#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>' )"}, {"intent": "convert elements of each tuple in list `l` into a string  separated by character `@`", "snippet": "[ item [ 0 ] for x in s . split ( ',' ) ]"}, {"intent": "convert each tuple in list `l` to a string with '@' separating the tuples' elements", "snippet": "[ ( x , y ) for k , v in zip ( a , b ) ]"}, {"intent": "get the html from the current web page of a Selenium driver", "snippet": "print ( os . path . get ( 'raw_unicode_escape' ) )"}, {"intent": "Get all matches with regex pattern `\\\\d+[xX]` in list of string `teststr`", "snippet": "re . sub ( '([a-zA-Z]' , '' , s )"}, {"intent": "select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`", "snippet": "df . groupby ( [ 'stock' , 'col2' ] , inplace = True )"}, {"intent": "Sort dictionary `o` in ascending order based on its keys and items", "snippet": "sorted ( list ( my_dict . items ( ) ) , key = lambda x : x [ 1 ] ) )"}, {"intent": "get sorted list of keys of dict `d`", "snippet": "list ( d , key = lambda x : x [ 1 ] )"}, {"intent": "How to sort dictionaries by keys in Python", "snippet": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )"}, {"intent": "convert string \"1\" into integer", "snippet": "int ( 'a' , 16 )"}, {"intent": "function to convert strings into integers", "snippet": "int ( map ( int , s ) )"}, {"intent": "convert items in `T1` to integers", "snippet": "int ( s , 16 )"}, {"intent": "call a shell script `./test.sh` using subprocess", "snippet": "subprocess . call ( [ 'shutdown' , '/r' ] )"}, {"intent": "call a shell script `notepad` using subprocess", "snippet": "subprocess . call ( [ 'shutdown' , '/r' ] )"}, {"intent": "combine lists `l1` and `l2`  by alternating their elements", "snippet": "users . sort ( key = lambda x : ( x [ 1 : 3 ] ) )"}, {"intent": "encode string 'data to be encoded'", "snippet": "int ( '<unk>' ) . encode ( 'utf8' ) )"}, {"intent": "encode a string `data to be encoded` to `ascii` encoding", "snippet": "print ( s . encode ( 'utf-8' ) )"}, {"intent": "parse tab-delimited CSV file 'text.txt' into a list", "snippet": "print ( [ 'test.txt' , 'rb' ) )"}, {"intent": "Get attribute `my_str` of object `my_object`", "snippet": "new_list = [ obj . get ( my_obj ) )"}, {"intent": "group a list of dicts `LD` into one dict by key", "snippet": "sorted ( list ( mydict . items ( ) ) , key = lambda x : x [ 1 ] ) )"}, {"intent": "How do I sum the first value in each tuple in a list of tuples in Python?", "snippet": "[ ( x [ 1 ] for i in range ( 0 , len ( lambda x : x [ 1 ] ) ]"}, {"intent": "convert unicode string u\"{'code1':1,'code2':1}\" into dictionary", "snippet": "\"\"\"hello#SPACE#<unk>#SPACE#<unk>#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#you#SPACE#ccc#SPACE#ccc#SPACE#ccc"}, {"intent": "find all words in a string `mystring` that start with the `$` sign", "snippet": "s . split ( ',' )"}, {"intent": "remove any url within string `text`", "snippet": "print ( line . decode ( 'utf-8' ) )"}, {"intent": "replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros", "snippet": "np . dot ( [ 1 , 2 , 3 ] , [ 1 , 2 ] , [ 1 , 1 ] )"}, {"intent": "calculate mean across dimension in a 2d array `a`", "snippet": "np . dot ( [ 1 , 2 ] )"}, {"intent": "running r script '/pathto/MyrScript.r' from python", "snippet": "print ( os . path . exists ( '/usr/to/' ) )"}, {"intent": "run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'", "snippet": "urllib . parse . commonprefix ( 'http://www.google.com/' , '/usr/var' )"}, {"intent": "add a header to a csv file", "snippet": "np . exit ( )"}, {"intent": "replacing nan in the dataframe `df` with row average", "snippet": "df . apply ( np . columns , axis = 1 )"}, {"intent": "Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'", "snippet": "datetime . datetime . strptime (<unk>' , '%Y-%m-%d#SPACE#%H:%M:%S' )"}, {"intent": "Call a base class's class method `do` from derived class `Derived`", "snippet": "MyModel . objects . filter ( '<unk>' , s = '<unk>' )"}, {"intent": "selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1", "snippet": "df . sort ( [ 'Peak' , 'Weeks' ] , axis = 1 )"}, {"intent": "separate words delimited by one or more spaces into a list", "snippet": "[ int ( x ) for x in s . split ( ',' ) ]"}, {"intent": "length of longest element in list `words`", "snippet": "[ [ : : - 1 ] for i in range ( 0 , len ( l ) ) ]"}, {"intent": "get the value associated with unicode key 'from_user' of first dictionary in list `result`", "snippet": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )"}, {"intent": "Retrieve each line from a file 'File.txt' as a list", "snippet": "with open ( 'file.txt' , 'r' )"}, {"intent": "swap keys with values in a dictionary `a`", "snippet": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )"}, {"intent": "Open a file `path/to/FILE_NAME.ext` in write mode", "snippet": "print ( os . path . get ( 'file.<unk>' ) )"}, {"intent": "How to count distinct values in a column of a pandas group by object?", "snippet": "df . groupby ( lambda x : x . groupby ( 'ID' ) )"}, {"intent": "Check if any key in the dictionary `dict1` starts with the string `EMP$$`", "snippet": "print ( ( k , v ) for k , v in list ( myDict . items ( ) ) )"}, {"intent": "create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'", "snippet": "{ k : v for k , v in list ( d . items ( ) if v . startswith ( 'My#SPACE#' ) )"}, {"intent": "convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`", "snippet": "df . loc [ : , ( x [ 'one' ] , inplace = True )"}, {"intent": "print elements of list `list` seperated by tabs `\\t`", "snippet": "my_list = [ : : - 1 ] for item in my_list ]"}, {"intent": "print unicode string '\\xd0\\xbf\\xd1\\x80\\xd0\\xb8' with utf-8", "snippet": "\"\"\"\\\\ascii . decode ( 'hex' ) . decode ( 'utf-8' ) )"}, {"intent": "Encode a latin character in string `Sopet\\xc3\\xb3n` properly", "snippet": "urllib . parse . unquote ( 'utf-8' ) . decode ( 'utf-8' )"}, {"intent": "resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`", "snippet": "df . groupby ( [ 1 , 2 , 3 ] , [ 'A' , 1 ] )"}, {"intent": "regex, find \"n\"s only in the middle of string `s`", "snippet": "\"\"\"\"\"\" . join ( [ '' , '' , s )"}, {"intent": "display the float `1/3*100` as a percentage", "snippet": "datetime . datetime . now ( ) . decode ( 'utf-8' )"}, {"intent": "sort a list of dictionary `mylist` by the key `title`", "snippet": "sorted ( list ( my_dict . items ( ) ) , key = lambda x : x [ 1 ] ) )"}, {"intent": "sort a list `l` of dicts by dict value 'title'", "snippet": "sorted ( d , key = lambda x : x [ 'weight' ] ) )"}, {"intent": "sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.", "snippet": "sorted ( list ( mydict . items ( ) ) , key = lambda x : x [ 1 ] ) )"}, {"intent": "find 10 largest differences between each respective elements of list `l1` and list `l2`", "snippet": "[ ( x , j ) for i , j in zip ( zip ( l , zip ( l ) ) ]"}, {"intent": "BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp'", "snippet": "soup . find_element_by_css_selector ( id = '*' ) . click ( ) )"}, {"intent": "write records in dataframe `df` to table 'test' in schema 'a_schema'", "snippet": "df . groupby ( [ '<unk>' , '<unk>' ] ) . exists ( )"}, {"intent": "Extract brackets from string `s`", "snippet": "\"\"\"\"\"\" . join ( s . split ( ) )"}, {"intent": "remove duplicate elements from list 'L'", "snippet": "\"\"\"\"\"\" . join ( list ( x ) )"}, {"intent": "read a file `file` without newlines", "snippet": "with open ( 'filename' ) #NEWLINE# #INDENT# pass"}, {"intent": "get the position of item 1 in `testlist`", "snippet": "a [ - 1 : ]"}, {"intent": "get the position of item 1 in `testlist`", "snippet": "a [ - 1 : ]"}, {"intent": "get the position of item 1 in `testlist`", "snippet": "a [ - 1 : ]"}, {"intent": "get the position of item 1 in `testlist`", "snippet": "a [ - 1 : ]"}, {"intent": "get the position of item 1 in `testlist`", "snippet": "a [ - 1 : ]"}, {"intent": "get the position of item `element` in list `testlist`", "snippet": "somelist [ : : - 1 ]"}, {"intent": "get the position of item `element` in list `testlist`", "snippet": "somelist [ : : - 1 ]"}, {"intent": "find the first element of the tuple with the maximum second element in a list of tuples `lis`", "snippet": "[ x [ 0 ] for x in range ( len ( l ) ) ]"}, {"intent": "get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`", "snippet": "[ x [ i ] for i in range ( len ( l ) ) ]"}, {"intent": "Make a delay of 1 second", "snippet": "sys . exit ( )"}, {"intent": "convert list of tuples `L` to a string", "snippet": "\"\"\"\"\"\" . join ( L )"}, {"intent": "Django set default value of field `b` equal to '0000000'", "snippet": "plt . set_index ( '<unk>' )"}, {"intent": "Sort lis `list5` in ascending order based on the degrees value of its elements", "snippet": "sorted ( a , key = lambda x : x [ 1 ] ) , reverse = True )"}, {"intent": "How do I perform secondary sorting in python?", "snippet": "np . dot ( [ 1 , 2 , 3 ] )"}, {"intent": "convert a list  into a generator object", "snippet": "list ( [ 1 , 2 ] for i in range ( 3 ) ]"}, {"intent": "remove elements from list `oldlist` that have an index number mentioned in list `removelist`", "snippet": "[ i for i , j in enumerate ( my_list ) ]"}, {"intent": "Open a file `yourfile.txt` in write mode", "snippet": "with open ( 'filename.txt' , shell = True )"}, {"intent": "get attribute 'attr' from object `obj`", "snippet": "canvas . create ( 'filename' )"}, {"intent": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple", "snippet": "[ ( x , y ) for k , y in zip ( [ 1 , 2 , 3 ] , [ 'a' , '<unk>' ] ) )"}, {"intent": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line", "snippet": "\"\"\"\"\"\" . join ( [ 1 , 2 ] , [ 1 , 2 ] , [ 'a' , '<unk>' ] ) )"}, {"intent": "Python Pandas: How to replace a characters in a column of a dataframe?", "snippet": "df [ 'stats' ] = df [ 'a' ] . apply ( lambda x : x . replace ( ',' ) )"}, {"intent": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`", "snippet": "set ( [ 1 , 2 , 3 , 4 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] ,"}, {"intent": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`", "snippet": "set ( [ 1 , 2 , 3 , 4 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] ,"}, {"intent": "unzip list `original`", "snippet": "<unk><unk>e ( )"}, {"intent": "unzip list `original` and return a generator", "snippet": "x = [ int ( x ) for x in x ]"}, {"intent": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`", "snippet": "\"\"\"\"\"\" . join ( [ 1 , 2 , 3 , 4 ] , [ 1 , 2 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 'A' ,"}, {"intent": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None", "snippet": "np . zeros ( [ 1 , 2 , 3 , 4 ] , [ 1 , 2 ] , [ 1 , 2 , 3 , 4 ] , [ 'A' , 4 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] ,"}, {"intent": "encode `Decimal('3.9')` to a JSON string", "snippet": "json . loads ( 'sample.#SPACE#<unk>#SPACE#<unk>' )"}, {"intent": "Add key \"mynewkey\" to dictionary `d` with value \"mynewvalue\"", "snippet": "print ( my_dict . items ( ) ) , key = lambda x : item [ 1 ] )"}, {"intent": "Add key 'a' to dictionary `data` with value 1", "snippet": "sorted ( data , key = lambda x : x [ 'a' ] , reverse = True )"}, {"intent": "Add key 'a' to dictionary `data` with value 1", "snippet": "sorted ( data , key = lambda x : x [ 'a' ] , reverse = True )"}, {"intent": "Add key 'a' to dictionary `data` with value 1", "snippet": "sorted ( data , key = lambda x : x [ 'a' ] , reverse = True )"}, {"intent": "find maximal value in matrix `matrix`", "snippet": "numpy . where ( numpy . product ( a ) )"}, {"intent": "Round number `answer` to 2 precision after the decimal point", "snippet": "datetime . datetime . now ( )"}, {"intent": "extract ip address from an html string", "snippet": "\"\"\"\"\"\" . join ( chr . strip ( ) )"}, {"intent": "filter dataframe `df` by values in column `A` that appear more than once", "snippet": "df [ 'BrandName' ] = df [ 'col' ] . str ( lambda x : x [ 'A' ] ) )"}, {"intent": "append each line in file `myfile` into a list", "snippet": "list ( s . split ( ',' ) )"}, {"intent": "Get a list of integers `lst` from a file `filename.txt`", "snippet": "[ item for item in listdir if item : #NEWLINE# #INDENT# pass"}, {"intent": "add color bar with image `mappable` to plot `plt`", "snippet": "logging . info ( ) . date ( ) . date ( )"}, {"intent": "count most frequent 100 words in column 'text' of dataframe `df`", "snippet": "df . groupby ( 'ID' ) . apply ( )"}, {"intent": "Python split a string using regex", "snippet": "\"\"\"Hello#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#%s' )"}, {"intent": "generate all 2-element subsets of tuple `(1, 2, 3)`", "snippet": "random . sample ( [ 1 , 2 , 3 , 4 ] )"}, {"intent": "get a value of datetime.today() in the UTC time zone", "snippet": "datetime . datetime . now ( ) . date ( )"}, {"intent": "Get a new list `list2`by removing empty list from a list of lists `list1`", "snippet": "[ ( x , j ) for j , j in zip ( a , zip ( l ) ) ]"}, {"intent": "Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`", "snippet": "[ ( x [ i ] for x in zip ( a , b ) ) ]"}, {"intent": "Django response with JSON `data`", "snippet": "data = pd . read_csv ( 'foo' , s = '<unk>' )"}, {"intent": "get all text that is not enclosed within square brackets in string `example_str`", "snippet": "re . findall ( '[a-zA-Z]' , your_string )"}, {"intent": "Use a regex to get all text in a string `example_str` that is not surrounded by square brackets", "snippet": "driver . find_element_by_xpath ( 'unicode_escape' ) )"}, {"intent": "get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'", "snippet": "re . split ( '(ddd)' , 'aaa#SPACE#bbb#SPACE#bbb#SPACE#bbb#SPACE#ccc#SPACE#ccc#SPACE#ccc#SPACE#eee#SPACE#eee#SPACE#eee#SPACE#eee#SPACE#eee#SPACE#eee#SP"}, {"intent": "match regex '\\\\((.*?)\\\\)|(\\\\w)' with string '(zyx)bc'", "snippet": "re . compile ( '(ddd)' , 'aaa#SPACE#bbb#SPACE#bbb#SPACE#ccc#SPACE#<unk>' )"}, {"intent": "match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`", "snippet": "cursor . execute ( 'INSERT#SPACE#INTO#SPACE#INTO#SPACE#INTO#SPACE#table#SPACE#(%s)' )"}, {"intent": "formate each string cin list `elements` into pattern '%{0}%'", "snippet": "datetime . datetime . strptime ( '%d' , '%Y-%m-%d' )"}, {"intent": "Open a background process 'background-process' with arguments 'arguments'", "snippet": "soup . findAll ( '<unk>' , s = '<unk>' )"}, {"intent": "get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'", "snippet": "sorted ( s , key = lambda x : x [ '<unk>' ] ) )"}, {"intent": "convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary", "snippet": "dict ( map ( [ 'a' , 'b' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , 'c' , '"}, {"intent": "average each two columns of array `data`", "snippet": "np . where ( [ 1 , 1 ] , axis = 1 )"}, {"intent": "double backslash escape all double quotes in string `s`", "snippet": "\"\"\"\"\"\" . join ( [ s . split ( ',' ) )"}, {"intent": "split a string into a list of words and whitespace", "snippet": "\"\"\"\"\"\" . join ( '\\n' )"}, {"intent": "plotting stacked barplots on a panda data frame", "snippet": "df . pivot_table ( '<unk>' , s = '<unk>' )"}, {"intent": "reverse the keys and values in a dictionary `myDictionary`", "snippet": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )"}, {"intent": "finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.", "snippet": "\"\"\"\"\"\" . join ( [ 'key' , '<unk>' ] )"}, {"intent": "check if object `obj` is a string", "snippet": "\"\"\"\"\"\" . join ( chr )"}, {"intent": "check if object `o` is a string", "snippet": "isinstance ( s )"}, {"intent": "check if object `o` is a string", "snippet": "isinstance ( s )"}, {"intent": "check if object `o` is a string", "snippet": "isinstance ( s )"}, {"intent": "check if `obj_to_test` is a string", "snippet": "my_function . __name__"}, {"intent": "append list `list1` to `list2`", "snippet": "listone = list ( a , key = lambda x : x [ 1 ] )"}, {"intent": "append list `mylog` to `list1`", "snippet": "del mylist [ : : - 1 ]"}, {"intent": "append list `a` to `c`", "snippet": "a . remove ( '\\n' )"}, {"intent": "append items in list `mylog` to `list1`", "snippet": "[ item [ i : i + n ] for item in queryresult ]"}, {"intent": "append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`", "snippet": "[ i for i , j in zip ( a , b ) ]"}, {"intent": "Initialize `SECRET_KEY` in flask config with `Your_secret_string `", "snippet": "soup . find_element_by_id ( some__id_id' ) . click ( )"}, {"intent": "unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2'", "snippet": "df [ 'BrandName' ] = df [ 'a' ] = df [ 'a' ] . str . split ( ',' ) ]"}, {"intent": "find the index of an element 'MSFT' in a list `stocks_list`", "snippet": "pd . concat ( [ 'a' , 'f' ] )"}, {"intent": "rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable", "snippet": "session . query ( '?' ) [ : : - 1 ]"}, {"intent": "remove symbols from a string `s`", "snippet": "\"\"\"\"\"\" . join ( s . split ( ) )"}, {"intent": "Get the current directory of a script", "snippet": "os . path . dirname ( os . path . abspath ( __file__ ) )"}, {"intent": "Find octal characters matches from a string `str` using regex", "snippet": "re . findall ( '([a-zA-Z]+' , re . UNICODE )"}, {"intent": "split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\\\b)'", "snippet": "re . findall ( '\\\\[[^\\\\(this)' , 'aaa#SPACE#bbb#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#"}, {"intent": "Split string `input` at every space followed by an upper-case letter", "snippet": "print ( s . decode ( 'unicode-escape' ) )"}, {"intent": "send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`", "snippet": "driver . find_element_by_css_selector ( 'button' , 'rb' ) )"}, {"intent": "write bytes `bytes_` to a file `filename` in python 3", "snippet": "print ( os . args . split ( 't' ) )"}, {"intent": "get a list from a list `lst` with values mapped into a dictionary `dct`", "snippet": "[ k : v for k , v in list ( d . items ( ) ) if v != 0 ]"}, {"intent": "find duplicate names in column 'name' of the dataframe `x`", "snippet": "pd . concat ( [ '<unk>' , 'same2' ] )"}, {"intent": "truncate float 1.923328437452 to 3 decimal places", "snippet": "datetime . datetime . strptime ( 'January#SPACE#11,#SPACE#%Y#SPACE#%Y#SPACE#%Y' )"}, {"intent": "sort list `li` in descending order based on the date value in second element of each list in list `li`", "snippet": "sorted ( list ( x , key = lambda x : x [ 1 ] ) )"}, {"intent": "place the radial ticks in plot `ax` at 135 degrees", "snippet": "ax . set_xlabel ( 'Temp' , s = False )"}, {"intent": "check if path `my_path` is an absolute path", "snippet": "os . path . dirname ( os . path . abspath ( __file__ ) )"}, {"intent": "get number of keys in dictionary `yourdict`", "snippet": "print ( list ( mydict . items ( ) ) )"}, {"intent": "count the number of keys in dictionary `yourdictfile`", "snippet": "list ( iter ( mydict . items ( ) ) )"}, {"intent": "pandas dataframe get first row of each group by 'id'", "snippet": "df [ 'value' ] = df [ 'value' ] == 'value' )"}, {"intent": "split a list in first column  into multiple columns keeping other columns as well in pandas data frame", "snippet": "df . groupby ( [ 'stock' , 'B' ] , inplace = True )"}, {"intent": "extract attributes 'src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"' from string `data`", "snippet": "re . sub ( '[a]' , 'aaa#SPACE#' , '#SPACE#' )"}, {"intent": "Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`", "snippet": "set ( [ 'a' , 'b' , 'b' , 'b' ] )"}, {"intent": "Call a subprocess with arguments `c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat` that may contain spaces", "snippet": "os . system ( '#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>' )"}, {"intent": "reverse a priority queue `q` in python without using classes", "snippet": "print ( [ ( x , 16 ) for x in range ( 100 ) ] )"}, {"intent": "make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`", "snippet": "df . groupby ( [ 'a' , '<unk>' ] )"}, {"intent": "find all matches of regex pattern '([a-fA-F\\\\d]{32})' in string `data`", "snippet": "re . findall ( '[a-zA-Z]' , '' , text )"}, {"intent": "Get the length of list `my_list`", "snippet": "my_list [ : : - 10 ]"}, {"intent": "Getting the length of array `l`", "snippet": "x [ : : - 1 ]"}, {"intent": "Getting the length of array `s`", "snippet": "if s [ : : - 1 ]"}, {"intent": "Getting the length of `my_tuple`", "snippet": "my_function [ : : : - 1 ]"}, {"intent": "Getting the length of `my_string`", "snippet": "my_string [ : : #NEWLINE# #INDENT# pass"}, {"intent": "remove escape character from string \"\\\\a\"", "snippet": "\"\"\"<unk>#SPACE#Hello\"\"\" . strip ( )"}, {"intent": "replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.", "snippet": "\"\"\"a#SPACE#{}\"\"\" . format ( 'a' , 'a' )"}, {"intent": "remove directory tree '/folder_name'", "snippet": "print ( os . path . getpath ( '<unk>' ) ) #NEWLINE# #INDENT# print ( os . path . get ( ) , '<unk>' ) )"}, {"intent": "create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`", "snippet": "df . groupby ( [ 'race_id' , 'f' ] , ascending = False )"}, {"intent": "reverse sort Counter `x` by values", "snippet": "sorted ( a , key = lambda x : x [ 1 ] )"}, {"intent": "reverse sort counter `x` by value", "snippet": "sorted ( a , key = lambda x : x [ 1 ] )"}, {"intent": "append a numpy array 'b' to a numpy array 'a'", "snippet": "np . concatenate ( [ 'a' , 1 ] , axis = 1 )"}, {"intent": "numpy concatenate two arrays `a` and `b` along the first axis", "snippet": "a [ np . arange ( a ) , axis = 0 )"}, {"intent": "numpy concatenate two arrays `a` and `b` along the second axis", "snippet": "np . concatenate ( arr , axis = 0 )"}, {"intent": "numpy concatenate two arrays `a` and `b` along the first axis", "snippet": "a [ np . arange ( a ) , axis = 0 )"}, {"intent": "numpy concatenate two arrays `a` and `b` along the first axis", "snippet": "a [ np . arange ( a ) , axis = 0 )"}, {"intent": "fetch address information for host 'google.com' ion port 80", "snippet": "os . system ( '<unk>#SPACE#<unk>#SPACE#<unk>' )"}, {"intent": "add a column 'day' with value 'sat' to dataframe `df`", "snippet": "df [ 'a' ] = df [ 'col' ] . str . split ( ',' ) ]"}, {"intent": "return a 401 unauthorized in django", "snippet": "ax . xaxis . get_ticks_position ( 'top' ) )"}, {"intent": "Flask set folder 'wherever' as the default template folder", "snippet": "os . chdir ( 'username' )"}, {"intent": "How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?", "snippet": "re . compile ( '(ddd)' , re . UNICODE )"}, {"intent": "sort a list of lists 'c2' such that third row comes first", "snippet": "users . sort ( key = lambda x : x [ 1 ] , x [ 1 ] ) )"}, {"intent": "Sorting a list of lists in Python", "snippet": "zip ( list , zip ( lambda x : x [ 1 ] ) )"}, {"intent": "Sorting a list of lists in Python", "snippet": "zip ( list , zip ( lambda x : x [ 1 ] ) )"}, {"intent": "set font `Arial` to display non-ascii characters in matplotlib", "snippet": "re . findall ( '[a-zA-Z]' , style = True )"}, {"intent": "Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal", "snippet": "df [ 'a' ] = df [ 'a' ] . apply ( lambda x : x . mean ( ) )"}, {"intent": "get html source of Selenium WebElement `element`", "snippet": "print ( soup . current_url ( ) )"}, {"intent": "Get the integer location of a key `bob` in a pandas data frame", "snippet": "pd . concat ( [ 'stock' , 'same2' ] )"}, {"intent": "open a 'gnome' terminal from python script and run  'sudo apt-get update' command.", "snippet": "subprocess . call ( 'echo#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>#SPACE#<unk>' )"}, {"intent": "add an item with key 'third_key' and value 1 to an dictionary `my_dict`", "snippet": "print ( my_dict , key = operator . itemgetter ( 'an' ) )"}, {"intent": "declare an array", "snippet": "sys . version ( )"}, {"intent": "Insert item `12` to a list `my_list`", "snippet": "my_list [ : : - 10 ]"}, {"intent": "add an entry 'wuggah' at the beginning of list `myList`", "snippet": "print ( [ '<unk>' , '<unk>' ] )"}, {"intent": "convert a hex-string representation to actual bytes", "snippet": "print ( s . encode ( 'hex' ) )"}, {"intent": "select the last column of dataframe `df`", "snippet": "df . groupby ( 'ID' )"}, {"intent": "get the first value from dataframe `df` where column 'Letters' is equal to 'C'", "snippet": "df [ 'a' ] = df [ 'a' ] == 'Male' )"}, {"intent": "converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix", "snippet": "np . dot ( [ 1 , 2 , 3 , 4 , 3 , 4 ] )"}, {"intent": "get the type of `i`", "snippet": "x [ - 1 ]"}, {"intent": "determine the type of variable `v`", "snippet": "x = list ( a , key = lambda x : x . index )"}, {"intent": "determine the type of variable `v`", "snippet": "x = list ( a , key = lambda x : x . index )"}, {"intent": "determine the type of variable `v`", "snippet": "x = list ( a , key = lambda x : x . index )"}, {"intent": "determine the type of variable `v`", "snippet": "x = list ( a , key = lambda x : x . index )"}, {"intent": "get the type of variable `variable_name`", "snippet": "some_string [ : : - 1 ]"}, {"intent": "get the 5th item of a generator", "snippet": "list ( range ( 1 , 2 ) )"}, {"intent": "Print a string `word` with string format", "snippet": "\"\"\"\"\"\" . join ( chr ( s ) )"}, {"intent": "join a list of strings `list` using a space ' '", "snippet": "\"\"\"\"\"\" . join ( list ( a ) )"}, {"intent": "create list `y` containing two empty lists", "snippet": "listone = [ [ ] for i in range ( 3 ) ]"}, {"intent": "read a file 'C:/name/MyDocuments/numbers' into a list `data`", "snippet": "print ( [ '<unk>' , '<unk>' , '<unk>' ] )"}, {"intent": "delete all occurrences of character 'i' in string 'it is icy'", "snippet": "print ( s . split ( ',' ) )"}, {"intent": "delete all instances of a character 'i' in a string 'it is icy'", "snippet": "\"\"\"0,1,2\"\"\" . split ( ',' )"}, {"intent": "delete all characters \"i\" in string \"it is icy\"", "snippet": "print ( s . split ( ',' ) )"}, {"intent": "How to delete all instances of a character in a string in python?", "snippet": "re . findall ( '[a-zA-Z0-9-)' , '\\\\1' , s )"}, {"intent": "Drop rows of pandas dataframe `df` having NaN in column at index \"1\"", "snippet": "df [ 'a' ] = df [ 'a' ] == 'a' )"}, {"intent": "get elements from list `myList`, that have a field `n` value 30", "snippet": "max ( zip ( a , key = lambda x : x [ 1 ] ) )"}, {"intent": "converting list of strings `intstringlist` to list of integer `nums`", "snippet": "[ item [ i : i + n ] for item in lst ]"}, {"intent": "convert list of string numbers into list of integers", "snippet": "[ int ( i ) for i in range ( 3 ) ]"}, {"intent": "print \".\" without newline", "snippet": "print ( 'Hello#SPACE#args' )"}, {"intent": "round off the float that is the product of `2.52 * 100` and convert it to an int", "snippet": "print ( [ x for i in range ( 100 ) ]"}, {"intent": "Find all files in directory \"/mydir\" with extension \".txt\"", "snippet": "with open ( 'file.txt' , 'file' )"}, {"intent": "Find all files in directory \"/mydir\" with extension \".txt\"", "snippet": "with open ( 'file.txt' , 'file' )"}, {"intent": "Find all files in directory \"/mydir\" with extension \".txt\"", "snippet": "with open ( 'file.txt' , 'file' )"}, {"intent": "plot dataframe `df` without a legend", "snippet": "df . reset_index ( )"}, {"intent": "loop through the IP address range \"192.168.x.x\"", "snippet": "winsound . savefig ( '<unk>#SPACE#<unk>' )"}, {"intent": "loop through the IP address range \"192.168.x.x\"", "snippet": "winsound . savefig ( '<unk>#SPACE#<unk>' )"}, {"intent": "loop through the IP address range \"192.168.x.x\"", "snippet": "winsound . savefig ( '<unk>#SPACE#<unk>' )"}, {"intent": "Sum the corresponding decimal values for binary values of each boolean element in list `x`", "snippet": "[ x [ 0 ] for x in range ( 0 , X ) ]"}, {"intent": "write multiple strings `line1`, `line2` and `line3` in one line in a file `target`", "snippet": "cursor . execute ( 'INSERT#SPACE#INTO#SPACE#INTO#SPACE#foo#SPACE#foo' )"}, {"intent": "Convert list of lists `data` into a flat list", "snippet": "list ( itertools . chain . from_iterable ( 1 ) )"}, {"intent": "Print new line character as `\\n` in a string `foo\\nbar`", "snippet": "with open ( 'a#SPACE#String' )"}, {"intent": "remove last comma character ',' in string `s`", "snippet": "\"\"\"\"\"\" . join ( [ 'a' , '' , s )"}, {"intent": "calculate the mean of each element in array `x` with the element previous to it", "snippet": "[ x [ 0 ] for i in range ( len ( x ) ) ]"}, {"intent": "get an array of the mean of each two consecutive values in numpy array `x`", "snippet": "arr [ arr [ 0 ] for i in range ( 0 ) ]"}, {"intent": "load data containing `utf-8` from file `new.txt` into numpy array `arr`", "snippet": "arr = open ( 'file.txt' , delimiter = None )"}, {"intent": "reverse sort list of dicts `l` by value for key `time`", "snippet": "sorted ( list ( d . items ( ) ) , key = lambda x : x [ 1 ] ) )"}, {"intent": "Sort a list of dictionary `l` based on key `time` in descending order", "snippet": "sorted ( my_dict . items ( ) ) , key = lambda x : x [ 1 ] )"}, {"intent": "get rows of dataframe `df` that match regex '(Hel|Just)'", "snippet": "df . groupby ( [ '<unk>' , '<unk>' : '<unk><unk>' ] )"}, {"intent": "find the string in `your_string` between two special characters \"[\" and \"]\"", "snippet": "driver . find_elements_by_css_selector ( 'a#SPACE#' ) . split ( )"}, {"intent": "How to create a list of date string in 'yyyymmdd' format with Python Pandas?", "snippet": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) , key = lambda x : x [ 1 ] )"}, {"intent": "count number of times string 'brown' occurred in string 'The big brown fox is brown'", "snippet": "<unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk><unk>' )"}, {"intent": "decode json string `request.body` to python dict", "snippet": "urllib . parse . unquote ( urllib . parse . unquote ( 'utf-8' ) )"}, {"intent": "download the file from url `url` and save it under file `file_name`", "snippet": "print ( os . path . get ( file_url )"}, {"intent": "split string `text` by space", "snippet": "\"\"\"\"\"\" . join ( s )"}, {"intent": "split string `text` by \",\"", "snippet": "\"\"\"<unk>#SPACE#Hello#SPACE#Hello#SPACE#Hello#SPACE#string' )"}, {"intent": "Split string `line` into a list by whitespace", "snippet": "\"\"\"\"\"\" . join ( '\\n' )"}, {"intent": "replace dot characters  '.' associated with ascii letters in list `s` with space ' '", "snippet": "re . sub ( '(ddd)' , '*' , s )"}, {"intent": "sort list `list_of_strings` based on second index of each string `s`", "snippet": "my_list = [ ( k , v ) for k , v in list ( my_dict . items ( ) ) ]"}, {"intent": "call multiple bash function \u2018vasp\u2019 and \u2018tee tee_output\u2019 using \u2018|\u2019", "snippet": "re . compile ( '(://zA)' , '<unk>#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#this#SPACE#<unk>' )"}, {"intent": "eliminate all strings from list `lst`", "snippet": "list ( map ( list , list ( s ) ) )"}, {"intent": "get all the elements except strings from the list 'lst'.", "snippet": "[ item [ 0 ] for x in s . split ( '' ) ]"}, {"intent": "Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`", "snippet": "sorted ( list ( my_dict . items ( ) ) , key = lambda x : x [ 1 ] ) )"}, {"intent": "sort a list of dictionaries `l` by values in key `name` in descending order", "snippet": "sorted ( list ( mydict . items ( ) ) , key = lambda x : x [ 1 ] )"}, {"intent": "How do I sort a list of dictionaries by values of the dictionary in Python?", "snippet": "sorted ( list ( my_dict . items ( ) ) , key = lambda x : x [ 1 ] )"}, {"intent": "How do I sort a list of dictionaries by values of the dictionary in Python?", "snippet": "sorted ( list ( my_dict . items ( ) ) , key = lambda x : x [ 1 ] )"}, {"intent": "How to sort a Dataframe by the ocurrences in a column in Python (pandas)", "snippet": "pd . concat ( [ df [ 'value' ] , ascending = False )"}, {"intent": "join together with \",\" elements inside a list indexed with 'category' within a dictionary `trans`", "snippet": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )"}, {"intent": "concatenate array of strings `['A', 'B', 'C', 'D']` into a string", "snippet": "\"\"\"\"\"\" . join ( [ 'a' , 'b' , 'b' , 'b' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , 'x' , '"}, {"intent": "get json data from restful service 'url'", "snippet": "parser . parse ( '<unk>#SPACE#<unk>#SPACE#<unk>' )"}, {"intent": "Remove all strings from a list a strings `sents` where the values starts with `@$\\t` or `#`", "snippet": "re . split ( '[a]' , '' , s )"}, {"intent": "django filter by hour", "snippet": "con . version ( )"}, {"intent": "sort a list of dictionary `list` first by key `points` and then by `time`", "snippet": "sorted ( list ( my_dict . items ( ) ) , key = lambda x : x [ 1 ] ) )"}, {"intent": "convert datetime object `(1970, 1, 1)` to seconds", "snippet": "\"\"\"\"\"\" . join ( [ 1 , 2 , 3 ] )"}, {"intent": "insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.", "snippet": "os . system ( 'file.<unk>' , './_<unk>_<unk>' , shell = True )"}, {"intent": "reload a module `module`", "snippet": "print ( )"}, {"intent": "Convert integer `number` into an unassigned integer", "snippet": "datetime . datetime . now ( )"}, {"intent": "convert int values in list `numlist` to float", "snippet": "[ x [ 0 ] for i in range ( len ( x ) ) ]"}, {"intent": "write dataframe `df`, excluding index, to a csv file", "snippet": "df . groupby ( [ 'Peak' , 'a' ] , inplace = True )"}, {"intent": "convert a urllib unquoted string `unescaped` to a json data `json_data`", "snippet": "driver . find_element_by_css_by_css_selector ( 'button' ) )"}, {"intent": "Create a list containing all ascii characters as its elements", "snippet": "\"\"\"\"\"\" . join ( chr ( ord ( 'aaabcabccd' ) )"}, {"intent": "write `newFileBytes` to a binary file `newFile`", "snippet": "[ ( x [ 0 ] for x in range ( 100 ) ]"}, {"intent": "python regex - check for a capital letter with a following lowercase in string `string`", "snippet": "re . sub ( '([a-zA-Z]*-Z]' , string )"}, {"intent": "get the last key of dictionary `dict`", "snippet": "for k , v in list ( d . items ( ) ) )"}, {"intent": "write line \"hi there\" to file `f`", "snippet": "open ( 'filename' , 'r' )"}, {"intent": "write line \"hi there\" to file `myfile`", "snippet": "open ( [ 'a' , 'r' ] )"}, {"intent": "write line \"Hello\" to file `somefile.txt`", "snippet": "with open ( 'example.txt' ) as f : #NEWLINE# #INDENT# f . write ( 'file.txt' )"}, {"intent": "convert unicode string `s` to ascii", "snippet": "s . decode ( 'utf8' )"}, {"intent": "Django get maximum value associated with field 'added' in model `AuthorizedEmail`", "snippet": "pandas . set_option ( 'User' ) [ : : - 1 ] . dt . mean ( )"}, {"intent": "Find all numbers and dots from a string `text` using regex", "snippet": "re . findall ( '\\\\w<unk>)' , '\\\\1' , s )"}, {"intent": "python regex  to find all numbers and dots from 'text'", "snippet": "re . findall ( '[a-zA-Z]' , s )"}, {"intent": "execute script 'script.ps1' using 'powershell.exe' shell", "snippet": "subprocess . call ( [ 'some#SPACE#c#SPACE#<unk>' , shell = True )"}, {"intent": "Sort a list of tuples `b` by third item in the tuple", "snippet": "sorted ( lst , key = lambda x : x [ 1 ] ) )"}, {"intent": "get a list of all keys in Cassandra database `cf` with pycassa", "snippet": "print ( s , key = lambda x : x [ 1 ] ) for i in range ( 100 ) ]"}, {"intent": "create a datetime with the current date & time", "snippet": "datetime . datetime . now ( ) . date ( ) . isoformat ( )"}, {"intent": "get the index of an integer `1` from a list `lst` if the list also contains boolean items", "snippet": "[ ( x , y ) for i in range ( 3 ) ]"}, {"intent": "subtract 13 from every number in a list `a`", "snippet": "[ i for i in range ( 3 ) ]"}, {"intent": "choose a random file from the directory contents of the C drive, `C:\\\\`", "snippet": "os . chdir ( 'start#SPACE#excel' )"}, {"intent": "get the highest element in absolute value in a numpy matrix `x`", "snippet": "x = np . where ( x == 0 )"}, {"intent": "Get all urls within text `s`", "snippet": "s = soup . find ( url )"}, {"intent": "match urls whose domain doesn't start with `t` from string `document` using regex", "snippet": "re . findall ( '\\\\w\\\\w<unk>)' , re . UNICODE )"}, {"intent": "split a string `mystring` considering the spaces ' '", "snippet": "\"\"\"<unk>#SPACE#\"\"\" . strip ( )"}, {"intent": "open file `path` with mode 'r'", "snippet": "with open ( 'HOME' , shell = True )"}, {"intent": "sum elements at the same index in list `data`", "snippet": "sum ( zip ( a , key = lambda x : x [ 1 ] ) )"}, {"intent": "add a new axis to array `a`", "snippet": "np . delete ( a , a )"}]