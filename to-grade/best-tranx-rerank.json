[{"intent": "send a signal `signal.SIGUSR1` to the current process", "snippet": "os.system(`< unk > < unk > < unk >`)"}, {"intent": "decode a hex string '4a4b4c' to UTF-8.", "snippet": "print(4a4b4c.decode(`4a4b4c`))"}, {"intent": "check if all elements in list `myList` are identical", "snippet": "[i for i in my List if i = = 2]"}, {"intent": "format number of spaces between strings `Python`, `:` and `Very Good` to be `20`", "snippet": "``````.join(str(x)for x in str(Python))"}, {"intent": "How to convert a string from CP-1251 to UTF-8?", "snippet": "unicodedata.normalize(`NFKD`, string).encode(`utf8`)"}, {"intent": "get rid of None values in dictionary `kwargs`", "snippet": "list(kwargs.values())"}, {"intent": "get rid of None values in dictionary `kwargs`", "snippet": "list(kwargs.values())"}, {"intent": "capture final output of a chain of system commands `ps -ef | grep something | wc -l`", "snippet": "self.treeview.connect(`ps-ef | grep something | wc-l`, self.ps-ef | grep something | wc-l)"}, {"intent": "concatenate a list of strings `['a', 'b', 'c']`", "snippet": "``````.join([`a`,`b`,`c`])"}, {"intent": "find intersection data between series `s1` and series `s2`", "snippet": "pd.concat([s1]* 5,ignore_index = True)"}, {"intent": "sending http headers to `client`", "snippet": "client = requests.get(client)"}, {"intent": "Format a datetime string `when` to extract date only", "snippet": "when.strftime(`% m/% d/% Y`)"}, {"intent": "split a multi-line string `inputString` into separate strings", "snippet": "[s.split(``) for s in input String.split(`,`)]"}, {"intent": "Split a multi-line string ` a \\n b \\r\\n c ` by new line character `\\n`", "snippet": "re.split(`\\ n`,`a \\ n b \\ r \\ n c`)"}, {"intent": "concatenate elements of list `b` by a colon \":\"", "snippet": "[``.join(x)for x in b]"}, {"intent": "get the first object from a queryset in django model `Entry`", "snippet": "Entry.objects.values_list(`Entry`, flat = True)"}, {"intent": "Calculate sum over all rows of 2D numpy array", "snippet": "np.array([1,2,3,4]).sum(axis = 0)"}, {"intent": "enable warnings using action 'always'", "snippet": "warnings.info(`always`)"}, {"intent": "concatenate items of list `l` with a space ' '", "snippet": "list(map(tuple,[]))"}, {"intent": "run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable", "snippet": "os.system(`hello.py`)"}, {"intent": "How can I parse a time string containing milliseconds in it with python?", "snippet": "print(time.mktime(datetime.datetime.fromtimestamp(time).timetuple()))"}, {"intent": "convert a string `my_string` with dot and comma into a float number `my_float`", "snippet": "float(my_string.split(`,`)[0])"}, {"intent": "convert a string `123,456.908` with dot and comma into a floating number", "snippet": "print(`,`.join(map(str,123,456.908)))"}, {"intent": "set pythonpath in python script.", "snippet": "os.chdir(os.path.dirname(__file__))"}, {"intent": "split string 'Words, words, words.' using a regex '(\\\\W+)'", "snippet": "re.split(`(\\ \\ W +)`,`Words,words,words.`)"}, {"intent": "open a file `Output.txt` in append mode", "snippet": "f = open(`Output.txt`,`r`)"}, {"intent": "download a file \"http://www.example.com/songs/mp3.mp3\" over HTTP and save to \"mp3.mp3\"", "snippet": "urllib.request.urlretrieve(`http://www.example.com/songs/mp3.mp3`,`mp3.mp3`)"}, {"intent": "download a file `url` over HTTP and save to `file_name`", "snippet": "urllib.request.urlretrieve(`< unk >`,`file_name`)"}, {"intent": "download a file 'http://www.example.com/' over HTTP", "snippet": "testfile = urllib.request.URLopener() testfile.retrieve(`http://www.example.com/`,`ignore`)"}, {"intent": "download a file `url` over HTTP", "snippet": "file_name = wget.download(url)"}, {"intent": "download a file `url` over HTTP and save to \"10MB\"", "snippet": "urllib.request.urlretrieve(`10MB`,`ignore`)"}, {"intent": "argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`", "snippet": "parser.add_argument(`--version`, nargs =`*`)"}, {"intent": "remove key 'c' from dictionary `d`", "snippet": "d.pop(`c`, None)"}, {"intent": "Create new DataFrame object by merging columns \"key\" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively", "snippet": "split_df.reset_index().rename(columns = {`split_df`:`csv_df`})"}, {"intent": "Split a string `s` by space with `4` splits", "snippet": "re.findall(`< unk >`,`4`)"}, {"intent": "read keyboard-input", "snippet": "ast.literal_eval(`keyboard-input`)"}, {"intent": "enable debug mode on Flask application `app`", "snippet": "return app.run(debug = True)"}, {"intent": "python save list `mylist` to file object 'save.txt'", "snippet": "mylist.savefig(`save.txt`)"}, {"intent": "Multiply a matrix `P` with a 3d tensor `T` in scipy", "snippet": "np.einsum(`...j,...j->...`,P,T)"}, {"intent": "Create 3d array of zeroes of size `(3,3,3)`", "snippet": "print(np.linspace(1,3,color =`( 3,3,3)`))"}, {"intent": "cut off the last word of a sentence `content`", "snippet": "re.sub(`< unk >`,`\\ \\ 1Bull`, content)"}, {"intent": "convert scalar `x` to array", "snippet": "x = np.loadtxt(`x`, delimiter =`,`)"}, {"intent": "sum all elements of nested list `L`", "snippet": "sum(L)"}, {"intent": "convert hex string '470FC614' to a float number", "snippet": "float(int(`470FC614`, 16))"}, {"intent": "Multiple each value by `2` for all keys in a dictionary `my_dict`", "snippet": "map(dict,zip(* [[(k,v)for k,v in my_dict.items()]for v in list(my_dict.values())]))"}, {"intent": "running bash script 'sleep.sh'", "snippet": "os.system(`sleep.sh`)"}, {"intent": "Join elements of list `l` with a comma `,`", "snippet": "[x for x in l if x not in [`,`,`,`]]"}, {"intent": "make a comma-separated string from a list `myList`", "snippet": "[`,`.join(map(str,row)) for row in my List]"}, {"intent": "reverse the list that contains 1 to 10", "snippet": "all(i in j for i in range(10))"}, {"intent": "remove substring 'bag,' from a string 'lamp, bag, mirror'", "snippet": "```lamp,bag,mirror```.replace(`bag,`,``)"}, {"intent": "Reverse the order of words, delimited by `.`, in string `s`", "snippet": "``````.join(sorted(s.split(),key = lambda t:t [0], reverse = True))"}, {"intent": "convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'", "snippet": "time.strftime(`% Y-% m-% d % H:% M:% S.% f`,`% Y-% m-% d % H:% M:% S.% f`.format(s))"}, {"intent": "parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'", "snippet": "time.strftime(`% Y-% m-% d % H:% M:% S`)"}, {"intent": "get the date 7 days before the current date", "snippet": "datetime.datetime.now()"}, {"intent": "sum elements at index `column` of each list in list `data`", "snippet": "sum(sum(x)for x in data)"}, {"intent": "sum columns of a list `array`", "snippet": "sum(sum(x)for x in array)"}, {"intent": "encode binary string 'your string' to base64 code", "snippet": "hex(int(`your string`, 2))"}, {"intent": "combine list of dictionaries `dicts` with the same keys in each list to a single dictionary", "snippet": "dict(( k,`k`) for d in dicts for k,v in list(d.items()))"}, {"intent": "Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`", "snippet": "dict(( k,v)for k,v in dicts.items() if v)"}, {"intent": "How do I get the url parameter in a Flask view", "snippet": "request.headers.get(`/`)"}, {"intent": "identify duplicate values in list `mylist`", "snippet": "[i for i,j in enumerate(mylist)if i]"}, {"intent": "Insert directory 'apps' into directory `__file__`", "snippet": "x_file = open(os.path.join(__file__,`apps`),`apps`)"}, {"intent": "modify sys.path for python module `subdir`", "snippet": "subdir.path()"}, {"intent": "Insert a 'None' value into a SQLite3 table.", "snippet": "cursor.execute(`INSERT INTO table(`column1`) VALUES(% s)`,( None,))"}, {"intent": "flatten list `list_of_menuitems`", "snippet": "list_of_menuitems = [i [0]for i in list_of_menuitems]"}, {"intent": "append elements of a set `b` to a list `a`", "snippet": "a.write(`\\ n`.join(b))"}, {"intent": "Append elements of a set to a list in Python", "snippet": "[[]for i in range(2)]"}, {"intent": "write the data of dataframe `df` into text file `np.txt`", "snippet": "df.to_csv(`np.txt`, index = False)"}, {"intent": "write content of DataFrame `df` into text file 'c:\\\\data\\\\pandas.txt'", "snippet": "df.to_csv(`c:\\ \\ data \\ \\ pandas.txt`, index = False)"}, {"intent": "Split a string `x` by last occurrence of character `-`", "snippet": "```-```.split(`-`)"}, {"intent": "get the last part of a string before the character '-'", "snippet": "``````.join(re.findall(`< unk >`, str))"}, {"intent": "upload file using FTP", "snippet": "requests.get(`testfile`, filename =`my_file`)"}, {"intent": "add one to the hidden web element with id 'XYZ' with selenium python script", "snippet": "driver.find_element_by_id(`XYZ`).click()"}, {"intent": "create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`", "snippet": "max(max(x)for x in zip(* [2,3,4]))"}, {"intent": "print a list `l` and move first 3 elements to the end of the list", "snippet": "print(`< unk > % s,< unk >`%(1,2,3))"}, {"intent": "loop over files in directory '.'", "snippet": "for dirname,dirnames,filenames in os.walk(`.`):for subdirname in dirnames:print(os.path.join(dirname,subdirname)) for filename in filenames:pass"}, {"intent": "loop over files in directory `source`", "snippet": "for dirname,dirnames,filenames in os.walk(`source`):for subdirname in dirnames:print(os.path.join(dirname,subdirname)) for filename in filenames:pass"}, {"intent": "create a random list of integers", "snippet": "[random.randint(0,9)for _ in range(10)]"}, {"intent": "Using %f with strftime() in Python to get microseconds", "snippet": "datetime.datetime.strptime(`< unk >`,`%.2f`)"}, {"intent": "Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`", "snippet": "db.session.query(id = SELECT * FROM Schedule WHERE station =$1).filter(actions__contains = [foo.key()])"}, {"intent": "filter rows in pandas starting with alphabet 'f' using regular expression.", "snippet": "df.filter(lambda x:x.upper() = =`f`)"}, {"intent": "print a 2 dimensional list `tab` as a table with delimiters", "snippet": "print([x.map(``, x)for x in tab])"}, {"intent": "pandas: delete rows in dataframe `df` based on multiple columns values", "snippet": "pd.concat([df,pd.Data Frame(df)],axis = 1)"}, {"intent": "format the variables `self.goals` and `self.penalties` using string formatting", "snippet": "```str_2```.format(`self.goals`,`self.penalties`)"}, {"intent": "format string \"({} goals, ${})\" with variables `goals` and `penalties`", "snippet": "```({ } goals,${ })```.format(goals,penalties)"}, {"intent": "format string \"({0.goals} goals, ${0.penalties})\"", "snippet": "```({ 0.goals } goals,${ 0.penalties })```.format(`({ 0.goals } goals,${ 0.penalties })`,`({ 0.goals } goals,${ 0.penalties })`)"}, {"intent": "convert list of lists `L` to list of integers", "snippet": "[int(i)for i in L]"}, {"intent": "combine elements of each list in list `L` into digits of a single integer", "snippet": "map(int,[1,2,3])"}, {"intent": "convert a list of lists `L` to list of integers", "snippet": "[map(int,sublist)for sublist in L]"}, {"intent": "write the elements of list `lines` concatenated by special character '\\n' to file `myfile`", "snippet": "print(`\\ n`.join([re.sub(`< unk >`,``,lines)for lines in lines]))"}, {"intent": "removing an element from a list based on a predicate 'X' or 'N'", "snippet": "[type(x)for x in zip(* my_list)]"}, {"intent": "Remove duplicate words from a string `text` using regex", "snippet": "text = text.decode(`utf-8`).split()"}, {"intent": "count non zero values in each column in pandas data frame", "snippet": "df.groupby(`index`).head(1)"}, {"intent": "search for string that matches regular expression pattern '(?<!Distillr)\\\\\\\\AcroTray\\\\.exe' in string 'C:\\\\SomeDir\\\\AcroTray.exe'", "snippet": "re.findall(`(? < ! Distillr)\\ \\ \\ \\ Acro Tray \\ \\.exe`,`C:\\ \\ Some Dir \\ \\ Acro Tray.exe`)"}, {"intent": "split string 'QH QD JC KD JS' into a list on white spaces", "snippet": "re.match(`< unk >`,`QH QD JC KD JS`).split(``)"}, {"intent": "search for occurrences of regex pattern '>.*<' in xml string `line`", "snippet": "re.match(`>.* <`, line).group(1)"}, {"intent": "erase all the contents of a file `filename`", "snippet": "open(`filename`,`w`).close()"}, {"intent": "convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'", "snippet": "datetime.strptime(`% Y-% m-% d % H:% M:% S.% f`,`% Y-% m-% d % H:% M:% S.% f`)"}, {"intent": "find the index of a list with the first element equal to '332' within the list of lists `thelist`", "snippet": "[x for x in thelist if x [0]= = 1]"}, {"intent": "lower a string `text` and remove non-alphanumeric characters aside from space", "snippet": "re.sub(`[^ 0-9a-z A-Z]+`,``,text)"}, {"intent": "remove all non-alphanumeric characters except space from a string `text` and lower it", "snippet": "re.sub(`[^ 0-9a-z A-Z]+`,``,text)"}, {"intent": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.", "snippet": "plt.savefig(`H20`, dpi = 300)"}, {"intent": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.", "snippet": "plt.savefig(`H20`, dpi = 300)"}, {"intent": "loop over a list `mylist` if sublists length equals 3", "snippet": "[item for item in mylist if len(item)= = 1]"}, {"intent": "initialize a list `lst` of 100 objects Object()", "snippet": "lst = [(p + 0)for i in range(100)]"}, {"intent": "create list `lst` containing 100 instances of object `Object`", "snippet": "lst = [Object for Object in lst]"}, {"intent": "get the content of child tag with`href` attribute whose parent has css `someclass`", "snippet": "print(content.get_attribute(`div`))"}, {"intent": "joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes", "snippet": "pd.merge(df1,df2,how =`inner`, on = [`Date_Time`])"}, {"intent": "use `%s` operator to print variable values `str1` inside a string", "snippet": "print(`< unk > % s,< unk >`%(str1,str1))"}, {"intent": "Split a string by a delimiter in python", "snippet": "``````.join(re.findall(`< unk >`, s))"}, {"intent": "check if directory `directory ` exists and create it if necessary", "snippet": "print(os.path.exists(`directory`))"}, {"intent": "check if a directory `path` exists and create it if necessary", "snippet": "os.walk(path)"}, {"intent": "check if a directory `path` exists and create it if necessary", "snippet": "os.walk(path)"}, {"intent": "check if a directory `path` exists and create it if necessary", "snippet": "os.walk(path)"}, {"intent": "Replace a separate word 'H3' by 'H1' in a string 'text'", "snippet": "``````.join(map(``.join,map(str.replace,`H3`,`H1`)))"}, {"intent": "substitute ASCII letters in string 'aas30dsa20' with empty string ''", "snippet": "``````.join(map(chr,int(``)))"}, {"intent": "get digits only from a string `aas30dsa20` using lambda function", "snippet": "list(re.findall(`\\ \\ d +`, aas30dsa20))"}, {"intent": "access a tag called \"name\" in beautifulsoup `soup`", "snippet": "soup.find(`div`, href = re.compile(`name`))[`name`]"}, {"intent": "get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`", "snippet": "dict(( k,v)for k,v in cursor.items() if v)"}, {"intent": "Create new matrix object  by concatenating data from matrix A and matrix B", "snippet": "numpy.matrix([a]).ravel()"}, {"intent": "concat two matrices `A` and `B` in numpy", "snippet": "np.importlib(A < B,axis = 0).B()"}, {"intent": "Get the characters count in a file `filepath`", "snippet": "sum(1 for line in open(`filepath`))"}, {"intent": "count the occurrences of item \"a\" in list `l`", "snippet": "sum(a = = a for a in l)"}, {"intent": "count the occurrences of items in list `l`", "snippet": "sum(tuple(x)for x in l)"}, {"intent": "count the occurrences of items in list `l`", "snippet": "sum(tuple(x)for x in l)"}, {"intent": "count the occurrences of items in list `l`", "snippet": "sum(tuple(x)for x in l)"}, {"intent": "count the occurrences of item \"b\" in list `l`", "snippet": "sum(a = = b for a in l)"}, {"intent": "copy file `srcfile` to directory `dstdir`", "snippet": "dstdir = os.listdir(`dstdir`)"}, {"intent": "find the key associated with the largest value in dictionary `x` whilst key is non-zero value", "snippet": "max(( k,v)for k,v in x.items())"}, {"intent": "get the largest key whose not associated with value of 0 in dictionary `x`", "snippet": "max(abs(x)for x in list(x.values())if x [0]! = 0)"}, {"intent": "get the largest key in a dictionary `x` with non-zero value", "snippet": "max(tuple(list(x.items())) for x in list(x.values()))"}, {"intent": "Put the curser at beginning of the file", "snippet": "os.write(put)"}, {"intent": "combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`", "snippet": "df.apply(lambda x:x.merge(df [`c`],df [`a`]))"}, {"intent": "remove key 'ele' from dictionary `d`", "snippet": "d.pop(`ele`, None)"}, {"intent": "Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years", "snippet": "datetime.datetime.fromtimestamp(My Model).strftime(`is`)"}, {"intent": "merge list `['it']` and list `['was']` and list `['annoying']` into one list", "snippet": "[list(t)for t in zip([`it`],[`was`],[`[`annoying`]`,`str_3`])]"}, {"intent": "increment a value with leading zeroes in a number `x`", "snippet": "np.sum(1 for i in range(100))"}, {"intent": "check if a pandas dataframe `df`'s index is sorted", "snippet": "df.groupby(level = 0).max()"}, {"intent": "Convert tuple `t` to list", "snippet": "t = list(t)"}, {"intent": "Convert list `t` to tuple", "snippet": "map(list,zip(* t))"}, {"intent": "Convert tuple `level1` to list", "snippet": "level1 = list(level1)"}, {"intent": "send the output of pprint object `dataobject` to file `logFile`", "snippet": "dataobject.write(dataobject)"}, {"intent": "get index of rows in column 'BoolCol'", "snippet": "Bool Col.iloc [Bool Col [`Bool Col`].isin([1,1])]"}, {"intent": "Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True", "snippet": "df.groupby([`Bool Col`,`Bool Col`])[[`Bool Col`,`Bool Col`]].update({`Bool Col`:df [`Bool Col`] })"}, {"intent": "get list of indexes of rows where column 'BoolCol' values match True", "snippet": "Bool Col [Bool Col [`Bool Col`].isin([1,1])]"}, {"intent": "get index of rows in dataframe `df` which column 'BoolCol' matches value True", "snippet": "df.loc [df [`Bool Col`].isin([1,1])]"}, {"intent": "change working directory to the directory `owd`", "snippet": "os.chdir(os.path.dirname(owd))"}, {"intent": "insert data from a string `testfield` to sqlite db `c`", "snippet": "c.insert(0,`testfield`)"}, {"intent": "decode string \"\\\\x89\\\\n\" into a normal string", "snippet": "```\\ \\ xc3 \\ \\ x85 \u3042```.encode(`utf-8`).decode(`n`)"}, {"intent": "convert a raw string `raw_string` into a normal string", "snippet": "pattern = re.compile(`< unk >`)"}, {"intent": "convert a raw string `raw_byte_string` into a normal string", "snippet": "pattern = re.compile(`< unk >`)"}, {"intent": "split a string `s` with into all strings of repeated characters", "snippet": "print(re.findall(`< unk >`, s))"}, {"intent": "scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none", "snippet": "plt.scatter(x,y,color =`np.random.randn(100)`)"}, {"intent": "do a scatter plot with empty circles", "snippet": "plt.scatter(* zip(* plot))"}, {"intent": "remove a div with a id `main-content` using beautifulsoup", "snippet": "div.find_all(`main-content`, class_ =`main-content`)"}, {"intent": "filter rows containing key word `ball` in column `ids`", "snippet": "ids.filter(`< unk >`, str(ball))"}, {"intent": "convert index at level 0 into a column in dataframe `df`", "snippet": "df.set_index(`Date`).unstack(level = 0)"}, {"intent": "Add indexes in a data frame `df` to a column `index1`", "snippet": "df = pd.Data Frame(index = df.index)"}, {"intent": "convert pandas index in a dataframe to columns", "snippet": "df.set_index([`A`,`B`],axis = 1)"}, {"intent": "Get reverse of list items from list 'b' using extended slicing", "snippet": "[i for i,j in enumerate(b)if i ! = 1]"}, {"intent": "join each element in array `a` with element at the same index in array `b` as a tuple", "snippet": "np.vstack(np.meshgrid(a,b))"}, {"intent": "zip two 2-d arrays `a` and `b`", "snippet": "[(a + b)for a,b in zip(a,b)]"}, {"intent": "convert list `list_of_ints` into a comma separated string", "snippet": "```,```.join(str(i)for i in list_of_ints)"}, {"intent": "Send a post request with raw data `DATA` and basic authentication with `username` and `password`", "snippet": "data = requests.post(`DATA`, cookies = password)"}, {"intent": "Find last occurrence of character '}' in string \"abcd}def}\"", "snippet": "re.findall(`< unk >`,`abcd } def }`) [-1].replace(`}`,`}`)"}, {"intent": "Iterate ove list `[1, 2, 3]` using list comprehension", "snippet": "[list(x)for x in zip(* [1,2,3])]"}, {"intent": "extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples", "snippet": "[d [`x`] for d in d if`y`in d]"}, {"intent": "get the filename without the extension from file 'hemanth.txt'", "snippet": "os.listdir(`hemanth.txt`)"}, {"intent": "create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it", "snippet": "dict(( k,v)for k,v in x.items() if v = = 1)"}, {"intent": "create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`", "snippet": "[(a + b)for a,b in zip([[`A`,`B`,`C`],[`D`,`E`,`F`],[`G`,`H`,`I`]], [[`A`,`B`,`C`],[`D`,`E`,`F`],[`G`,`H`,`I`]])]"}, {"intent": "select rows in a dataframe `df` column 'closing_price' between two values 99 and 101", "snippet": "df.loc [(df [`closing_price`] = = 101).startswith(`closing_price`)]"}, {"intent": "replace all occurences of newlines `\\n` with `<br>` in dataframe `df`", "snippet": "df.replace(`\\ n`,`< br >`)"}, {"intent": "replace all occurrences of a string `\\n` by string `<br>` in a pandas data frame `df`", "snippet": "df.replace(`< br >`,``)"}, {"intent": "create a list containing each two adjacent letters in string `word` as its elements", "snippet": "[``.join(x)for x in zip(bin,word [1:])]"}, {"intent": "Get a list of pairs from a string `word` using lambda function", "snippet": "[x [0]for x in word.split(`,`)]"}, {"intent": "extract a url from a string `myString`", "snippet": "urllib.parse.quote(my String.headers())"}, {"intent": "extract a url from a string `myString`", "snippet": "urllib.parse.quote(my String.headers())"}, {"intent": "remove all special characters, punctuation and spaces from a string `mystring` using regex", "snippet": "re.sub(`< unk >`,``,mystring)"}, {"intent": "create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'", "snippet": "calendar.monthrange(13,1)"}, {"intent": "Create multidimensional array `matrix` with 3 rows and 2 columns in python", "snippet": "[[[x [0]] for x in matrix [i]] for i in range(len(matrix))]"}, {"intent": "replace spaces with underscore", "snippet": "``````.join(x.strip() or x.isdigit() for x in re.sub(`[\\ \\ W_]+`,``,para).split(``))"}, {"intent": "get an absolute file path of file 'mydir/myfile.txt'", "snippet": "print(os.path.dirname(os.path.abspath(mydir/myfile.txt)))"}, {"intent": "split string `my_string` on white spaces", "snippet": "my_string.split(``)"}, {"intent": "get filename without extension from file `filename`", "snippet": "os.path.split(os.getcwd())"}, {"intent": "get a list containing the sum of each element `i` in list `l` plus the previous elements", "snippet": "[i for i in l if i in l]"}, {"intent": "split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result", "snippet": "re.split(`/`,`Docs/src/Scripts/temp`)"}, {"intent": "shuffle columns of an numpy array 'r'", "snippet": "np.array([r])"}, {"intent": "copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'", "snippet": "df [`D`] = df [`B`].apply(lambda x:x [`D`] + x [`df`])"}, {"intent": "find a value within nested json 'data' where the key inside another key 'B' is unknown.", "snippet": "[x for x in data if x [`B`] = =`B`]"}, {"intent": "check characters of string `string` are true predication of function `predicate`", "snippet": "string.isdigit()"}, {"intent": "determine number of files on a drive with python", "snippet": "print(`< unk >`.format(os.getcwd()))"}, {"intent": "how to get a single result from a SQLite query in python?", "snippet": "cursor.execute(`all`).execute(`INSERT INTO table VALUES(% s,% s,% s)`,( var1,var2,var3))"}, {"intent": "convert string `user_input` into a list of integers `user_list`", "snippet": "user_list = [int(x)for x in user_input.split()]"}, {"intent": "Get a list of integers by splitting  a string `user` with comma", "snippet": "list(user.split())"}, {"intent": "Sorting a Python list by two criteria", "snippet": "sorted(l,key = lambda x:x [1])"}, {"intent": "sort a list of objects `ut`, based on a function `cmpfun` in descending order", "snippet": "ut.sort(key = operator.attrgetter(`cmpfun`))"}, {"intent": "reverse list `ut` based on the `count` attribute of each object", "snippet": "ut.sort(key = lambda x:x.count)"}, {"intent": "sort a list of objects `ut` in reverse order by their `count` property", "snippet": "sorted(ut,key = operator.attrgetter(`count`))"}, {"intent": "click a href button 'Send' with selenium", "snippet": "browser.find_element_by_class_name(`Send`).click()"}, {"intent": "click a href button having text `Send InMail` with selenium", "snippet": "browser.find_element_by_class_name(`Send In Mail`).click()"}, {"intent": "click a href button with text 'Send InMail' with selenium", "snippet": "browser.find_element_by_class_name(`Send In Mail`).click()"}, {"intent": "cast an int `i` to a string and concat to string 'ME'", "snippet": "print(``.join(str(``.join(str(i)))))"}, {"intent": "Sorting data in DataFrame Pandas", "snippet": "df.sort_values([`x`,`y`],ascending = [True,False])"}, {"intent": "prepend the line '#test firstline\\n' to the contents of file 'infile' and save as the file 'outfile'", "snippet": "os.chmod(`#test firstline \\ n`,`infile`)"}, {"intent": "sort a list `l` by length of value in tuple", "snippet": "sorted(l,key = lambda x:len(l [i]))"}, {"intent": "split string `s` by words that ends with 'd'", "snippet": "re.split(`< unk >`, s)"}, {"intent": "return `True` if string `foobarrrr` contains regex `ba[rzd]`", "snippet": "re.match(`ba [rzd]`,foobarrrr).start()"}, {"intent": "Removing duplicates in list `t`", "snippet": "[list(item)for item in set(len(item)for item in t)]"}, {"intent": "Removing duplicates in list `source_list`", "snippet": "[list(item)for item in set(len(item)for item in source_list)]"}, {"intent": "Removing duplicates in list `abracadabra`", "snippet": "[list(item)for item in set(len(item)for item in abracadabra)]"}, {"intent": "Convert array `a` into a list", "snippet": "list(a)"}, {"intent": "Convert the first row of numpy matrix `a` to a list", "snippet": "a = np.array(a,0)"}, {"intent": "In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`", "snippet": "print(soup.replace(`Address:`,``).replace(`Address:`,``))"}, {"intent": "convert elements of each tuple in list `l` into a string  separated by character `@`", "snippet": "``````.join(``.join(map(str,x)) for x in l)"}, {"intent": "convert each tuple in list `l` to a string with '@' separating the tuples' elements", "snippet": "print(``.join(zip(l,l)))"}, {"intent": "get the html from the current web page of a Selenium driver", "snippet": "driver.find_element_by_xpath(`< unk >`).get_text()"}, {"intent": "Get all matches with regex pattern `\\\\d+[xX]` in list of string `teststr`", "snippet": "re.findall(`\\ \\ d + [x X]`,teststr)"}, {"intent": "select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`", "snippet": "df.loc [df [`B`].isin([1,1])]"}, {"intent": "Sort dictionary `o` in ascending order based on its keys and items", "snippet": "sorted(list(o.items()), key = lambda x:x [1])"}, {"intent": "get sorted list of keys of dict `d`", "snippet": "sorted(d,key = d.get)"}, {"intent": "How to sort dictionaries by keys in Python", "snippet": "sorted(list(data.items()), key = lambda x:x [1])"}, {"intent": "convert string \"1\" into integer", "snippet": "int(`1`, 2)"}, {"intent": "function to convert strings into integers", "snippet": "list(map(int,[strings]))"}, {"intent": "convert items in `T1` to integers", "snippet": "[int(x)for x in list(T1.values())]"}, {"intent": "call a shell script `./test.sh` using subprocess", "snippet": "subprocess.call(`test.sh < unk >`)"}, {"intent": "call a shell script `notepad` using subprocess", "snippet": "subprocess.call([`test.sh`, subprocess.PIPE(notepad)])"}, {"intent": "combine lists `l1` and `l2`  by alternating their elements", "snippet": "print(zip(l1,l2))"}, {"intent": "encode string 'data to be encoded'", "snippet": "```\\ \\ xc3 \\ \\ x85 \u3042```.encode(`utf-8`,`ignore`)"}, {"intent": "encode a string `data to be encoded` to `ascii` encoding", "snippet": "ascii.encode(`data to be encoded`)"}, {"intent": "parse tab-delimited CSV file 'text.txt' into a list", "snippet": "np.genfromtxt(`text.txt`, delimiter =`\\ t`, dtype = None)"}, {"intent": "Get attribute `my_str` of object `my_object`", "snippet": "getattr(my_object,my_str)"}, {"intent": "group a list of dicts `LD` into one dict by key", "snippet": "dict(( k,LD [k]) for k in LD)"}, {"intent": "How do I sum the first value in each tuple in a list of tuples in Python?", "snippet": "map(sum,zip(* tuples))"}, {"intent": "convert unicode string u\"{'code1':1,'code2':1}\" into dictionary", "snippet": "dict(unicodedata.encode(`latin-1`))"}, {"intent": "find all words in a string `mystring` that start with the `$` sign", "snippet": "[i for i in re.findall(`< unk >`, mystring)if i ! =`$`]"}, {"intent": "remove any url within string `text`", "snippet": "re.sub(`< unk >`,``,text)"}, {"intent": "replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros", "snippet": "A = np.where(np.isnan(A), 0,A)"}, {"intent": "calculate mean across dimension in a 2d array `a`", "snippet": "np.array(a._data).mean(axis = 1)"}, {"intent": "running r script '/pathto/MyrScript.r' from python", "snippet": "subprocess.call(`/pathto/Myr Script.r`, shell = True)"}, {"intent": "run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'", "snippet": "subprocess.call([`/usr/bin/Rscript--vanilla/pathto/Myr Script.r`,`/usr/bin/Rscript--vanilla/pathto/Myr Script.r`,`/usr/bin/Rscript--vanilla/pathto/Myr Script.r`])"}, {"intent": "add a header to a csv file", "snippet": "df = pd.read_csv(`my.csv`, header = None)"}, {"intent": "replacing nan in the dataframe `df` with row average", "snippet": "df.groupby([`farm`,`radians`]).mean()"}, {"intent": "Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'", "snippet": "datetime.datetime.strptime(`1347517370`,`% Y-% m-% d % H:% M:% S`).strftime(`% Y-% m-% d % H:% M:% S`)"}, {"intent": "Call a base class's class method `do` from derived class `Derived`", "snippet": "super(do,self).__init__(* args,* * kwargs)"}, {"intent": "selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1", "snippet": "np.where(a = = 0)[0].unique()"}, {"intent": "separate words delimited by one or more spaces into a list", "snippet": "``````.join(itertools.split(`+`, para))"}, {"intent": "length of longest element in list `words`", "snippet": "max(words,key = lambda x:len(words [i]))"}, {"intent": "get the value associated with unicode key 'from_user' of first dictionary in list `result`", "snippet": "print(str(result [`from_user`])[0])"}, {"intent": "Retrieve each line from a file 'File.txt' as a list", "snippet": "print(re.findall(`< unk >`, File.txt))"}, {"intent": "swap keys with values in a dictionary `a`", "snippet": "dict(( k,v)for k,v in a.items() if v)"}, {"intent": "Open a file `path/to/FILE_NAME.ext` in write mode", "snippet": "f = open(`path/to/FILE_NAME.ext`,`wb`)"}, {"intent": "How to count distinct values in a column of a pandas group by object?", "snippet": "df [`count`].str.search(`-pet__age`).nunique()"}, {"intent": "Check if any key in the dictionary `dict1` starts with the string `EMP$$`", "snippet": "any(k in`EMP$$`for k in EMP$$)"}, {"intent": "create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'", "snippet": "[k for k,v in dict1.items() if v = =`EMP$$`]"}, {"intent": "convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`", "snippet": "df = pd.Data Frame(sf,columns = [`email`,`list`])"}, {"intent": "print elements of list `list` seperated by tabs `\\t`", "snippet": "print(``.join(map(str,list)))"}, {"intent": "print unicode string '\\xd0\\xbf\\xd1\\x80\\xd0\\xb8' with utf-8", "snippet": "print(`\u00d0 \u00bf \u00d1 \\ x80 \u00d0 \u00b8`.format(`\u00d0 \u00bf \u00d1 \\ x80 \u00d0 \u00b8`.encode(`UTF8`)))"}, {"intent": "Encode a latin character in string `Sopet\\xc3\\xb3n` properly", "snippet": "re.findall(`\\ \\ w`,`Sopet \u00c3 \u00b3 n`)"}, {"intent": "resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`", "snippet": "img.show()"}, {"intent": "regex, find \"n\"s only in the middle of string `s`", "snippet": "print(re.findall(`i`, s))"}, {"intent": "display the float `1/3*100` as a percentage", "snippet": "struct.unpack(`f`,`{ 0:.2f }`.format(float(`1/3 * 100`)))"}, {"intent": "sort a list of dictionary `mylist` by the key `title`", "snippet": "sorted(mylist,key = lambda x:x [`title`])"}, {"intent": "sort a list `l` of dicts by dict value 'title'", "snippet": "sorted(l,key = lambda x:x.get(`title`) [`title`],reverse = True)"}, {"intent": "sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.", "snippet": "order.sort(key = lambda d:d.get(`title`, d [`title_url`]))"}, {"intent": "find 10 largest differences between each respective elements of list `l1` and list `l2`", "snippet": "[max(x)for x in zip(* l1)]"}, {"intent": "BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp'", "snippet": "soup.soup.find All(`span`, href = re.compile(`span`))"}, {"intent": "write records in dataframe `df` to table 'test' in schema 'a_schema'", "snippet": "df.to_csv(`a_schema`, index = False)"}, {"intent": "Extract brackets from string `s`", "snippet": "re.findall(`#( \\ \\ w +)`,`s`)"}, {"intent": "remove duplicate elements from list 'L'", "snippet": "[k for k,g in itertools.groupby([L])]"}, {"intent": "read a file `file` without newlines", "snippet": "f = open(`file`,`rb`)"}, {"intent": "get the position of item 1 in `testlist`", "snippet": "len(testlist)-len(set(testlist))"}, {"intent": "get the position of item 1 in `testlist`", "snippet": "len(testlist)-len(set(testlist))"}, {"intent": "get the position of item 1 in `testlist`", "snippet": "len(testlist)-len(set(testlist))"}, {"intent": "get the position of item 1 in `testlist`", "snippet": "len(testlist)-len(set(testlist))"}, {"intent": "get the position of item 1 in `testlist`", "snippet": "len(testlist)-len(set(testlist))"}, {"intent": "get the position of item `element` in list `testlist`", "snippet": "len(testlist)-element [::-1]"}, {"intent": "get the position of item `element` in list `testlist`", "snippet": "len(testlist)-element [::-1]"}, {"intent": "find the first element of the tuple with the maximum second element in a list of tuples `lis`", "snippet": "[x [0]for x in lis]"}, {"intent": "get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`", "snippet": "lis [0]-lis [-1]"}, {"intent": "Make a delay of 1 second", "snippet": "sleep.sleep(1)"}, {"intent": "convert list of tuples `L` to a string", "snippet": "``````.join(item for item in L for item in list(item))"}, {"intent": "Django set default value of field `b` equal to '0000000'", "snippet": "b = models.Foreign Key(`0000000`, unique = True)"}, {"intent": "Sort lis `list5` in ascending order based on the degrees value of its elements", "snippet": "sorted(list(list5.items()), key = lambda x:x [1])"}, {"intent": "How do I perform secondary sorting in python?", "snippet": "sorted(list(mydict.items()), key = lambda a:( a [1], c.index(( b,c))))"}, {"intent": "convert a list  into a generator object", "snippet": "list(range(1,3))"}, {"intent": "remove elements from list `oldlist` that have an index number mentioned in list `removelist`", "snippet": "[x for x in removelist if x [1]= = 0]"}, {"intent": "Open a file `yourfile.txt` in write mode", "snippet": "f = open(`yourfile.txt`,`wb`)"}, {"intent": "get attribute 'attr' from object `obj`", "snippet": "getattr(obj,`attr`)"}, {"intent": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple", "snippet": "map(tuple,zip(*((`aa`,),(`bb`,),(`cc`,))))"}, {"intent": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line", "snippet": "((`aa`,),(`bb`,),(`cc`,)) = [(x,y)for x,y in zip(((`aa`,),(`bb`,),(`cc`,)),((`aa`,),(`bb`,),(`cc`,)))]"}, {"intent": "Python Pandas: How to replace a characters in a column of a dataframe?", "snippet": "df [`value`] = df [`a`].fillna(0)"}, {"intent": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`", "snippet": "[(`a`, 1),(`b`, 2),(`c`, 3),(`d`, 4)].sort([`[(`a`, 1),(`b`, 2),(`c`, 3),(`d`, 4)]`,`[(`a`, 1),(`b`, 2),(`c`, 3),(`d`, 4)]`,`a`,`[(`a`, 1),(`b`, 2),(`c`, 3),(`d`, 4)]`])"}, {"intent": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`", "snippet": "[(`a`, 1),(`b`, 2),(`c`, 3),(`d`, 4)].sort([`[(`a`, 1),(`b`, 2),(`c`, 3),(`d`, 4)]`,`[(`a`, 1),(`b`, 2),(`c`, 3),(`d`, 4)]`,`a`,`[(`a`, 1),(`b`, 2),(`c`, 3),(`d`, 4)]`])"}, {"intent": "unzip list `original`", "snippet": "zip(* original)"}, {"intent": "unzip list `original` and return a generator", "snippet": "original.split()"}, {"intent": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`", "snippet": "[(`a`, 1),(`b`, 2),(`c`, 3),(`d`, 4),(`e`,)].sort([`[(`a`, 1),(`b`, 2),(`c`, 3),(`d`, 4),(`e`,)]`,`str_2`,`[(`a`, 1),(`b`, 2),(`c`, 3),(`d`, 4),(`e`,)]`])"}, {"intent": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None", "snippet": "[(`a`, 1),(`b`, 2),(`c`, 3),(`d`, 4),(`e`,)].append((`[(`a`, 1),(`b`, 2),(`c`, 3),(`d`, 4),(`e`,)]`,`[(`a`, 1),(`b`, 2),(`c`, 3),(`d`, 4),(`e`,)]`))"}, {"intent": "encode `Decimal('3.9')` to a JSON string", "snippet": "json.dumps({`Decimal(`3.9`)`.encode(`Decimal(`3.9`)`):v for k,v in json.enumerate(Decimal(`3.9`))})"}, {"intent": "Add key \"mynewkey\" to dictionary `d` with value \"mynewvalue\"", "snippet": "d.update({`mynewkey`:4,`mynewvalue`:5 })"}, {"intent": "Add key 'a' to dictionary `data` with value 1", "snippet": "data [`a`].update({ a })"}, {"intent": "Add key 'a' to dictionary `data` with value 1", "snippet": "data [`a`].update({ a })"}, {"intent": "Add key 'a' to dictionary `data` with value 1", "snippet": "data [`a`].update({ a })"}, {"intent": "find maximal value in matrix `matrix`", "snippet": "numpy.array([matrix]).max()"}, {"intent": "Round number `answer` to 2 precision after the decimal point", "snippet": "print(round(answer,2))"}, {"intent": "extract ip address from an html string", "snippet": "pat = re.compile(`< unk >`)"}, {"intent": "filter dataframe `df` by values in column `A` that appear more than once", "snippet": "df.filter(lambda df:np.arange(A.sum())= = 1)"}, {"intent": "append each line in file `myfile` into a list", "snippet": "myfile.write(open(`file.txt`,`w`).read())"}, {"intent": "Get a list of integers `lst` from a file `filename.txt`", "snippet": "[list(t)for t in open(`filename.txt`).read()]"}, {"intent": "add color bar with image `mappable` to plot `plt`", "snippet": "plt.plot(mappable,bar,color = color)"}, {"intent": "count most frequent 100 words in column 'text' of dataframe `df`", "snippet": "df.groupby(`text`).agg(lambda x:x.groupby(`text`).sum())"}, {"intent": "Python split a string using regex", "snippet": "re.findall(`\\ \\ S +`, str1)"}, {"intent": "generate all 2-element subsets of tuple `(1, 2, 3)`", "snippet": "print(list(itertools.product([(1,2,3)],2)))"}, {"intent": "get a value of datetime.today() in the UTC time zone", "snippet": "time.strftime(`% H:% M:% S`, datetime.utcnow())"}, {"intent": "Get a new list `list2`by removing empty list from a list of lists `list1`", "snippet": "l = [[i for i in list1]for i in list1]"}, {"intent": "Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`", "snippet": "list1 = [[str(i)for i in list1]for i in range(list1)]"}, {"intent": "Django response with JSON `data`", "snippet": "data = json.loads(request.POST.get(`data`,`{ }`))"}, {"intent": "get all text that is not enclosed within square brackets in string `example_str`", "snippet": "re.findall(`\\ \\ [(.* ?)\\ \\]`,example_str)"}, {"intent": "Use a regex to get all text in a string `example_str` that is not surrounded by square brackets", "snippet": "re.findall(`\\ \\ [(.* ?)\\ \\]`,example_str)"}, {"intent": "get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'", "snippet": "print(``.join(re.findall(`\u00ab([\\ \\ s \\ \\ S]* ?)\u00bb`,(zyx)bc)))"}, {"intent": "match regex '\\\\((.*?)\\\\)|(\\\\w)' with string '(zyx)bc'", "snippet": "re.match(`\\ \\((.* ?)\\ \\)|(\\ \\ w)`,`(zyx)bc`)"}, {"intent": "match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`", "snippet": "print(``.join(filter(str.isdigit,`(zyx)bc`)))"}, {"intent": "formate each string cin list `elements` into pattern '%{0}%'", "snippet": "re.findall(`% { 0 } %`, elements)"}, {"intent": "Open a background process 'background-process' with arguments 'arguments'", "snippet": "print(subprocess.Popen([`grep`,`f`, arguments], stdout = background-process))"}, {"intent": "get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'", "snippet": "[k for k,v in list(mydict.items())if v = =`mykeys`]"}, {"intent": "convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary", "snippet": "dict(map(lambda s:s.split(`:`), [(`Name`,`Joe`),(`Age`, 22)]))"}, {"intent": "average each two columns of array `data`", "snippet": "np.dstack(np.meshgrid(data,data), axis = 1).mean()"}, {"intent": "double backslash escape all double quotes in string `s`", "snippet": "re.sub(`(.)`,`\\ \\ 1 \\ \\ 1`, text.read())"}, {"intent": "split a string into a list of words and whitespace", "snippet": "[s.split(`\\ t`) for s in re.findall(`[A-Za-z`] +`, text)]"}, {"intent": "plotting stacked barplots on a panda data frame", "snippet": "pd.concat([df1,df2], axis = 0)"}, {"intent": "reverse the keys and values in a dictionary `myDictionary`", "snippet": "dict(( v,k)for k,v in my Dictionary.items())"}, {"intent": "finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.", "snippet": "[a for a,b in enumerate(how)if`what`in``]"}, {"intent": "check if object `obj` is a string", "snippet": "if isinstance(obj,``):pass"}, {"intent": "check if object `o` is a string", "snippet": "if isinstance(o,``):pass"}, {"intent": "check if object `o` is a string", "snippet": "if isinstance(o,``):pass"}, {"intent": "check if object `o` is a string", "snippet": "if isinstance(o,``):pass"}, {"intent": "check if `obj_to_test` is a string", "snippet": "any(e in obj_to_test for obj_to_test in obj_to_test.split(`,`))"}, {"intent": "append list `list1` to `list2`", "snippet": "[j for i in list1 for j in i]"}, {"intent": "append list `mylog` to `list1`", "snippet": "[j for i in mylog for j in i]"}, {"intent": "append list `a` to `c`", "snippet": "[j for i in a for j in i]"}, {"intent": "append items in list `mylog` to `list1`", "snippet": "list1 = [list1() for list1 in mylog]"}, {"intent": "append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`", "snippet": "[(a + b)for a,b in zip(a,b)]"}, {"intent": "Initialize `SECRET_KEY` in flask config with `Your_secret_string `", "snippet": "SECRET_KEY = models.Foreign Key(`Your_secret_string`, unique = True)"}, {"intent": "unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2'", "snippet": "pd.Data Frame(data,columns = [`out-1`,`out-2`])"}, {"intent": "find the index of an element 'MSFT' in a list `stocks_list`", "snippet": "[i for i,j in enumerate(stocks_list)if i = =`MSFT`]"}, {"intent": "rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable", "snippet": "plt.plot(list(range(0,len(ax)+ 1)),vmin = 0,vmax = 15)"}, {"intent": "remove symbols from a string `s`", "snippet": "s.replace(`and`,``)"}, {"intent": "Get the current directory of a script", "snippet": "print(os.path.dirname(os.path.realpath(__file__)))"}, {"intent": "Find octal characters matches from a string `str` using regex", "snippet": "re.findall(`\\ n \\ \\ s * \\ n`, str)"}, {"intent": "split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\\\b)'", "snippet": "re.split(`[]( ? = [A-Z]+ \\ \\ b)`,input)"}, {"intent": "Split string `input` at every space followed by an upper-case letter", "snippet": "``````.split()"}, {"intent": "send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`", "snippet": "r = requests.get(files,auth =(`url`,`headers`))"}, {"intent": "write bytes `bytes_` to a file `filename` in python 3", "snippet": "filename.write(struct.pack(`< I`, open(bytes_)))"}, {"intent": "get a list from a list `lst` with values mapped into a dictionary `dct`", "snippet": "dict(( k.get(`key`),v)for k,v in list(dct.values()))"}, {"intent": "find duplicate names in column 'name' of the dataframe `x`", "snippet": "x.set_index(`name`).unstack(level = 0)"}, {"intent": "truncate float 1.923328437452 to 3 decimal places", "snippet": "round(1.923328437452,3)"}, {"intent": "sort list `li` in descending order based on the date value in second element of each list in list `li`", "snippet": "li.sort(key = operator.itemgetter(1))"}, {"intent": "place the radial ticks in plot `ax` at 135 degrees", "snippet": "ax.errorbar(x,ax,yerr = err,ecolor =`ax`)"}, {"intent": "check if path `my_path` is an absolute path", "snippet": "os.my_path.abspath(my_path)"}, {"intent": "get number of keys in dictionary `yourdict`", "snippet": "sum(i for i in list(yourdict.keys()))"}, {"intent": "count the number of keys in dictionary `yourdictfile`", "snippet": "sum(len(v)for v in yourdictfile.values())"}, {"intent": "pandas dataframe get first row of each group by 'id'", "snippet": "pd.concat([df.head(1), pd.Data Frame(df [`id`].tolist())])"}, {"intent": "split a list in first column  into multiple columns keeping other columns as well in pandas data frame", "snippet": "pd.concat([df1,df2], axis = 1)"}, {"intent": "extract attributes 'src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"' from string `data`", "snippet": "data.pop(`src =`js/( [^`] * \\ \\ bjquery \\ \\ b [^`] *)``)"}, {"intent": "Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`", "snippet": "sum(sum(x)for x in [``,`3.4`,``,``,`1.0`])"}, {"intent": "Call a subprocess with arguments `c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat` that may contain spaces", "snippet": "subprocess.call(`c:\\ \\ Program Files \\ \\ VMware \\ \\ VMware Server \\ \\ vmware-cmd.bat`, shell = True)"}, {"intent": "reverse a priority queue `q` in python without using classes", "snippet": "super(q,self).__init__(* args,* * kwargs)"}, {"intent": "make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`", "snippet": "df.groupby([`group`,`color`]).order_by(`color`)"}, {"intent": "find all matches of regex pattern '([a-fA-F\\\\d]{32})' in string `data`", "snippet": "re.findall(`([a-f A-F \\ \\ d]{ 32 })`,data)"}, {"intent": "Get the length of list `my_list`", "snippet": "len(my_list)"}, {"intent": "Getting the length of array `l`", "snippet": "len(l)"}, {"intent": "Getting the length of array `s`", "snippet": "len(s)"}, {"intent": "Getting the length of `my_tuple`", "snippet": "len(my_tuple)"}, {"intent": "Getting the length of `my_string`", "snippet": "len(my_string)"}, {"intent": "remove escape character from string \"\\\\a\"", "snippet": "re.sub(`< unk >`,`\\ \\ a`,`\\ \\ a`)"}, {"intent": "replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.", "snippet": "a.replace(`b`,`a`)"}, {"intent": "remove directory tree '/folder_name'", "snippet": "sys.path.remove(`/folder_name`)"}, {"intent": "create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`", "snippet": "data [`weekday`] = data [`my_dt`]/data [`weekday`]"}, {"intent": "reverse sort Counter `x` by values", "snippet": "sorted(iter(x.items()), key = itemgetter(1))"}, {"intent": "reverse sort counter `x` by value", "snippet": "sorted(iter(x.items()), key = itemgetter(1), reverse = True)"}, {"intent": "append a numpy array 'b' to a numpy array 'a'", "snippet": "np.append(a,b)"}, {"intent": "numpy concatenate two arrays `a` and `b` along the first axis", "snippet": "np.concatenate(( a,b), axis = 0)"}, {"intent": "numpy concatenate two arrays `a` and `b` along the second axis", "snippet": "np.concatenate([a,b], axis = 1)"}, {"intent": "numpy concatenate two arrays `a` and `b` along the first axis", "snippet": "np.concatenate(( a,b), axis = 0)"}, {"intent": "numpy concatenate two arrays `a` and `b` along the first axis", "snippet": "np.concatenate(( a,b), axis = 0)"}, {"intent": "fetch address information for host 'google.com' ion port 80", "snippet": "socket.system(`google.com`)"}, {"intent": "add a column 'day' with value 'sat' to dataframe `df`", "snippet": "df [`day`] = df(`sat`)"}, {"intent": "return a 401 unauthorized in django", "snippet": "request.GET.get(`< unk >`,`% d % b % Y`)"}, {"intent": "Flask set folder 'wherever' as the default template folder", "snippet": "app = subprocess.request(`wherever`)"}, {"intent": "How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?", "snippet": "cursor.execute(`INSERT INTO table(`column1`) VALUES(% s)`,( t2,))"}, {"intent": "sort a list of lists 'c2' such that third row comes first", "snippet": "sorted(c2,key = lambda x:int(list(x [0]) [0]))"}, {"intent": "Sorting a list of lists in Python", "snippet": "[sorted(item)for item in lists]"}, {"intent": "Sorting a list of lists in Python", "snippet": "[sorted(item)for item in lists]"}, {"intent": "set font `Arial` to display non-ascii characters in matplotlib", "snippet": "plt.savefig(`Arial`, bbox_inches =`size`)"}, {"intent": "Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal", "snippet": "pd.to_datetime(pd.Time Grouper(hours = 5)) + 1"}, {"intent": "get html source of Selenium WebElement `element`", "snippet": "print(element.page_source)"}, {"intent": "Get the integer location of a key `bob` in a pandas data frame", "snippet": "df [`bob`].apply(lambda x:int(x [0]))"}, {"intent": "open a 'gnome' terminal from python script and run  'sudo apt-get update' command.", "snippet": "os.system(`gnome`)"}, {"intent": "add an item with key 'third_key' and value 1 to an dictionary `my_dict`", "snippet": "my_dict [`third_key`].update({`third_key`:`third_key`})"}, {"intent": "declare an array", "snippet": "i = []"}, {"intent": "Insert item `12` to a list `my_list`", "snippet": "my_list.insert(2,`12`)"}, {"intent": "add an entry 'wuggah' at the beginning of list `myList`", "snippet": "my List = [wuggah]"}, {"intent": "convert a hex-string representation to actual bytes", "snippet": "struct.pack(`< I`, 1633837924).encode(`utf-8`)"}, {"intent": "select the last column of dataframe `df`", "snippet": "df.loc [~ df [`A`].isin(df)]"}, {"intent": "get the first value from dataframe `df` where column 'Letters' is equal to 'C'", "snippet": "df.loc [df [`Letters`] = =`C`]"}, {"intent": "converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix", "snippet": "list(zip([1,2,3], [4,5,6]))"}, {"intent": "get the type of `i`", "snippet": "isinstance(i,i)"}, {"intent": "determine the type of variable `v`", "snippet": "isinstance(v,v)"}, {"intent": "determine the type of variable `v`", "snippet": "isinstance(v,v)"}, {"intent": "determine the type of variable `v`", "snippet": "isinstance(v,v)"}, {"intent": "determine the type of variable `v`", "snippet": "isinstance(v,v)"}, {"intent": "get the type of variable `variable_name`", "snippet": "isinstance(variable_name,int)"}, {"intent": "get the 5th item of a generator", "snippet": "json.load(f)"}, {"intent": "Print a string `word` with string format", "snippet": "print(`< unk >`.format(word))"}, {"intent": "join a list of strings `list` using a space ' '", "snippet": "print(``.join(list))"}, {"intent": "create list `y` containing two empty lists", "snippet": "y = [[]for i in range(3)]"}, {"intent": "read a file 'C:/name/MyDocuments/numbers' into a list `data`", "snippet": "data = [line.rstrip(`\\ n`) for line in open(`C:/name/My Documents/numbers`)]"}, {"intent": "delete all occurrences of character 'i' in string 'it is icy'", "snippet": "```it is icy```.replace(`i`,``)"}, {"intent": "delete all instances of a character 'i' in a string 'it is icy'", "snippet": "re.sub(`< unk >`,``,it is icy)"}, {"intent": "delete all characters \"i\" in string \"it is icy\"", "snippet": "```it is icy```.translate(``.join(c for c in it is icy if c not in c))"}, {"intent": "How to delete all instances of a character in a string in python?", "snippet": "newstr = oldstr.replace(`M`,``)"}, {"intent": "Drop rows of pandas dataframe `df` having NaN in column at index \"1\"", "snippet": "df.loc [(df [`1`] > 42)|(df [`1`] > n)]"}, {"intent": "get elements from list `myList`, that have a field `n` value 30", "snippet": "[item.attribute for item in my List if item [`n`] = = n]"}, {"intent": "converting list of strings `intstringlist` to list of integer `nums`", "snippet": "nums = [int(x)for x in intstringlist]"}, {"intent": "convert list of string numbers into list of integers", "snippet": "[int(x)for x in map(list,zip(* integers))]"}, {"intent": "print \".\" without newline", "snippet": "print(`< unk > % s,< unk >`%(1,2,3))"}, {"intent": "round off the float that is the product of `2.52 * 100` and convert it to an int", "snippet": "float(round(2.52 * 100))"}, {"intent": "Find all files in directory \"/mydir\" with extension \".txt\"", "snippet": "results + = [each for each in os.listdir(`/mydir`) if each.endswith(`.txt`)]"}, {"intent": "Find all files in directory \"/mydir\" with extension \".txt\"", "snippet": "results + = [each for each in os.listdir(`/mydir`) if each.endswith(`.txt`)]"}, {"intent": "Find all files in directory \"/mydir\" with extension \".txt\"", "snippet": "results + = [each for each in os.listdir(`/mydir`) if each.endswith(`.txt`)]"}, {"intent": "plot dataframe `df` without a legend", "snippet": "df.legend(frameon = False)"}, {"intent": "loop through the IP address range \"192.168.x.x\"", "snippet": "print(socket.loads(os.path.normpath(`192.168.x.x`)))"}, {"intent": "loop through the IP address range \"192.168.x.x\"", "snippet": "print(socket.loads(os.path.normpath(`192.168.x.x`)))"}, {"intent": "loop through the IP address range \"192.168.x.x\"", "snippet": "print(socket.loads(os.path.normpath(`192.168.x.x`)))"}, {"intent": "Sum the corresponding decimal values for binary values of each boolean element in list `x`", "snippet": "sum(int(x)for x in x)"}, {"intent": "write multiple strings `line1`, `line2` and `line3` in one line in a file `target`", "snippet": "line2.write(`\\ n`.join(line3 for i,v in zip(line1,target)if c not in line2))"}, {"intent": "Convert list of lists `data` into a flat list", "snippet": "[j for i in data for j in i]"}, {"intent": "Print new line character as `\\n` in a string `foo\\nbar`", "snippet": "print(`\\ n`.format(foo bar))"}, {"intent": "remove last comma character ',' in string `s`", "snippet": "s = s.replace(`,`,``)"}, {"intent": "calculate the mean of each element in array `x` with the element previous to it", "snippet": "np.dot(x [:,(2)],axis = 0).mean()"}, {"intent": "get an array of the mean of each two consecutive values in numpy array `x`", "snippet": "np.mean(np.mean(x [::-1]),axis = 0)"}, {"intent": "load data containing `utf-8` from file `new.txt` into numpy array `arr`", "snippet": "numpy.loadtxt(open(`new.txt`,`rb`),delimiter =`utf-8`, dtype = None)"}, {"intent": "reverse sort list of dicts `l` by value for key `time`", "snippet": "sorted(l,key = lambda x:x [`time`])"}, {"intent": "Sort a list of dictionary `l` based on key `time` in descending order", "snippet": "sorted(l,key = lambda x:list(x.values())[0], reverse = True)"}, {"intent": "get rows of dataframe `df` that match regex '(Hel|Just)'", "snippet": "df.apply(lambda x:x.startswith(`(Hel | Just)`))"}, {"intent": "find the string in `your_string` between two special characters \"[\" and \"]\"", "snippet": "print(``.join(re.findall(`\u00ab([\\ \\ s \\ \\ S]* ?)\u00bb`, your_string)))"}, {"intent": "How to create a list of date string in 'yyyymmdd' format with Python Pandas?", "snippet": "pd.to_datetime(df.index.dt [0], format =`< unk >`)"}, {"intent": "count number of times string 'brown' occurred in string 'The big brown fox is brown'", "snippet": "```The big brown fox is brown```.count(`brown`)"}, {"intent": "decode json string `request.body` to python dict", "snippet": "json.load(json,content_type =`request.body`)"}, {"intent": "download the file from url `url` and save it under file `file_name`", "snippet": "file_name = wget.download(file_name)"}, {"intent": "split string `text` by space", "snippet": "re.split(``, text)"}, {"intent": "split string `text` by \",\"", "snippet": ",.split(`,`)"}, {"intent": "Split string `line` into a list by whitespace", "snippet": "[x.strip() for x in line.split(`,`)]"}, {"intent": "replace dot characters  '.' associated with ascii letters in list `s` with space ' '", "snippet": "``````.replace(`,`,``)"}, {"intent": "sort list `list_of_strings` based on second index of each string `s`", "snippet": "list_of_strings.sort(key = lambda x:s.index(x [0]))"}, {"intent": "call multiple bash function \u2018vasp\u2019 and \u2018tee tee_output\u2019 using \u2018|\u2019", "snippet": "os.system(`tee_output en_US`)"}, {"intent": "eliminate all strings from list `lst`", "snippet": "[k for k,v in [x.split(`=`) for x in lst]]"}, {"intent": "get all the elements except strings from the list 'lst'.", "snippet": "[x for x in lst if x [2]= = 1]"}, {"intent": "Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`", "snippet": "sorted(list_to_be_sorted,key = lambda x:trial_dict [x])"}, {"intent": "sort a list of dictionaries `l` by values in key `name` in descending order", "snippet": "sorted(l,key = lambda i:list(i.values())[0], reverse = True)"}, {"intent": "How do I sort a list of dictionaries by values of the dictionary in Python?", "snippet": "sorted(data,key = lambda x:list(x.values())[0], reverse = True)"}, {"intent": "How do I sort a list of dictionaries by values of the dictionary in Python?", "snippet": "sorted(data,key = lambda x:list(x.values())[0], reverse = True)"}, {"intent": "How to sort a Dataframe by the ocurrences in a column in Python (pandas)", "snippet": "df.sort_values([`A`,`B`],ascending = [True,False])"}, {"intent": "join together with \",\" elements inside a list indexed with 'category' within a dictionary `trans`", "snippet": "dict(( i,list(trans.items())[i]) for i in trans)"}, {"intent": "concatenate array of strings `['A', 'B', 'C', 'D']` into a string", "snippet": "``````.join([`A`,`B`,`C`,`D`])"}, {"intent": "get json data from restful service 'url'", "snippet": "json.loads(`url`)"}, {"intent": "Remove all strings from a list a strings `sents` where the values starts with `@$\\t` or `#`", "snippet": "[x for x in sents if x not in to_del]"}, {"intent": "django filter by hour", "snippet": "datetime.datetime.now()"}, {"intent": "sort a list of dictionary `list` first by key `points` and then by `time`", "snippet": "list.sort(key = lambda x:( x [`points`],x [`time`]))"}, {"intent": "convert datetime object `(1970, 1, 1)` to seconds", "snippet": "datetime.datetime.strptime(`(1970,1,1)`,`% a,% d % b % Y % H:% M:% S % Z`)"}, {"intent": "insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.", "snippet": "suff.append([(x + _a)for x in open(`long.file.name.jpg`,`_a`)])"}, {"intent": "reload a module `module`", "snippet": "module = 1"}, {"intent": "Convert integer `number` into an unassigned integer", "snippet": "int(int(number))"}, {"intent": "convert int values in list `numlist` to float", "snippet": "[float(i)for i in numlist]"}, {"intent": "write dataframe `df`, excluding index, to a csv file", "snippet": "df.to_csv(`file`, index = False)"}, {"intent": "convert a urllib unquoted string `unescaped` to a json data `json_data`", "snippet": "parser.parse(`json_data`)"}, {"intent": "Create a list containing all ascii characters as its elements", "snippet": "[ord(c)for c in range(10)]"}, {"intent": "write `newFileBytes` to a binary file `newFile`", "snippet": "new File.write(`{ 0:0b }`.format(new File))"}, {"intent": "python regex - check for a capital letter with a following lowercase in string `string`", "snippet": "re.sub(`< unk >`,``,string).lower()"}, {"intent": "get the last key of dictionary `dict`", "snippet": "print(dict [-1])"}, {"intent": "write line \"hi there\" to file `f`", "snippet": "f.write(`hi there`)"}, {"intent": "write line \"hi there\" to file `myfile`", "snippet": "myfile.write(`hi there`)"}, {"intent": "write line \"Hello\" to file `somefile.txt`", "snippet": "f.write(`Hello`)"}, {"intent": "convert unicode string `s` to ascii", "snippet": "ord(`c`)"}, {"intent": "Django get maximum value associated with field 'added' in model `AuthorizedEmail`", "snippet": "Authorized Email.objects.order_by(`?`) [`added`]"}, {"intent": "Find all numbers and dots from a string `text` using regex", "snippet": "re.findall(`(( [0-9]+)( [A-Z]))`,`20M10000N80M`)"}, {"intent": "python regex  to find all numbers and dots from 'text'", "snippet": "``````.join(map(str,re.findall(`[A-Za-z`] +`, text)))"}, {"intent": "execute script 'script.ps1' using 'powershell.exe' shell", "snippet": "subprocess.call([`script.ps1`,`powershell.exe`, script.ps1])"}, {"intent": "Sort a list of tuples `b` by third item in the tuple", "snippet": "sorted(b,key = lambda e:e [0])"}, {"intent": "get a list of all keys in Cassandra database `cf` with pycassa", "snippet": "[k for k,v in cf.items() if v = = 1]"}, {"intent": "create a datetime with the current date & time", "snippet": "datetime.datetime.now().strftime(`% Y-% m-% d`)"}, {"intent": "get the index of an integer `1` from a list `lst` if the list also contains boolean items", "snippet": "[i for i in lst if i > 3]"}, {"intent": "subtract 13 from every number in a list `a`", "snippet": "[(x1-x2)for x1,x2 in zip(a,13)]"}, {"intent": "choose a random file from the directory contents of the C drive, `C:\\\\`", "snippet": "random.choice(os.path.expanduser(`C:\\ \\`))"}, {"intent": "get the highest element in absolute value in a numpy matrix `x`", "snippet": "print(max(x,key = x))"}, {"intent": "Get all urls within text `s`", "snippet": "s.tag"}, {"intent": "match urls whose domain doesn't start with `t` from string `document` using regex", "snippet": "re.findall(`find_element_by_xpath |,`,document)"}, {"intent": "split a string `mystring` considering the spaces ' '", "snippet": "[x.strip() for x in mystring.split(``)]"}, {"intent": "open file `path` with mode 'r'", "snippet": "f = open(`r`,`r`)"}, {"intent": "sum elements at the same index in list `data`", "snippet": "map(sum,zip(* data))"}, {"intent": "add a new axis to array `a`", "snippet": "a [(-1),:] = a"}]