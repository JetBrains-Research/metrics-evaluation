[{"intent": "send a signal `signal.SIGUSR1` to the current process", "snippet1": "sys . signal ( ` signal . SIGUSR1 ` )", "snippet2": "os . system ( ` < unk > < unk > < unk > ` )"}, {"intent": "decode a hex string '4a4b4c' to UTF-8.", "snippet1": "print ( 4a4b4c . decode ( ` utf - 8 ` ) . decode ( ` utf - 8 ` ) )", "snippet2": "print ( 4a4b4c . decode ( ` 4a4b4c ` ) )"}, {"intent": "check if all elements in list `myList` are identical", "snippet1": "all ( isinstance ( list , my List ) for x in my List )", "snippet2": "[ i for i in my List if i = = 2 ]"}, {"intent": "format number of spaces between strings `Python`, `:` and `Very Good` to be `20`", "snippet1": "print ( ` \\ n ` . join ( [ str ( int ( x ) ) for x in Python ] ) )", "snippet2": "` ` ` ` ` ` . join ( str ( x ) for x in str ( Python ) )"}, {"intent": "How to convert a string from CP-1251 to UTF-8?", "snippet1": "` ` ` ` ` ` . join ( chr ( int ( i ) ) for i in 10 ) . encode ( ` utf8 ` )", "snippet2": "unicodedata . normalize ( ` NFKD ` , string ) . encode ( ` utf8 ` )"}, {"intent": "get rid of None values in dictionary `kwargs`", "snippet1": "print ( dict ( ( k , v ) for k , v in kwargs . items ( ) if v ) )", "snippet2": "list ( kwargs . values ( ) )"}, {"intent": "get rid of None values in dictionary `kwargs`", "snippet1": "print ( dict ( ( k , v ) for k , v in kwargs . items ( ) if v ) )", "snippet2": "list ( kwargs . values ( ) )"}, {"intent": "capture final output of a chain of system commands `ps -ef | grep something | wc -l`", "snippet1": "sys . stdout . capture ( ` ps - ef | grep something | wc - l ` )", "snippet2": "self . treeview . connect ( ` ps - ef | grep something | wc - l ` , self . ps - ef | grep something | wc - l )"}, {"intent": "concatenate a list of strings `['a', 'b', 'c']`", "snippet1": "list ( ` [ ` a ` , ` b ` , ` c ` ] ` )", "snippet2": "` ` ` ` ` ` . join ( [ ` a ` , ` b ` , ` c ` ] )"}, {"intent": "find intersection data between series `s1` and series `s2`", "snippet1": "pd . concat ( pd . concat ( list ( s1 . items ( ) ) , text = s1 . size ( ) ) / list ( s1 . items ( ) ) , key = lambda x : t [ np . isnan ( s2 ) / 1 ] )", "snippet2": "pd . concat ( [ s1 ] * 5 , ignore_index = True )"}, {"intent": "sending http headers to `client`", "snippet1": "print ( client . decode ( ` ? ` ) [ 0 ] )", "snippet2": "client = requests . get ( client )"}, {"intent": "Format a datetime string `when` to extract date only", "snippet1": "when . decode ( ` \\ \\ ` )", "snippet2": "when . strftime ( ` % m / % d / % Y ` )"}, {"intent": "split a multi-line string `inputString` into separate strings", "snippet1": "` ` ` ` ` ` . join ( c for c in input String if c . isdigit ( ) )", "snippet2": "[ s . split ( ` ` ) for s in input String . split ( ` , ` ) ]"}, {"intent": "Split a multi-line string ` a \\n b \\r\\n c ` by new line character `\\n`", "snippet1": "[ x . split ( ` \\ n ` ) for s in . split ( ` \\ n ` ) ]", "snippet2": "re . split ( ` \\ n ` , ` a \\ n b \\ r \\ n c ` )"}, {"intent": "concatenate elements of list `b` by a colon \":\"", "snippet1": "[ x . strip ( ` : ` ) for x in b ]", "snippet2": "[ ` ` . join ( x ) for x in b ]"}, {"intent": "get the first object from a queryset in django model `Entry`", "snippet1": "Entry . objects . order_by ( ` ? ` ) . size ( )", "snippet2": "Entry . objects . values_list ( ` Entry ` , flat = True )"}, {"intent": "Calculate sum over all rows of 2D numpy array", "snippet1": "np . all ( numpy . data ) . all ( )", "snippet2": "np . array ( [ 1 , 2 , 3 , 4 ] ) . sum ( axis = 0 )"}, {"intent": "enable warnings using action 'always'", "snippet1": "urllib . parse . urlretrieve ( ` always ` )", "snippet2": "warnings . info ( ` always ` )"}, {"intent": "concatenate items of list `l` with a space ' '", "snippet1": "print ( ` ` . join ( [ ` ` . join ( i ) for i in l ] ) )", "snippet2": "list ( map ( tuple , [ ] ) )"}, {"intent": "run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable", "snippet1": "subprocess . call ( [ ` hello . py ` , ` htmlfilename . htm ` ] )", "snippet2": "os . system ( ` hello . py ` )"}, {"intent": "How can I parse a time string containing milliseconds in it with python?", "snippet1": "` ` ` ` ` ` . join ( chr ( ord ( n ) ) for i in time . split ( ` , ` ) ) . encode ( ` utf - 8 ` )", "snippet2": "print ( time . mktime ( datetime . datetime . fromtimestamp ( time ) . timetuple ( ) ) )"}, {"intent": "convert a string `my_string` with dot and comma into a float number `my_float`", "snippet1": "my_float = float ( int ( int ( my_string ) , my_string ) )", "snippet2": "float ( my_string . split ( ` , ` ) [ 0 ] )"}, {"intent": "convert a string `123,456.908` with dot and comma into a floating number", "snippet1": "int ( int ( ` 123 , 456 . 908 ` , 0 ) )", "snippet2": "print ( ` , ` . join ( map ( str , 123 , 456 . 908 ) ) )"}, {"intent": "set pythonpath in python script.", "snippet1": "sys . exit ( )", "snippet2": "os . chdir ( os . path . dirname ( __file__ ) )"}, {"intent": "split string 'Words, words, words.' using a regex '(\\\\W+)'", "snippet1": "re . split ( ` ( \\ \\ W + ) ` , ` Words , words , words . ` )", "snippet2": "re . split ( ` ( \\ \\ W + ) ` , ` Words , words , words . ` )"}, {"intent": "open a file `Output.txt` in append mode", "snippet1": "output = open ( ` Output . txt ` , ` r ` )", "snippet2": "f = open ( ` Output . txt ` , ` r ` )"}, {"intent": "download a file \"http://www.example.com/songs/mp3.mp3\" over HTTP and save to \"mp3.mp3\"", "snippet1": "urllib . request . urlretrieve ( ` http : / / www . example . com / songs / mp3 . mp3 ` , ` mp3 . mp3 ` )", "snippet2": "urllib . request . urlretrieve ( ` http : / / www . example . com / songs / mp3 . mp3 ` , ` mp3 . mp3 ` )"}, {"intent": "download a file `url` over HTTP and save to `file_name`", "snippet1": "file_name = open ( ` url ` , ` file_name ` ) . read ( )", "snippet2": "urllib . request . urlretrieve ( ` < unk > ` , ` file_name ` )"}, {"intent": "download a file 'http://www.example.com/' over HTTP", "snippet1": "logging . download ( ` http : / / www . example . com / ` , dtype = ` False ` )", "snippet2": "testfile = urllib . request . URLopener ( ) testfile . retrieve ( ` http : / / www . example . com / ` , ` ignore ` )"}, {"intent": "download a file `url` over HTTP", "snippet1": "shutil . download ( url )", "snippet2": "file_name = wget . download ( url )"}, {"intent": "download a file `url` over HTTP and save to \"10MB\"", "snippet1": "urllib . request . urlretrieve ( url , ` 10MB ` )", "snippet2": "urllib . request . urlretrieve ( ` 10MB ` , ` ignore ` )"}, {"intent": "argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`", "snippet1": "argparse . set_index ( [ ` - - version ` , ` % ( prog ) s 2 . 0 ` ] )", "snippet2": "parser . add_argument ( ` - - version ` , nargs = ` * ` )"}, {"intent": "remove key 'c' from dictionary `d`", "snippet1": "d . pop ( ` c ` , ` None ` )", "snippet2": "d . pop ( ` c ` , None )"}, {"intent": "Create new DataFrame object by merging columns \"key\" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively", "snippet1": "pd . rename ( split_df , csv_df , inplace = [ ` _left ` , ` csv_df ` ] , how = ` all ` )", "snippet2": "split_df . reset_index ( ) . rename ( columns = { ` split_df ` : ` csv_df ` } )"}, {"intent": "Split a string `s` by space with `4` splits", "snippet1": "[ x . strip ( ` ` ) for item in s . split ( ` , ` ) ]", "snippet2": "re . findall ( ` < unk > ` , ` 4 ` )"}, {"intent": "read keyboard-input", "snippet1": "driver . find_element_by_id ( ` utf - 8 ` ) . write ( ` ` . join ( str ( x ) for i in range ( 12 ) ) )", "snippet2": "ast . literal_eval ( ` keyboard - input ` )"}, {"intent": "enable debug mode on Flask application `app`", "snippet1": "app . enable ( lambda x : x . debug )", "snippet2": "return app . run ( debug = True )"}, {"intent": "python save list `mylist` to file object 'save.txt'", "snippet1": "mylist . savefig ( ` save . txt ` )", "snippet2": "mylist . savefig ( ` save . txt ` )"}, {"intent": "Multiply a matrix `P` with a 3d tensor `T` in scipy", "snippet1": "T . P . map ( lambda x : print ( x . split ( ` . ` ) [ 0 ] ) ) . click ( )", "snippet2": "np . einsum ( ` . . . j , . . . j - > . . . ` , P , T )"}, {"intent": "Create 3d array of zeroes of size `(3,3,3)`", "snippet1": "list ( list ( np . zeroes ( [ ( 3 , 3 , 3 ) ] , 0 ) ) . values ( ) ) . reshape ( 3 , - 1 )", "snippet2": "print ( np . linspace ( 1 , 3 , color = ` ( 3 , 3 , 3 ) ` ) )"}, {"intent": "cut off the last word of a sentence `content`", "snippet1": "content . split ( ` ` ) [ : - 1 ]", "snippet2": "re . sub ( ` < unk > ` , ` \\ \\ 1Bull ` , content )"}, {"intent": "convert scalar `x` to array", "snippet1": "array . dot ( x )", "snippet2": "x = np . loadtxt ( ` x ` , delimiter = ` , ` )"}, {"intent": "sum all elements of nested list `L`", "snippet1": "sum ( sum ( item ) for x in L )", "snippet2": "sum ( L )"}, {"intent": "convert hex string '470FC614' to a float number", "snippet1": "float ( ` 470FC614 ` . decode ( ` hex ` ) )", "snippet2": "float ( int ( ` 470FC614 ` , 16 ) )"}, {"intent": "Multiple each value by `2` for all keys in a dictionary `my_dict`", "snippet1": "print ( dict ( [ ( ` 2 ` , k ) for k , v in my_dict . items ( ) ] ) )", "snippet2": "map ( dict , zip ( * [ [ ( k , v ) for k , v in my_dict . items ( ) ] for v in list ( my_dict . values ( ) ) ] ) )"}, {"intent": "running bash script 'sleep.sh'", "snippet1": "os . system ( ` sleep . sh ` )", "snippet2": "os . system ( ` sleep . sh ` )"}, {"intent": "Join elements of list `l` with a comma `,`", "snippet1": "[ s . strip ( ) for item in l . split ( ` , ` ) ]", "snippet2": "[ x for x in l if x not in [ ` , ` , ` , ` ] ]"}, {"intent": "make a comma-separated string from a list `myList`", "snippet1": "my List = [ x for x in my List for j in x . split ( ` , ` ) ]", "snippet2": "[ ` , ` . join ( map ( str , row ) ) for row in my List ]"}, {"intent": "reverse the list that contains 1 to 10", "snippet1": "sorted ( that , key = lambda i : ( - 10 , ) )", "snippet2": "all ( i in j for i in range ( 10 ) )"}, {"intent": "remove substring 'bag,' from a string 'lamp, bag, mirror'", "snippet1": "` ` ` lamp , bag , mirror ` ` ` . replace ( ` bag , ` , ` ` )", "snippet2": "` ` ` lamp , bag , mirror ` ` ` . replace ( ` bag , ` , ` ` )"}, {"intent": "Reverse the order of words, delimited by `.`, in string `s`", "snippet1": "re . findall ( ` INSERT ` , ` ` . join ( map ( lambda x : x . replace ( ` . ` , ` ` ) . replace ( ` . ` , ` ` ) , ` . ` ) ) ) [ 0 ]", "snippet2": "` ` ` ` ` ` . join ( sorted ( s . split ( ) , key = lambda t : t [ 0 ] , reverse = True ) )"}, {"intent": "convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'", "snippet1": "s . strftime ( ` % Y - % m - % d % H : % M : % S . % f ` )", "snippet2": "time . strftime ( ` % Y - % m - % d % H : % M : % S . % f ` , ` % Y - % m - % d % H : % M : % S . % f ` . format ( s ) )"}, {"intent": "parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'", "snippet1": "datetime . strptime ( ` 1236472051807 ` , ` % Y - % m - % d % H : % M : % S ` )", "snippet2": "time . strftime ( ` % Y - % m - % d % H : % M : % S ` )"}, {"intent": "get the date 7 days before the current date", "snippet1": "datetime . datetime . now ( ) . date ( )", "snippet2": "datetime . datetime . now ( )"}, {"intent": "sum elements at index `column` of each list in list `data`", "snippet1": "map ( sum , data , key = lambda x : data [ column ] )", "snippet2": "sum ( sum ( x ) for x in data )"}, {"intent": "sum columns of a list `array`", "snippet1": "sum ( array , key = lambda x : x [ 1 ] )", "snippet2": "sum ( sum ( x ) for x in array )"}, {"intent": "encode binary string 'your string' to base64 code", "snippet1": "encode ( ` your string ` , 16 )", "snippet2": "hex ( int ( ` your string ` , 2 ) )"}, {"intent": "combine list of dictionaries `dicts` with the same keys in each list to a single dictionary", "snippet1": "dict ( ( k , v ) for k , v in list ( d . items ( ) ) )", "snippet2": "dict ( ( k , ` k ` ) for d in dicts for k , v in list ( d . items ( ) ) )"}, {"intent": "Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`", "snippet1": "dict ( ( k , v ) for k , v in dicts . items ( ) if v ! = ` k ` )", "snippet2": "dict ( ( k , v ) for k , v in dicts . items ( ) if v )"}, {"intent": "How do I get the url parameter in a Flask view", "snippet1": "self . view . url ( view = 0 )", "snippet2": "request . headers . get ( ` / ` )"}, {"intent": "identify duplicate values in list `mylist`", "snippet1": "[ dict ( y ) for c , b in zip ( mylist , mylist [ 1 : ] ) ]", "snippet2": "[ i for i , j in enumerate ( mylist ) if i ]"}, {"intent": "Insert directory 'apps' into directory `__file__`", "snippet1": "os . insert ( ` apps ` , __file__ )", "snippet2": "x_file = open ( os . path . join ( __file__ , ` apps ` ) , ` apps ` )"}, {"intent": "modify sys.path for python module `subdir`", "snippet1": "print ( subdir . communicate ( ) [ 0 ] )", "snippet2": "subdir . path ( )"}, {"intent": "Insert a 'None' value into a SQLite3 table.", "snippet1": "datetime . datetime . strptime ( ` None ` , ` None ` )", "snippet2": "cursor . execute ( ` INSERT INTO table ( ` column1 ` ) VALUES ( % s ) ` , ( None , ) )"}, {"intent": "flatten list `list_of_menuitems`", "snippet1": "[ list_of_menuitems [ i : i + list_of_menuitems ] for i in range ( 0 , len ( list_of_menuitems ) , 2 ) ]", "snippet2": "list_of_menuitems = [ i [ 0 ] for i in list_of_menuitems ]"}, {"intent": "append elements of a set `b` to a list `a`", "snippet1": "[ ( i * b ) for a , b in zip ( b , a ) ]", "snippet2": "a . write ( ` \\ n ` . join ( b ) )"}, {"intent": "Append elements of a set to a list in Python", "snippet1": "[ int ( x ) for x in zip ( * zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) ) ]", "snippet2": "[ [ ] for i in range ( 2 ) ]"}, {"intent": "write the data of dataframe `df` into text file `np.txt`", "snippet1": "df . write ( ` np . txt ` , index = ` False ` )", "snippet2": "df . to_csv ( ` np . txt ` , index = False )"}, {"intent": "write content of DataFrame `df` into text file 'c:\\\\data\\\\pandas.txt'", "snippet1": "df . write ( ` c : \\ \\ data \\ \\ pandas . txt ` , dtype = ` True ` )", "snippet2": "df . to_csv ( ` c : \\ \\ data \\ \\ pandas . txt ` , index = False )"}, {"intent": "Split a string `x` by last occurrence of character `-`", "snippet1": "[ x . split ( ` = ` , 1 ) for x in x . split ( ` , ` ) ]", "snippet2": "` ` ` - ` ` ` . split ( ` - ` )"}, {"intent": "get the last part of a string before the character '-'", "snippet1": "` ` ` - ` ` ` . format ( ` - ` )", "snippet2": "` ` ` ` ` ` . join ( re . findall ( ` < unk > ` , str ) )"}, {"intent": "upload file using FTP", "snippet1": "str ( input ) . click ( )", "snippet2": "requests . get ( ` testfile ` , filename = ` my_file ` )"}, {"intent": "add one to the hidden web element with id 'XYZ' with selenium python script", "snippet1": "sys . exit ( )", "snippet2": "driver . find_element_by_id ( ` XYZ ` ) . click ( )"}, {"intent": "create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`", "snippet1": "np . array ( zip ( [ 2 , 3 , 4 ] , [ 1 , 5 , 2 ] ) , key = lambda x : x [ 1 ] )", "snippet2": "max ( max ( x ) for x in zip ( * [ 2 , 3 , 4 ] ) )"}, {"intent": "print a list `l` and move first 3 elements to the end of the list", "snippet1": "print ( set ( [ x for x in l if x > 3 ] ) )", "snippet2": "print ( ` < unk > % s , < unk > ` % ( 1 , 2 , 3 ) )"}, {"intent": "loop over files in directory '.'", "snippet1": "for dirname , dirnames , filenames in os . walk ( ` . ` ) : pass", "snippet2": "for dirname , dirnames , filenames in os . walk ( ` . ` ) : for subdirname in dirnames : print ( os . path . join ( dirname , subdirname ) ) for filename in filenames : pass"}, {"intent": "loop over files in directory `source`", "snippet1": "for re , dirname , source in os . walk ( source ) : pass", "snippet2": "for dirname , dirnames , filenames in os . walk ( ` source ` ) : for subdirname in dirnames : print ( os . path . join ( dirname , subdirname ) ) for filename in filenames : pass"}, {"intent": "create a random list of integers", "snippet1": "[ dict ( random . choice ( i ) for i in range ( 0 , random . random ( 1 , 4 ) ) ) for _ in range ( 12 ) ]", "snippet2": "[ random . randint ( 0 , 9 ) for _ in range ( 10 ) ]"}, {"intent": "Using %f with strftime() in Python to get microseconds", "snippet1": "datetime . datetime . combine ( lambda x : x . fillna ( x [ 1 ] . upper ( ) ) )", "snippet2": "datetime . datetime . strptime ( ` < unk > ` , ` % . 2f ` )"}, {"intent": "Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`", "snippet1": "engine . execute ( ` SELECT * FROM Schedule WHERE station = $ 1 ` , ` foo . key ( ) ` )", "snippet2": "db . session . query ( id = SELECT * FROM Schedule WHERE station = $ 1 ) . filter ( actions__contains = [ foo . key ( ) ] )"}, {"intent": "filter rows in pandas starting with alphabet 'f' using regular expression.", "snippet1": "re [ ` f ` ]", "snippet2": "df . filter ( lambda x : x . upper ( ) = = ` f ` )"}, {"intent": "print a 2 dimensional list `tab` as a table with delimiters", "snippet1": "print ( ` \\ n ` . join ( str ( x ) for i in tab ) )", "snippet2": "print ( [ x . map ( ` ` , x ) for x in tab ] )"}, {"intent": "pandas: delete rows in dataframe `df` based on multiple columns values", "snippet1": "pd . Data Frame ( df . columns [ [ values ] ] , axis = 1 )", "snippet2": "pd . concat ( [ df , pd . Data Frame ( df ) ] , axis = 1 )"}, {"intent": "format the variables `self.goals` and `self.penalties` using string formatting", "snippet1": "` ` ` driver ` ` ` . format ( self . goals )", "snippet2": "` ` ` str_2 ` ` ` . format ( ` self . goals ` , ` self . penalties ` )"}, {"intent": "format string \"({} goals, ${})\" with variables `goals` and `penalties`", "snippet1": "print ( ( ` ( { } goals , $ { } ) ` , goals , ` penalties ` , penalties ) )", "snippet2": "` ` ` ( { } goals , $ { } ) ` ` ` . format ( goals , penalties )"}, {"intent": "format string \"({0.goals} goals, ${0.penalties})\"", "snippet1": "` ` ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` ` ` . format ( ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` )", "snippet2": "` ` ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` ` ` . format ( ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` , ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` )"}, {"intent": "convert list of lists `L` to list of integers", "snippet1": "[ int ( i ) for i in zip ( * L ) ]", "snippet2": "[ int ( i ) for i in L ]"}, {"intent": "combine elements of each list in list `L` into digits of a single integer", "snippet1": "[ int ( x ) for x in L ]", "snippet2": "map ( int , [ 1 , 2 , 3 ] )"}, {"intent": "convert a list of lists `L` to list of integers", "snippet1": "[ int ( i ) for i in zip ( * L ) ]", "snippet2": "[ map ( int , sublist ) for sublist in L ]"}, {"intent": "write the elements of list `lines` concatenated by special character '\\n' to file `myfile`", "snippet1": "` ` ` ` ` ` . join ( lines )", "snippet2": "print ( ` \\ n ` . join ( [ re . sub ( ` < unk > ` , ` ` , lines ) for lines in lines ] ) )"}, {"intent": "removing an element from a list based on a predicate 'X' or 'N'", "snippet1": "dict ( ( k , str ( v ) ) for k , v in d . items ( ) )", "snippet2": "[ type ( x ) for x in zip ( * my_list ) ]"}, {"intent": "Remove duplicate words from a string `text` using regex", "snippet1": "` ` ` ` ` ` . join ( re . split ( text ) )", "snippet2": "text = text . decode ( ` utf - 8 ` ) . split ( )"}, {"intent": "count non zero values in each column in pandas data frame", "snippet1": "pd . Data Frame ( pd . Data Frame ( df . values . sum ( ) ) , axis = 1 ) . click ( )", "snippet2": "df . groupby ( ` index ` ) . head ( 1 )"}, {"intent": "search for string that matches regular expression pattern '(?<!Distillr)\\\\\\\\AcroTray\\\\.exe' in string 'C:\\\\SomeDir\\\\AcroTray.exe'", "snippet1": "re . compile ( ` ( ? < ! Distillr ) \\ \\ \\ \\ Acro Tray \\ \\ . exe ` , ` C : \\ \\ Some Dir \\ \\ Acro Tray . exe ` )", "snippet2": "re . findall ( ` ( ? < ! Distillr ) \\ \\ \\ \\ Acro Tray \\ \\ . exe ` , ` C : \\ \\ Some Dir \\ \\ Acro Tray . exe ` )"}, {"intent": "split string 'QH QD JC KD JS' into a list on white spaces", "snippet1": "QH QD JC KD JS . list ( on = ` QH QD JC KD JS ` )", "snippet2": "re . match ( ` < unk > ` , ` QH QD JC KD JS ` ) . split ( ` ` )"}, {"intent": "search for occurrences of regex pattern '>.*<' in xml string `line`", "snippet1": "print ( re . sub ( ` > . * < ` , ` \\ \\ 1 ` , line ) . group ( 1 ) )", "snippet2": "re . match ( ` > . * < ` , line ) . group ( 1 )"}, {"intent": "erase all the contents of a file `filename`", "snippet1": "open ( ` filename ` , ` w ` ) . close ( )", "snippet2": "open ( ` filename ` , ` w ` ) . close ( )"}, {"intent": "convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'", "snippet1": "datetime . datetime . strptime ( ` % Y - % m - % d % H : % M : % S . % f ` , ` ` ) . strftime ( ` % Y - % m - % d % H : % M : % S . % f ` )", "snippet2": "datetime . strptime ( ` % Y - % m - % d % H : % M : % S . % f ` , ` % Y - % m - % d % H : % M : % S . % f ` )"}, {"intent": "find the index of a list with the first element equal to '332' within the list of lists `thelist`", "snippet1": "[ x [ 0 ] for x in thelist ]", "snippet2": "[ x for x in thelist if x [ 0 ] = = 1 ]"}, {"intent": "lower a string `text` and remove non-alphanumeric characters aside from space", "snippet1": "` ` ` ` ` ` . join ( c for c in text if c . lower ( ) )", "snippet2": "re . sub ( ` [ ^ 0 - 9a - z A - Z ] + ` , ` ` , text )"}, {"intent": "remove all non-alphanumeric characters except space from a string `text` and lower it", "snippet1": "text . strip ( )", "snippet2": "re . sub ( ` [ ^ 0 - 9a - z A - Z ] + ` , ` ` , text )"}, {"intent": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.", "snippet1": "plt . execute ( ` x ` , 0 , { ` 2 ` : ` 2 ` } )", "snippet2": "plt . savefig ( ` H20 ` , dpi = 300 )"}, {"intent": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.", "snippet1": "plt . execute ( ` x ` , 0 , { ` 2 ` : ` 2 ` } )", "snippet2": "plt . savefig ( ` H20 ` , dpi = 300 )"}, {"intent": "loop over a list `mylist` if sublists length equals 3", "snippet1": "mylist = [ ( i , j ) for i in zip ( f , mylist ) ]", "snippet2": "[ item for item in mylist if len ( item ) = = 1 ]"}, {"intent": "initialize a list `lst` of 100 objects Object()", "snippet1": "lst = [ [ ] for i in range ( len ( lst ) ) ]", "snippet2": "lst = [ ( p + 0 ) for i in range ( 100 ) ]"}, {"intent": "create list `lst` containing 100 instances of object `Object`", "snippet1": "lst = [ item for item in Object if Object ! = ` lst ` ]", "snippet2": "lst = [ Object for Object in lst ]"}, {"intent": "get the content of child tag with`href` attribute whose parent has css `someclass`", "snippet1": "print ( subprocess . Popen ( someclass , someclass ) )", "snippet2": "print ( content . get_attribute ( ` div ` ) )"}, {"intent": "joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes", "snippet1": "pd . merge ( df1 , df2 , args = [ ` Date_Time ` , ` Date_Time ` ] , how = ` d ` )", "snippet2": "pd . merge ( df1 , df2 , how = ` inner ` , on = [ ` Date_Time ` ] )"}, {"intent": "use `%s` operator to print variable values `str1` inside a string", "snippet1": "` ` ` % s ` ` ` . apply ( lambda x : x * y )", "snippet2": "print ( ` < unk > % s , < unk > ` % ( str1 , str1 ) )"}, {"intent": "Split a string by a delimiter in python", "snippet1": "[ x . split ( ` ` ) for x in s . split ( ` , ` ) ]", "snippet2": "` ` ` ` ` ` . join ( re . findall ( ` < unk > ` , s ) )"}, {"intent": "check if directory `directory ` exists and create it if necessary", "snippet1": "os . path . isfile ( ` directory ` )", "snippet2": "print ( os . path . exists ( ` directory ` ) )"}, {"intent": "check if a directory `path` exists and create it if necessary", "snippet1": "os . path . isfile ( path )", "snippet2": "os . walk ( path )"}, {"intent": "check if a directory `path` exists and create it if necessary", "snippet1": "os . path . isfile ( path )", "snippet2": "os . walk ( path )"}, {"intent": "check if a directory `path` exists and create it if necessary", "snippet1": "os . path . isfile ( path )", "snippet2": "os . walk ( path )"}, {"intent": "Replace a separate word 'H3' by 'H1' in a string 'text'", "snippet1": "re . findall ( ` H3 ` , ` text ` )", "snippet2": "` ` ` ` ` ` . join ( map ( ` ` . join , map ( str . replace , ` H3 ` , ` H1 ` ) ) )"}, {"intent": "substitute ASCII letters in string 'aas30dsa20' with empty string ''", "snippet1": "re . search ( ` aas30dsa20 ` , ` ` )", "snippet2": "` ` ` ` ` ` . join ( map ( chr , int ( ` ` ) ) )"}, {"intent": "get digits only from a string `aas30dsa20` using lambda function", "snippet1": "print ( ` ` . join ( map ( str , aas30dsa20 ) ) )", "snippet2": "list ( re . findall ( ` \\ \\ d + ` , aas30dsa20 ) )"}, {"intent": "access a tag called \"name\" in beautifulsoup `soup`", "snippet1": "urllib . request . strptime ( soup , ` name ` ) . read ( ) [ 0 ]", "snippet2": "soup . find ( ` div ` , href = re . compile ( ` name ` ) ) [ ` name ` ]"}, {"intent": "get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`", "snippet1": "dict ( ( k , v ) for k , v in records . items ( ) if v ! = ` cursor ` )", "snippet2": "dict ( ( k , v ) for k , v in cursor . items ( ) if v )"}, {"intent": "Create new matrix object  by concatenating data from matrix A and matrix B", "snippet1": "plt . array ( list ( range ( 0 , 0 ) , axis = 1 ) , axis = 0 ) . T", "snippet2": "numpy . matrix ( [ a ] ) . ravel ( )"}, {"intent": "concat two matrices `A` and `B` in numpy", "snippet1": "( numpy . array ( [ A , B ] ) [ 0 ] + B ) . replace ( ` A ` , ` ` )", "snippet2": "np . importlib ( A < B , axis = 0 ) . B ( )"}, {"intent": "Get the characters count in a file `filepath`", "snippet1": "sum ( 1 for line in open ( filepath ) )", "snippet2": "sum ( 1 for line in open ( ` filepath ` ) )"}, {"intent": "count the occurrences of item \"a\" in list `l`", "snippet1": "sum ( x [ ` a ` ] for item in l )", "snippet2": "sum ( a = = a for a in l )"}, {"intent": "count the occurrences of items in list `l`", "snippet1": "sum ( not i for i in l )", "snippet2": "sum ( tuple ( x ) for x in l )"}, {"intent": "count the occurrences of items in list `l`", "snippet1": "sum ( not i for i in l )", "snippet2": "sum ( tuple ( x ) for x in l )"}, {"intent": "count the occurrences of items in list `l`", "snippet1": "sum ( not i for i in l )", "snippet2": "sum ( tuple ( x ) for x in l )"}, {"intent": "count the occurrences of item \"b\" in list `l`", "snippet1": "sum ( x [ ` b ` ] for item in l )", "snippet2": "sum ( a = = b for a in l )"}, {"intent": "copy file `srcfile` to directory `dstdir`", "snippet1": "f = open ( open ( srcfile , ` dstdir ` ) )", "snippet2": "dstdir = os . listdir ( ` dstdir ` )"}, {"intent": "find the key associated with the largest value in dictionary `x` whilst key is non-zero value", "snippet1": "max ( ( item [ 0 ] for item in list ( x . values ( ) ) ) , key = lambda x : x [ 1 ] )", "snippet2": "max ( ( k , v ) for k , v in x . items ( ) )"}, {"intent": "get the largest key whose not associated with value of 0 in dictionary `x`", "snippet1": "max ( list ( x . items ( ) ) , key = lambda x : x [ 0 ] )", "snippet2": "max ( abs ( x ) for x in list ( x . values ( ) ) if x [ 0 ] ! = 0 )"}, {"intent": "get the largest key in a dictionary `x` with non-zero value", "snippet1": "max ( list ( x . items ( ) ) , key = lambda x : x [ 1 ] ) [ 0 ]", "snippet2": "max ( tuple ( list ( x . items ( ) ) ) for x in list ( x . values ( ) ) )"}, {"intent": "Put the curser at beginning of the file", "snippet1": "struct . put ( locale , buf_size , beginning , beginning )", "snippet2": "os . write ( put )"}, {"intent": "combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`", "snippet1": "df . apply ( lambda b : x . values ( ) , axis = 1 )", "snippet2": "df . apply ( lambda x : x . merge ( df [ ` c ` ] , df [ ` a ` ] ) )"}, {"intent": "remove key 'ele' from dictionary `d`", "snippet1": "d . pop ( ` ele ` , ` None ` )", "snippet2": "d . pop ( ` ele ` , None )"}, {"intent": "Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years", "snippet1": "", "snippet2": "datetime . datetime . fromtimestamp ( My Model ) . strftime ( ` is ` )"}, {"intent": "merge list `['it']` and list `['was']` and list `['annoying']` into one list", "snippet1": "[ [ ` was ` ] , [ ` was ` ] ]", "snippet2": "[ list ( t ) for t in zip ( [ ` it ` ] , [ ` was ` ] , [ ` [ ` annoying ` ] ` , ` str_3 ` ] ) ]"}, {"intent": "increment a value with leading zeroes in a number `x`", "snippet1": "x ( 1 for i in range ( len ( x ) ) )", "snippet2": "np . sum ( 1 for i in range ( 100 ) )"}, {"intent": "check if a pandas dataframe `df`'s index is sorted", "snippet1": "df . index . sorted ( ) = = df . index ( df . index ( df ) )", "snippet2": "df . groupby ( level = 0 ) . max ( )"}, {"intent": "Convert tuple `t` to list", "snippet1": "[ tuple ( i ) for i in t . split ( ) ]", "snippet2": "t = list ( t )"}, {"intent": "Convert list `t` to tuple", "snippet1": "[ tuple ( i ) for i in t ]", "snippet2": "map ( list , zip ( * t ) )"}, {"intent": "Convert tuple `level1` to list", "snippet1": "[ tuple ( i ) for i in level1 . split ( ) ]", "snippet2": "level1 = list ( level1 )"}, {"intent": "send the output of pprint object `dataobject` to file `logFile`", "snippet1": "log File = dataobject . send ( log File , dataobject = dataobject )", "snippet2": "dataobject . write ( dataobject )"}, {"intent": "get index of rows in column 'BoolCol'", "snippet1": "index . loc [ ` Bool Col ` ]", "snippet2": "Bool Col . iloc [ Bool Col [ ` Bool Col ` ] . isin ( [ 1 , 1 ] ) ]"}, {"intent": "Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True", "snippet1": "df . groupby ( df . apply ( lambda Bool Col : abs ( df [ i ] ) ) )", "snippet2": "df . groupby ( [ ` Bool Col ` , ` Bool Col ` ] ) [ [ ` Bool Col ` , ` Bool Col ` ] ] . update ( { ` Bool Col ` : df [ ` Bool Col ` ] } )"}, {"intent": "get list of indexes of rows where column 'BoolCol' values match True", "snippet1": "print ( enumerate ( Bool Col , key = lambda x : x [ ` Bool Col ` ] ) )", "snippet2": "Bool Col [ Bool Col [ ` Bool Col ` ] . isin ( [ 1 , 1 ] ) ]"}, {"intent": "get index of rows in dataframe `df` which column 'BoolCol' matches value True", "snippet1": "df [ ` Bool Col ` ] . apply ( lambda value : x [ ` Bool Col ` ] )", "snippet2": "df . loc [ df [ ` Bool Col ` ] . isin ( [ 1 , 1 ] ) ]"}, {"intent": "change working directory to the directory `owd`", "snippet1": "os . chdir ( owd )", "snippet2": "os . chdir ( os . path . dirname ( owd ) )"}, {"intent": "insert data from a string `testfield` to sqlite db `c`", "snippet1": "testfield . insert ( 0 , ` c ` )", "snippet2": "c . insert ( 0 , ` testfield ` )"}, {"intent": "decode string \"\\\\x89\\\\n\" into a normal string", "snippet1": "` ` ` \\ \\ x89 \\ \\ n ` ` ` . decode ( ` utf - 8 ` )", "snippet2": "` ` ` \\ \\ xc3 \\ \\ x85 \u3042 ` ` ` . encode ( ` utf - 8 ` ) . decode ( ` n ` )"}, {"intent": "convert a raw string `raw_string` into a normal string", "snippet1": "output = ` ` . join ( c for c in raw_string if c . isdigit ( ) )", "snippet2": "pattern = re . compile ( ` < unk > ` )"}, {"intent": "convert a raw string `raw_byte_string` into a normal string", "snippet1": "output = ` ` . join ( c for c in raw_byte_string if c . isdigit ( ) )", "snippet2": "pattern = re . compile ( ` < unk > ` )"}, {"intent": "split a string `s` with into all strings of repeated characters", "snippet1": "` ` ` ` ` ` . join ( c for c in s if c . c ( ) )", "snippet2": "print ( re . findall ( ` < unk > ` , s ) )"}, {"intent": "scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none", "snippet1": "datetime . strptime ( np . random . randn ( 100 ) ) . plot ( { ` a ` : 2 , ` s ` : 3 } )", "snippet2": "plt . scatter ( x , y , color = ` np . random . randn ( 100 ) ` )"}, {"intent": "do a scatter plot with empty circles", "snippet1": "circles . scatter ( )", "snippet2": "plt . scatter ( * zip ( * plot ) )"}, {"intent": "remove a div with a id `main-content` using beautifulsoup", "snippet1": "beautifulsoup = pd . Series ( div = json . compile ( ` main - content ` ) )", "snippet2": "div . find_all ( ` main - content ` , class_ = ` main - content ` )"}, {"intent": "filter rows containing key word `ball` in column `ids`", "snippet1": "ids [ ( ball [ ball ] = = ` ids ` ) + ( ball ! = ids ) ]", "snippet2": "ids . filter ( ` < unk > ` , str ( ball ) )"}, {"intent": "convert index at level 0 into a column in dataframe `df`", "snippet1": "df [ var_3 ] = df [ 0 ] . fillna ( 0 )", "snippet2": "df . set_index ( ` Date ` ) . unstack ( level = 0 )"}, {"intent": "Add indexes in a data frame `df` to a column `index1`", "snippet1": "del df [ index1 ]", "snippet2": "df = pd . Data Frame ( index = df . index )"}, {"intent": "convert pandas index in a dataframe to columns", "snippet1": "df . apply ( lambda x : x . fillna ( x . mean ( ) ) , axis = 0 )", "snippet2": "df . set_index ( [ ` A ` , ` B ` ] , axis = 1 )"}, {"intent": "Get reverse of list items from list 'b' using extended slicing", "snippet1": "[ i for i in range ( len ( b ) ) for y in pair ]", "snippet2": "[ i for i , j in enumerate ( b ) if i ! = 1 ]"}, {"intent": "join each element in array `a` with element at the same index in array `b` as a tuple", "snippet1": "np . array ( [ ( i , j ) for k , v in enumerate ( a , b [ 1 ] ) ] )", "snippet2": "np . vstack ( np . meshgrid ( a , b ) )"}, {"intent": "zip two 2-d arrays `a` and `b`", "snippet1": "a . zip ( a )", "snippet2": "[ ( a + b ) for a , b in zip ( a , b ) ]"}, {"intent": "convert list `list_of_ints` into a comma separated string", "snippet1": "print ( ` ` . join ( chr ( i ) for i in list_of_ints ) )", "snippet2": "` ` ` , ` ` ` . join ( str ( i ) for i in list_of_ints )"}, {"intent": "Send a post request with raw data `DATA` and basic authentication with `username` and `password`", "snippet1": "request = DATA = requests . post ( DATA , password = password )", "snippet2": "data = requests . post ( ` DATA ` , cookies = password )"}, {"intent": "Find last occurrence of character '}' in string \"abcd}def}\"", "snippet1": "` ` ` abcd } def } ` ` ` . format ( ` } ` , 1 )", "snippet2": "re . findall ( ` < unk > ` , ` abcd } def } ` ) [ - 1 ] . replace ( ` } ` , ` } ` )"}, {"intent": "Iterate ove list `[1, 2, 3]` using list comprehension", "snippet1": "print ( list ( itertools . product ( [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] ) ) )", "snippet2": "[ list ( x ) for x in zip ( * [ 1 , 2 , 3 ] ) ]"}, {"intent": "extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples", "snippet1": "[ ( k , v ) for k , v in zip ( x , d [ : : - 1 ] ) ]", "snippet2": "[ d [ ` x ` ] for d in d if ` y ` in d ]"}, {"intent": "get the filename without the extension from file 'hemanth.txt'", "snippet1": "f = os . path . dirname ( os . path . realpath ( hemanth . txt ) )", "snippet2": "os . listdir ( ` hemanth . txt ` )"}, {"intent": "create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it", "snippet1": "dict ( zip ( x [ : : 2 ] , x [ 1 : : 2 ] ) )", "snippet2": "dict ( ( k , v ) for k , v in x . items ( ) if v = = 1 )"}, {"intent": "create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`", "snippet1": "[ [ ] for i in list ( len ( [ [ ` A ` , ` B ` , ` C ` ] , [ ` D ` , ` E ` , ` F ` ] , [ ` G ` , ` H ` , ` I ` ] ] ) ) ]", "snippet2": "[ ( a + b ) for a , b in zip ( [ [ ` A ` , ` B ` , ` C ` ] , [ ` D ` , ` E ` , ` F ` ] , [ ` G ` , ` H ` , ` I ` ] ] , [ [ ` A ` , ` B ` , ` C ` ] , [ ` D ` , ` E ` , ` F ` ] , [ ` G ` , ` H ` , ` I ` ] ] ) ]"}, {"intent": "select rows in a dataframe `df` column 'closing_price' between two values 99 and 101", "snippet1": "df . loc [ df . columns [ ` closing_price ` ] , ]", "snippet2": "df . loc [ ( df [ ` closing_price ` ] = = 101 ) . startswith ( ` closing_price ` ) ]"}, {"intent": "replace all occurences of newlines `\\n` with `<br>` in dataframe `df`", "snippet1": "df . replace ( ` \\ n ` , ` < br > ` )", "snippet2": "df . replace ( ` \\ n ` , ` < br > ` )"}, {"intent": "replace all occurrences of a string `\\n` by string `<br>` in a pandas data frame `df`", "snippet1": "pd . to_datetime ( [ ` \\ n ` , ` < br > ` ] , axis = 1 )", "snippet2": "df . replace ( ` < br > ` , ` ` )"}, {"intent": "create a list containing each two adjacent letters in string `word` as its elements", "snippet1": "list ( word . rsplit ( ` ` . join ( ` ` . join ( [ ` ` . join ( k ) for k , v in word . items ( ) ] ) ) ) )", "snippet2": "[ ` ` . join ( x ) for x in zip ( bin , word [ 1 : ] ) ]"}, {"intent": "Get a list of pairs from a string `word` using lambda function", "snippet1": "max ( word , key = lambda x : x [ 1 ] )", "snippet2": "[ x [ 0 ] for x in word . split ( ` , ` ) ]"}, {"intent": "extract a url from a string `myString`", "snippet1": "[ m . split ( ) for item in my String . split ( ) ]", "snippet2": "urllib . parse . quote ( my String . headers ( ) )"}, {"intent": "extract a url from a string `myString`", "snippet1": "[ m . split ( ) for item in my String . split ( ) ]", "snippet2": "urllib . parse . quote ( my String . headers ( ) )"}, {"intent": "remove all special characters, punctuation and spaces from a string `mystring` using regex", "snippet1": "pattern = re . sub ( ` ` , ` ` , mystring , re . UNICODE )", "snippet2": "re . sub ( ` < unk > ` , ` ` , mystring )"}, {"intent": "create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'", "snippet1": "soup . execute ( ` a ` , ` 2016 - 01 - 01 ` )", "snippet2": "calendar . monthrange ( 13 , 1 )"}, {"intent": "Create multidimensional array `matrix` with 3 rows and 2 columns in python", "snippet1": "matrix = np . array ( [ ( i , j ) for i , j in enumerate ( matrix , 3 ) ] )", "snippet2": "[ [ [ x [ 0 ] ] for x in matrix [ i ] ] for i in range ( len ( matrix ) ) ]"}, {"intent": "replace spaces with underscore", "snippet1": "` ` ` ` ` ` . join ( compile ( c . split ( ` , ` ) ) )", "snippet2": "` ` ` ` ` ` . join ( x . strip ( ) or x . isdigit ( ) for x in re . sub ( ` [ \\ \\ W_ ] + ` , ` ` , para ) . split ( ` ` ) )"}, {"intent": "get an absolute file path of file 'mydir/myfile.txt'", "snippet1": "os . path . join ( os . path . abspath ( __file__ ) , ` mydir / myfile . txt ` )", "snippet2": "print ( os . path . dirname ( os . path . abspath ( mydir / myfile . txt ) ) )"}, {"intent": "split string `my_string` on white spaces", "snippet1": "my_string . split ( ` ` )", "snippet2": "my_string . split ( ` ` )"}, {"intent": "get filename without extension from file `filename`", "snippet1": "return os . path . realpath ( filename )", "snippet2": "os . path . split ( os . getcwd ( ) )"}, {"intent": "get a list containing the sum of each element `i` in list `l` plus the previous elements", "snippet1": "[ ( y * b ) for a , b in zip ( i , l ) ]", "snippet2": "[ i for i in l if i in l ]"}, {"intent": "split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result", "snippet1": "` ` ` Docs / src / Scripts / temp ` ` ` . replace ( ` / ` , ` ` ) . replace ( ` / ` , ` ` ) . split ( ` / ` )", "snippet2": "re . split ( ` / ` , ` Docs / src / Scripts / temp ` )"}, {"intent": "shuffle columns of an numpy array 'r'", "snippet1": "np . shuffle ( np . in1d ( r ) ) [ 0 ]", "snippet2": "np . array ( [ r ] )"}, {"intent": "copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'", "snippet1": "pd . Data Frame ( [ ` B ` , ` D ` ] , axis = 1 )", "snippet2": "df [ ` D ` ] = df [ ` B ` ] . apply ( lambda x : x [ ` D ` ] + x [ ` df ` ] )"}, {"intent": "find a value within nested json 'data' where the key inside another key 'B' is unknown.", "snippet1": "json . dumps ( data , key = lambda x : x [ ` B ` ] [ ` B ` ] , reverse = ` True ` )", "snippet2": "[ x for x in data if x [ ` B ` ] = = ` B ` ]"}, {"intent": "check characters of string `string` are true predication of function `predicate`", "snippet1": "print ( string . encode ( ` ? ` , 1 ) )", "snippet2": "string . isdigit ( )"}, {"intent": "determine number of files on a drive with python", "snippet1": "print ( os . getcwd ( ) )", "snippet2": "print ( ` < unk > ` . format ( os . getcwd ( ) ) )"}, {"intent": "how to get a single result from a SQLite query in python?", "snippet1": "session . query ( n ) . click ( )", "snippet2": "cursor . execute ( ` all ` ) . execute ( ` INSERT INTO table VALUES ( % s , % s , % s ) ` , ( var1 , var2 , var3 ) )"}, {"intent": "convert string `user_input` into a list of integers `user_list`", "snippet1": "[ int ( x ) for x in user_input . split ( ` , ` ) ]", "snippet2": "user_list = [ int ( x ) for x in user_input . split ( ) ]"}, {"intent": "Get a list of integers by splitting  a string `user` with comma", "snippet1": "[ user ]", "snippet2": "list ( user . split ( ) )"}, {"intent": "Sorting a Python list by two criteria", "snippet1": "sorted ( a , key = lambda x : x . lower ( ) if x . startswith ( ` . ` ) else x . lower ( ) )", "snippet2": "sorted ( l , key = lambda x : x [ 1 ] )"}, {"intent": "sort a list of objects `ut`, based on a function `cmpfun` in descending order", "snippet1": "sorted ( ut , key = cmpfun . on , axis = ` True ` )", "snippet2": "ut . sort ( key = operator . attrgetter ( ` cmpfun ` ) )"}, {"intent": "reverse list `ut` based on the `count` attribute of each object", "snippet1": "ut . reverse ( key = lambda x : x . ut )", "snippet2": "ut . sort ( key = lambda x : x . count )"}, {"intent": "sort a list of objects `ut` in reverse order by their `count` property", "snippet1": "sorted ( ut , key = itemgetter ( ` ` ) )", "snippet2": "sorted ( ut , key = operator . attrgetter ( ` count ` ) )"}, {"intent": "click a href button 'Send' with selenium", "snippet1": "driver . find_element_by_css_selector ( ` Send ` ) . click ( )", "snippet2": "browser . find_element_by_class_name ( ` Send ` ) . click ( )"}, {"intent": "click a href button having text `Send InMail` with selenium", "snippet1": "driver . find_element_by_css_selector ( ` Send In Mail ` ) . click ( )", "snippet2": "browser . find_element_by_class_name ( ` Send In Mail ` ) . click ( )"}, {"intent": "click a href button with text 'Send InMail' with selenium", "snippet1": "driver . find_element_by_css_selector ( ` Send In Mail ` ) . click ( )", "snippet2": "browser . find_element_by_class_name ( ` Send In Mail ` ) . click ( )"}, {"intent": "cast an int `i` to a string and concat to string 'ME'", "snippet1": "` ` ` ME ` ` ` . encode ( ` utf - 8 ` )", "snippet2": "print ( ` ` . join ( str ( ` ` . join ( str ( i ) ) ) ) )"}, {"intent": "Sorting data in DataFrame Pandas", "snippet1": "pd . Data Frame ( list ( df . items ( ) ) , axis = 0 )", "snippet2": "df . sort_values ( [ ` x ` , ` y ` ] , ascending = [ True , False ] )"}, {"intent": "prepend the line '#test firstline\\n' to the contents of file 'infile' and save as the file 'outfile'", "snippet1": "f = open ( ` infile ` , ` f ` ) . read ( )", "snippet2": "os . chmod ( ` # test firstline \\ n ` , ` infile ` )"}, {"intent": "sort a list `l` by length of value in tuple", "snippet1": "sorted ( l , key = lambda x : map ( int , x [ x : ] ) )", "snippet2": "sorted ( l , key = lambda x : len ( l [ i ] ) )"}, {"intent": "split string `s` by words that ends with 'd'", "snippet1": "[ s . split ( ` ` ) for x in s . split ( ` , ` ) ]", "snippet2": "re . split ( ` < unk > ` , s )"}, {"intent": "return `True` if string `foobarrrr` contains regex `ba[rzd]`", "snippet1": "if foobarrrr = = ` ba [ rzd ] ` : print ( ` ba [ rzd ] ` ) else : print ( ` ba [ rzd ] ` )", "snippet2": "re . match ( ` ba [ rzd ] ` , foobarrrr ) . start ( )"}, {"intent": "Removing duplicates in list `t`", "snippet1": "return all ( set ( itertools . chain ( * t ) ) )", "snippet2": "[ list ( item ) for item in set ( len ( item ) for item in t ) ]"}, {"intent": "Removing duplicates in list `source_list`", "snippet1": "return all ( set ( itertools . chain ( * source_list ) ) )", "snippet2": "[ list ( item ) for item in set ( len ( item ) for item in source_list ) ]"}, {"intent": "Removing duplicates in list `abracadabra`", "snippet1": "return all ( set ( itertools . chain ( * abracadabra ) ) )", "snippet2": "[ list ( item ) for item in set ( len ( item ) for item in abracadabra ) ]"}, {"intent": "Convert array `a` into a list", "snippet1": "print ( [ i for i in range ( len ( a ) ) for y in x ] )", "snippet2": "list ( a )"}, {"intent": "Convert the first row of numpy matrix `a` to a list", "snippet1": "np . matrix ( a ) . reshape ( a )", "snippet2": "a = np . array ( a , 0 )"}, {"intent": "In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`", "snippet1": "content = open ( ` soup ` , ` r ` ) . write ( ` Address : ` )", "snippet2": "print ( soup . replace ( ` Address : ` , ` ` ) . replace ( ` Address : ` , ` ` ) )"}, {"intent": "convert elements of each tuple in list `l` into a string  separated by character `@`", "snippet1": "[ ` ` . join ( x ) for x in l ]", "snippet2": "` ` ` ` ` ` . join ( ` ` . join ( map ( str , x ) ) for x in l )"}, {"intent": "convert each tuple in list `l` to a string with '@' separating the tuples' elements", "snippet1": "` ` ` @ ` ` ` . join ( str ( x ) for i in l )", "snippet2": "print ( ` ` . join ( zip ( l , l ) ) )"}, {"intent": "get the html from the current web page of a Selenium driver", "snippet1": "print ( sys . __file__ )", "snippet2": "driver . find_element_by_xpath ( ` < unk > ` ) . get_text ( )"}, {"intent": "Get all matches with regex pattern `\\\\d+[xX]` in list of string `teststr`", "snippet1": "re . findall ( ` \\ \\ d + [ x X ] ` , teststr )", "snippet2": "re . findall ( ` \\ \\ d + [ x X ] ` , teststr )"}, {"intent": "select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`", "snippet1": "df . groupby ( [ ` A ` , ` C ` ] ) . size ( ) . reset_index ( axis = 0 )", "snippet2": "df . loc [ df [ ` B ` ] . isin ( [ 1 , 1 ] ) ]"}, {"intent": "Sort dictionary `o` in ascending order based on its keys and items", "snippet1": "sorted ( list ( o . items ( ) ) , key = lambda tup : map ( int , x . split ( ` : ` ) ) )", "snippet2": "sorted ( list ( o . items ( ) ) , key = lambda x : x [ 1 ] )"}, {"intent": "get sorted list of keys of dict `d`", "snippet1": "sorted ( list ( d . items ( ) ) , key = lambda x : x [ 1 ] )", "snippet2": "sorted ( d , key = d . get )"}, {"intent": "How to sort dictionaries by keys in Python", "snippet1": "sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] )", "snippet2": "sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] )"}, {"intent": "convert string \"1\" into integer", "snippet1": "int ( ` 1 ` , 2 )", "snippet2": "int ( ` 1 ` , 2 )"}, {"intent": "function to convert strings into integers", "snippet1": "ord ( )", "snippet2": "list ( map ( int , [ strings ] ) )"}, {"intent": "convert items in `T1` to integers", "snippet1": "b = int ( int ( T1 ) )", "snippet2": "[ int ( x ) for x in list ( T1 . values ( ) ) ]"}, {"intent": "call a shell script `./test.sh` using subprocess", "snippet1": "subprocess . call ( ` . / test . sh ` , shell = ` True ` )", "snippet2": "subprocess . call ( ` test . sh < unk > ` )"}, {"intent": "call a shell script `notepad` using subprocess", "snippet1": "os . call ( ` notepad ` )", "snippet2": "subprocess . call ( [ ` test . sh ` , subprocess . PIPE ( notepad ) ] )"}, {"intent": "combine lists `l1` and `l2`  by alternating their elements", "snippet1": "l2 = map ( lists , zip ( l1 , l2 ) )", "snippet2": "print ( zip ( l1 , l2 ) )"}, {"intent": "encode string 'data to be encoded'", "snippet1": "` ` ` data to be encoded ` ` ` . encode ( ` data to be encoded ` )", "snippet2": "` ` ` \\ \\ xc3 \\ \\ x85 \u3042 ` ` ` . encode ( ` utf - 8 ` , ` ignore ` )"}, {"intent": "encode a string `data to be encoded` to `ascii` encoding", "snippet1": "ascii = ` data to be encoded ` . encode ( ` ascii ` ) . encode ( ` utf8 ` )", "snippet2": "ascii . encode ( ` data to be encoded ` )"}, {"intent": "parse tab-delimited CSV file 'text.txt' into a list", "snippet1": "try : print ( open ( ` text . txt ` ) . read ( ) ) except Value Error : print ( tab - delimited . readlines ( ) )", "snippet2": "np . genfromtxt ( ` text . txt ` , delimiter = ` \\ t ` , dtype = None )"}, {"intent": "Get attribute `my_str` of object `my_object`", "snippet1": "print ( my_object . my_str - my_object )", "snippet2": "getattr ( my_object , my_str )"}, {"intent": "group a list of dicts `LD` into one dict by key", "snippet1": "dict ( zip ( * LD ) )", "snippet2": "dict ( ( k , LD [ k ] ) for k in LD )"}, {"intent": "How do I sum the first value in each tuple in a list of tuples in Python?", "snippet1": "sum ( x [ 0 ] for x in data )", "snippet2": "map ( sum , zip ( * tuples ) )"}, {"intent": "convert unicode string u\"{'code1':1,'code2':1}\" into dictionary", "snippet1": "dict ( s . split ( ` unicode_escape ` ) for s in s . split ( ` , ` ) )", "snippet2": "dict ( unicodedata . encode ( ` latin - 1 ` ) )"}, {"intent": "find all words in a string `mystring` that start with the `$` sign", "snippet1": "` ` ` ` ` ` . join ( c . split ( ` ` ) for item in mystring . split ( ` $ ` ) )", "snippet2": "[ i for i in re . findall ( ` < unk > ` , mystring ) if i ! = ` $ ` ]"}, {"intent": "remove any url within string `text`", "snippet1": "text . replace ( ` ` , ` ` )", "snippet2": "re . sub ( ` < unk > ` , ` ` , text )"}, {"intent": "replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros", "snippet1": "np . concatenate ( [ [ 1 , 3 , 4 ] , A ] , axis = 1 )", "snippet2": "A = np . where ( np . isnan ( A ) , 0 , A )"}, {"intent": "calculate mean across dimension in a 2d array `a`", "snippet1": "int ( np . isnan ( a ) ) / 1", "snippet2": "np . array ( a . _data ) . mean ( axis = 1 )"}, {"intent": "running r script '/pathto/MyrScript.r' from python", "snippet1": "datetime . datetime . strptime ( ` / pathto / Myr Script . r ` )", "snippet2": "subprocess . call ( ` / pathto / Myr Script . r ` , shell = True )"}, {"intent": "run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'", "snippet1": "sys . exit ( ` / usr / bin / Rscript - - vanilla / pathto / Myr Script . r ` )", "snippet2": "subprocess . call ( [ ` / usr / bin / Rscript - - vanilla / pathto / Myr Script . r ` , ` / usr / bin / Rscript - - vanilla / pathto / Myr Script . r ` , ` / usr / bin / Rscript - - vanilla / pathto / Myr Script . r ` ] )"}, {"intent": "add a header to a csv file", "snippet1": "with open ( ` header ` ) as stream : try : print ( file . split ( ) ) except print as print : print ( line )", "snippet2": "df = pd . read_csv ( ` my . csv ` , header = None )"}, {"intent": "replacing nan in the dataframe `df` with row average", "snippet1": "df . apply ( lambda x : x . fillna ( x . mean ( ) ) , axis = 0 )", "snippet2": "df . groupby ( [ ` farm ` , ` radians ` ] ) . mean ( )"}, {"intent": "Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'", "snippet1": "` ` ` 1347517370 ` ` ` . format ( ` 1347517370 ` , ` % Y - % m - % d % H : % M : % S ` )", "snippet2": "datetime . datetime . strptime ( ` 1347517370 ` , ` % Y - % m - % d % H : % M : % S ` ) . strftime ( ` % Y - % m - % d % H : % M : % S ` )"}, {"intent": "Call a base class's class method `do` from derived class `Derived`", "snippet1": "set ( [ do , list ( Derived . values ( ) ) ] ) . method ( )", "snippet2": "super ( do , self ) . __init__ ( * args , * * kwargs )"}, {"intent": "selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1", "snippet1": "numpy . loc [ a [ 0 ] = = 0 , 0 ]", "snippet2": "np . where ( a = = 0 ) [ 0 ] . unique ( )"}, {"intent": "separate words delimited by one or more spaces into a list", "snippet1": "re . findall ( ` - c ` )", "snippet2": "` ` ` ` ` ` . join ( itertools . split ( ` + ` , para ) )"}, {"intent": "length of longest element in list `words`", "snippet1": "list ( map ( lambda x : x * x , words ) )", "snippet2": "max ( words , key = lambda x : len ( words [ i ] ) )"}, {"intent": "get the value associated with unicode key 'from_user' of first dictionary in list `result`", "snippet1": "sum ( x . split ( ` from_user ` ) [ 0 ] for x in result )", "snippet2": "print ( str ( result [ ` from_user ` ] ) [ 0 ] )"}, {"intent": "Retrieve each line from a file 'File.txt' as a list", "snippet1": "os . system ( ` File . txt ` )", "snippet2": "print ( re . findall ( ` < unk > ` , File . txt ) )"}, {"intent": "swap keys with values in a dictionary `a`", "snippet1": "dict ( ( v , k ) for k , v in a . items ( ) )", "snippet2": "dict ( ( k , v ) for k , v in a . items ( ) if v )"}, {"intent": "Open a file `path/to/FILE_NAME.ext` in write mode", "snippet1": "output = open ( ` path / to / FILE_NAME . ext ` , ` path / to / FILE_NAME . ext ` )", "snippet2": "f = open ( ` path / to / FILE_NAME . ext ` , ` wb ` )"}, {"intent": "How to count distinct values in a column of a pandas group by object?", "snippet1": "df . apply ( lambda x : x . sum ( x . index ( x [ 0 ] ) ) )", "snippet2": "df [ ` count ` ] . str . search ( ` - pet__age ` ) . nunique ( )"}, {"intent": "Check if any key in the dictionary `dict1` starts with the string `EMP$$`", "snippet1": "` EMP $ $ ` in iter ( dict1 . values ( ) )", "snippet2": "any ( k in ` EMP $ $ ` for k in EMP $ $ )"}, {"intent": "create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'", "snippet1": "[ value for k , v in dict1 . items ( ) if ` EMP $ $ ` in k ]", "snippet2": "[ k for k , v in dict1 . items ( ) if v = = ` EMP $ $ ` ]"}, {"intent": "convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`", "snippet1": "df1 = pd . merge ( sf , email , how = ` email ` , list = ` list ` )", "snippet2": "df = pd . Data Frame ( sf , columns = [ ` email ` , ` list ` ] )"}, {"intent": "print elements of list `list` seperated by tabs `\\t`", "snippet1": "print ( ` \\ t ` . join ( ` ` . join ( i ) for i in list ) )", "snippet2": "print ( ` ` . join ( map ( str , list ) ) )"}, {"intent": "print unicode string '\\xd0\\xbf\\xd1\\x80\\xd0\\xb8' with utf-8", "snippet1": "print ( ` \u00d0 \u00bf \u00d1 \\ x80 \u00d0 \u00b8 ` . decode ( ` utf8 ` ) )", "snippet2": "print ( ` \u00d0 \u00bf \u00d1 \\ x80 \u00d0 \u00b8 ` . format ( ` \u00d0 \u00bf \u00d1 \\ x80 \u00d0 \u00b8 ` . encode ( ` UTF8 ` ) ) )"}, {"intent": "Encode a latin character in string `Sopet\\xc3\\xb3n` properly", "snippet1": "` ` ` ` ` ` . join ( reversed ( ` Sopet \u00c3 \u00b3 n ` ) )", "snippet2": "re . findall ( ` \\ \\ w ` , ` Sopet \u00c3 \u00b3 n ` )"}, {"intent": "resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`", "snippet1": "session . query ( image ) . filter ( lambda x : x . mean ( ) )", "snippet2": "img . show ( )"}, {"intent": "regex, find \"n\"s only in the middle of string `s`", "snippet1": "re . sub ( ` middle ` , ` \\ \\ 1 ` , s )", "snippet2": "print ( re . findall ( ` i ` , s ) )"}, {"intent": "display the float `1/3*100` as a percentage", "snippet1": "print ( driver . find_element_by_xpath ( ` 1 / 3 * 100 ` ) . split ( ` \\ n ` ) )", "snippet2": "struct . unpack ( ` f ` , ` { 0 : . 2f } ` . format ( float ( ` 1 / 3 * 100 ` ) ) )"}, {"intent": "sort a list of dictionary `mylist` by the key `title`", "snippet1": "sorted ( mylist , key = lambda x : x [ title ] )", "snippet2": "sorted ( mylist , key = lambda x : x [ ` title ` ] )"}, {"intent": "sort a list `l` of dicts by dict value 'title'", "snippet1": "sorted ( l , key = lambda x : x [ 1 ] )", "snippet2": "sorted ( l , key = lambda x : x . get ( ` title ` ) [ ` title ` ] , reverse = True )"}, {"intent": "sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.", "snippet1": "sorted ( d , key = lambda x : ( d [ ` title ` ] , d [ x ] [ ` title_url ` ] ) )", "snippet2": "order . sort ( key = lambda d : d . get ( ` title ` , d [ ` title_url ` ] ) )"}, {"intent": "find 10 largest differences between each respective elements of list `l1` and list `l2`", "snippet1": "[ sum ( abs ( x ) for x in l2 [ i : i + l2 ] ) for i in zip ( * l2 ) ]", "snippet2": "[ max ( x ) for x in zip ( * l1 ) ]"}, {"intent": "BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp'", "snippet1": "re . sub ( ` span ` , ` star Gry B sp ` , soup ) . find ( ` span ` )", "snippet2": "soup . soup . find All ( ` span ` , href = re . compile ( ` span ` ) )"}, {"intent": "write records in dataframe `df` to table 'test' in schema 'a_schema'", "snippet1": "df . objects . write ( ` test ` , axis = 1 , inplace = ` True ` )", "snippet2": "df . to_csv ( ` a_schema ` , index = False )"}, {"intent": "Extract brackets from string `s`", "snippet1": "return ` ` . join ( re . split ( ` ` , key , re . UNICODE ) for item in s . split ( ) )", "snippet2": "re . findall ( ` # ( \\ \\ w + ) ` , ` s ` )"}, {"intent": "remove duplicate elements from list 'L'", "snippet1": "[ x for x in L if x not in [ L ] ]", "snippet2": "[ k for k , g in itertools . groupby ( [ L ] ) ]"}, {"intent": "read a file `file` without newlines", "snippet1": "file = open ( ` file ` , ` rb ` ) . read ( )", "snippet2": "f = open ( ` file ` , ` rb ` )"}, {"intent": "get the position of item 1 in `testlist`", "snippet1": "len ( testlist [ : : - 1 ] ) - len ( testlist [ 1 : ] )", "snippet2": "len ( testlist ) - len ( set ( testlist ) )"}, {"intent": "get the position of item 1 in `testlist`", "snippet1": "len ( testlist [ : : - 1 ] ) - len ( testlist [ 1 : ] )", "snippet2": "len ( testlist ) - len ( set ( testlist ) )"}, {"intent": "get the position of item 1 in `testlist`", "snippet1": "len ( testlist [ : : - 1 ] ) - len ( testlist [ 1 : ] )", "snippet2": "len ( testlist ) - len ( set ( testlist ) )"}, {"intent": "get the position of item 1 in `testlist`", "snippet1": "len ( testlist [ : : - 1 ] ) - len ( testlist [ 1 : ] )", "snippet2": "len ( testlist ) - len ( set ( testlist ) )"}, {"intent": "get the position of item 1 in `testlist`", "snippet1": "len ( testlist [ : : - 1 ] ) - len ( testlist [ 1 : ] )", "snippet2": "len ( testlist ) - len ( set ( testlist ) )"}, {"intent": "get the position of item `element` in list `testlist`", "snippet1": "len ( testlist )", "snippet2": "len ( testlist ) - element [ : : - 1 ]"}, {"intent": "get the position of item `element` in list `testlist`", "snippet1": "len ( testlist )", "snippet2": "len ( testlist ) - element [ : : - 1 ]"}, {"intent": "find the first element of the tuple with the maximum second element in a list of tuples `lis`", "snippet1": "[ x [ 0 ] for x in lis ]", "snippet2": "[ x [ 0 ] for x in lis ]"}, {"intent": "get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`", "snippet1": "sorted ( enumerate ( lis ) , key = lambda x : x [ 1 ] ) [ 0 ]", "snippet2": "lis [ 0 ] - lis [ - 1 ]"}, {"intent": "Make a delay of 1 second", "snippet1": "psutil . sleep ( 2 )", "snippet2": "sleep . sleep ( 1 )"}, {"intent": "convert list of tuples `L` to a string", "snippet1": "` ` ` ` ` ` . join ( [ item [ 0 ] for item in L ] )", "snippet2": "` ` ` ` ` ` . join ( item for item in L for item in list ( item ) )"}, {"intent": "Django set default value of field `b` equal to '0000000'", "snippet1": "b . objects . filter ( lambda 0000000 : x . fillna ( x [ ` 0000000 ` ] ) )", "snippet2": "b = models . Foreign Key ( ` 0000000 ` , unique = True )"}, {"intent": "Sort lis `list5` in ascending order based on the degrees value of its elements", "snippet1": "list5 . sort ( key = lambda x : len ( x [ 1 ] ) )", "snippet2": "sorted ( list ( list5 . items ( ) ) , key = lambda x : x [ 1 ] )"}, {"intent": "How do I perform secondary sorting in python?", "snippet1": "df . sort ( key = lambda x : x . index ( x . lower ( ) [ 0 ] ) )", "snippet2": "sorted ( list ( mydict . items ( ) ) , key = lambda a : ( a [ 1 ] , c . index ( ( b , c ) ) ) )"}, {"intent": "convert a list  into a generator object", "snippet1": "[ int ( i ) for i in range ( 0 , len ( my_list ) , 3 ) ]", "snippet2": "list ( range ( 1 , 3 ) )"}, {"intent": "remove elements from list `oldlist` that have an index number mentioned in list `removelist`", "snippet1": "[ ( x - x ) for x , y in zip ( oldlist , removelist ) ]", "snippet2": "[ x for x in removelist if x [ 1 ] = = 0 ]"}, {"intent": "Open a file `yourfile.txt` in write mode", "snippet1": "output = open ( ` yourfile . txt ` , ` yourfile . txt ` )", "snippet2": "f = open ( ` yourfile . txt ` , ` wb ` )"}, {"intent": "get attribute 'attr' from object `obj`", "snippet1": "print ( obj [ ` attr ` ] )", "snippet2": "getattr ( obj , ` attr ` )"}, {"intent": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple", "snippet1": "map ( tuple , zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) )", "snippet2": "map ( tuple , zip ( * ( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) ) )"}, {"intent": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line", "snippet1": "` ` ` ` ` ` . join ( [ str ( lambda x : x + y ) for x in ( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) . items ( ) ] )", "snippet2": "( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) = [ ( x , y ) for x , y in zip ( ( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) , ( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) ) ]"}, {"intent": "Python Pandas: How to replace a characters in a column of a dataframe?", "snippet1": "pd . concat ( [ pid , df ] , axis = 1 )", "snippet2": "df [ ` value ` ] = df [ ` a ` ] . fillna ( 0 )"}, {"intent": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`", "snippet1": "sorted ( [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] , key = lambda x : x . endswith ( x [ 1 ] ) )", "snippet2": "[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] . sort ( [ ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] ` , ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] ` , ` a ` , ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] ` ] )"}, {"intent": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`", "snippet1": "sorted ( [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] , key = lambda x : x . endswith ( x [ 1 ] ) )", "snippet2": "[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] . sort ( [ ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] ` , ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] ` , ` a ` , ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] ` ] )"}, {"intent": "unzip list `original`", "snippet1": "original [ : : - 1 ]", "snippet2": "zip ( * original )"}, {"intent": "unzip list `original` and return a generator", "snippet1": "generator ( original , key = lambda x : ( - 1 , x [ 1 ] ) )", "snippet2": "original . split ( )"}, {"intent": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`", "snippet1": "print ( [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] )", "snippet2": "[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] . sort ( [ ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] ` , ` str_2 ` , ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] ` ] )"}, {"intent": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None", "snippet1": "plt . add_argument ( ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] ` )", "snippet2": "[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] . append ( ( ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] ` , ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] ` ) )"}, {"intent": "encode `Decimal('3.9')` to a JSON string", "snippet1": "json . dumps ( ` Decimal ( ` 3 . 9 ` ) ` )", "snippet2": "json . dumps ( { ` Decimal ( ` 3 . 9 ` ) ` . encode ( ` Decimal ( ` 3 . 9 ` ) ` ) : v for k , v in json . enumerate ( Decimal ( ` 3 . 9 ` ) ) } )"}, {"intent": "Add key \"mynewkey\" to dictionary `d` with value \"mynewvalue\"", "snippet1": "d [ ` mynewkey ` ] [ ` mynewvalue ` ] = ` mynewvalue `", "snippet2": "d . update ( { ` mynewkey ` : 4 , ` mynewvalue ` : 5 } )"}, {"intent": "Add key 'a' to dictionary `data` with value 1", "snippet1": "data [ ` a ` ] = 3", "snippet2": "data [ ` a ` ] . update ( { a } )"}, {"intent": "Add key 'a' to dictionary `data` with value 1", "snippet1": "data [ ` a ` ] = 3", "snippet2": "data [ ` a ` ] . update ( { a } )"}, {"intent": "Add key 'a' to dictionary `data` with value 1", "snippet1": "data [ ` a ` ] = 3", "snippet2": "data [ ` a ` ] . update ( { a } )"}, {"intent": "find maximal value in matrix `matrix`", "snippet1": "np . find ( ( 0 , 0 ) , matrix )", "snippet2": "numpy . array ( [ matrix ] ) . max ( )"}, {"intent": "Round number `answer` to 2 precision after the decimal point", "snippet1": "int ( answer )", "snippet2": "print ( round ( answer , 2 ) )"}, {"intent": "extract ip address from an html string", "snippet1": "` ` ` ` ` ` . join ( filter ( lambda x : s . split ( ` : ` ) ) )", "snippet2": "pat = re . compile ( ` < unk > ` )"}, {"intent": "filter dataframe `df` by values in column `A` that appear more than once", "snippet1": "df . groupby ( ` A ` ) [ ` A ` ] . agg ( lambda x : map ( x , A [ i : ] ) )", "snippet2": "df . filter ( lambda df : np . arange ( A . sum ( ) ) = = 1 )"}, {"intent": "append each line in file `myfile` into a list", "snippet1": "myfile . append ( myfile )", "snippet2": "myfile . write ( open ( ` file . txt ` , ` w ` ) . read ( ) )"}, {"intent": "Get a list of integers `lst` from a file `filename.txt`", "snippet1": "list ( load ( open ( ` filename . txt ` , ` rb ` ) ) )", "snippet2": "[ list ( t ) for t in open ( ` filename . txt ` ) . read ( ) ]"}, {"intent": "add color bar with image `mappable` to plot `plt`", "snippet1": "plt ( lambda x , plt : x * plt )", "snippet2": "plt . plot ( mappable , bar , color = color )"}, {"intent": "count most frequent 100 words in column 'text' of dataframe `df`", "snippet1": "df . apply ( lambda x : x . count ( ` text ` ) ) . click ( )", "snippet2": "df . groupby ( ` text ` ) . agg ( lambda x : x . groupby ( ` text ` ) . sum ( ) )"}, {"intent": "Python split a string using regex", "snippet1": "return ` ` . join ( reversed ( str ) )", "snippet2": "re . findall ( ` \\ \\ S + ` , str1 )"}, {"intent": "generate all 2-element subsets of tuple `(1, 2, 3)`", "snippet1": "print ( set ( map ( lambda x : x * x , [ ( 1 , 2 , 3 ) ] ) ) )", "snippet2": "print ( list ( itertools . product ( [ ( 1 , 2 , 3 ) ] , 2 ) ) )"}, {"intent": "get a value of datetime.today() in the UTC time zone", "snippet1": "time . datetime . today . time ( * * 0 )", "snippet2": "time . strftime ( ` % H : % M : % S ` , datetime . utcnow ( ) )"}, {"intent": "Get a new list `list2`by removing empty list from a list of lists `list1`", "snippet1": "[ [ ] for i in range ( len ( list1 ) ) ]", "snippet2": "l = [ [ i for i in list1 ] for i in list1 ]"}, {"intent": "Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`", "snippet1": "list2 = [ x for x in list1 if x not in list1 ]", "snippet2": "list1 = [ [ str ( i ) for i in list1 ] for i in range ( list1 ) ]"}, {"intent": "Django response with JSON `data`", "snippet1": "data = json . dumps ( ` data ` )", "snippet2": "data = json . loads ( request . POST . get ( ` data ` , ` { } ` ) )"}, {"intent": "get all text that is not enclosed within square brackets in string `example_str`", "snippet1": "re . sub ( ` ` , ` ` , example_str )", "snippet2": "re . findall ( ` \\ \\ [ ( . * ? ) \\ \\ ] ` , example_str )"}, {"intent": "Use a regex to get all text in a string `example_str` that is not surrounded by square brackets", "snippet1": "re . sub ( ` ` , ` \\ \\ 1 ` , example_str )", "snippet2": "re . findall ( ` \\ \\ [ ( . * ? ) \\ \\ ] ` , example_str )"}, {"intent": "get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'", "snippet1": "driver . find_element_by_id ( ` ( zyx ) bc ` ) . write ( bool ( ` ( zyx ) bc ` ) )", "snippet2": "print ( ` ` . join ( re . findall ( ` \u00ab ( [ \\ \\ s \\ \\ S ] * ? ) \u00bb ` , ( zyx ) bc ) ) )"}, {"intent": "match regex '\\\\((.*?)\\\\)|(\\\\w)' with string '(zyx)bc'", "snippet1": "print ( re . match ( ` \\ \\ ( ( . * ? ) \\ \\ ) | ( \\ \\ w ) ` , ` ( zyx ) bc ` ) . group ( 1 ) )", "snippet2": "re . match ( ` \\ \\ ( ( . * ? ) \\ \\ ) | ( \\ \\ w ) ` , ` ( zyx ) bc ` )"}, {"intent": "match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`", "snippet1": "re . findall ( ` | ` , ` ( zyx ) bc ` )", "snippet2": "print ( ` ` . join ( filter ( str . isdigit , ` ( zyx ) bc ` ) ) )"}, {"intent": "formate each string cin list `elements` into pattern '%{0}%'", "snippet1": "print ( re . findall ( ` % { 0 } % ` , elements ) )", "snippet2": "re . findall ( ` % { 0 } % ` , elements )"}, {"intent": "Open a background process 'background-process' with arguments 'arguments'", "snippet1": "os . open ( ` background - process ` , arguments )", "snippet2": "print ( subprocess . Popen ( [ ` grep ` , ` f ` , arguments ] , stdout = background - process ) )"}, {"intent": "get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'", "snippet1": "[ k for k , v in list ( mydict . items ( ) ) if mydict [ i ] = = 1 ]", "snippet2": "[ k for k , v in list ( mydict . items ( ) ) if v = = ` mykeys ` ]"}, {"intent": "convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary", "snippet1": "dict ( zip ( * [ ( ` Name ` , ` Joe ` ) , ( ` Age ` , 22 ) ] ) )", "snippet2": "dict ( map ( lambda s : s . split ( ` : ` ) , [ ( ` Name ` , ` Joe ` ) , ( ` Age ` , 22 ) ] ) )"}, {"intent": "average each two columns of array `data`", "snippet1": "np . array ( data . columns ) . size ( axis = 0 ) . apply ( lambda x : x * 1 , reverse = ` True ` )", "snippet2": "np . dstack ( np . meshgrid ( data , data ) , axis = 1 ) . mean ( )"}, {"intent": "double backslash escape all double quotes in string `s`", "snippet1": "struct . unpack ( ` f ` , s . read ( 200 ) )", "snippet2": "re . sub ( ` ( . ) ` , ` \\ \\ 1 \\ \\ 1 ` , text . read ( ) )"}, {"intent": "split a string into a list of words and whitespace", "snippet1": "print ( re . split ( ` ` , s ) )", "snippet2": "[ s . split ( ` \\ t ` ) for s in re . findall ( ` [ A - Za - z ` ] + ` , text ) ]"}, {"intent": "plotting stacked barplots on a panda data frame", "snippet1": "pd . to_datetime ( pd . Series ( panda ) )", "snippet2": "pd . concat ( [ df1 , df2 ] , axis = 0 )"}, {"intent": "reverse the keys and values in a dictionary `myDictionary`", "snippet1": "dict ( ( v , k ) for k , v in my Dictionary . items ( ) )", "snippet2": "dict ( ( v , k ) for k , v in my Dictionary . items ( ) )"}, {"intent": "finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.", "snippet1": "[ item [ ` how ` ] for item in ` my List ` for x in [ how ] ]", "snippet2": "[ a for a , b in enumerate ( how ) if ` what ` in ` ` ]"}, {"intent": "check if object `obj` is a string", "snippet1": "if obj = = n : pass", "snippet2": "if isinstance ( obj , ` ` ) : pass"}, {"intent": "check if object `o` is a string", "snippet1": "if o = = n : pass", "snippet2": "if isinstance ( o , ` ` ) : pass"}, {"intent": "check if object `o` is a string", "snippet1": "if o = = n : pass", "snippet2": "if isinstance ( o , ` ` ) : pass"}, {"intent": "check if object `o` is a string", "snippet1": "if o = = n : pass", "snippet2": "if isinstance ( o , ` ` ) : pass"}, {"intent": "check if `obj_to_test` is a string", "snippet1": "if obj_to_test = = n : pass", "snippet2": "any ( e in obj_to_test for obj_to_test in obj_to_test . split ( ` , ` ) )"}, {"intent": "append list `list1` to `list2`", "snippet1": "list2 . append ( list1 )", "snippet2": "[ j for i in list1 for j in i ]"}, {"intent": "append list `mylog` to `list1`", "snippet1": "list1 . append ( mylog )", "snippet2": "[ j for i in mylog for j in i ]"}, {"intent": "append list `a` to `c`", "snippet1": "c . append ( a )", "snippet2": "[ j for i in a for j in i ]"}, {"intent": "append items in list `mylog` to `list1`", "snippet1": "for item in mylog : pass", "snippet2": "list1 = [ list1 ( ) for list1 in mylog ]"}, {"intent": "append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`", "snippet1": "[ x for x in a if 1 in item ]", "snippet2": "[ ( a + b ) for a , b in zip ( a , b ) ]"}, {"intent": "Initialize `SECRET_KEY` in flask config with `Your_secret_string `", "snippet1": "SECRET_KEY = SECRET_KEY . xpath ( )", "snippet2": "SECRET_KEY = models . Foreign Key ( ` Your_secret_string ` , unique = True )"}, {"intent": "unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2'", "snippet1": "Data Frame ( enumerate ( var_0 ) ) . unpack ( ` out - 1 ` , ` out - 2 ` )", "snippet2": "pd . Data Frame ( data , columns = [ ` out - 1 ` , ` out - 2 ` ] )"}, {"intent": "find the index of an element 'MSFT' in a list `stocks_list`", "snippet1": "[ stocks_list [ i ] for i in range ( 0 , len ( stocks_list ) , 1 ) ]", "snippet2": "[ i for i , j in enumerate ( stocks_list ) if i = = ` MSFT ` ]"}, {"intent": "rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable", "snippet1": "ax . xtick ( lambda x : min ( x ) )", "snippet2": "plt . plot ( list ( range ( 0 , len ( ax ) + 1 ) ) , vmin = 0 , vmax = 15 )"}, {"intent": "remove symbols from a string `s`", "snippet1": "s . replace ( ` \\ \\ ` , ` ` )", "snippet2": "s . replace ( ` and ` , ` ` )"}, {"intent": "Get the current directory of a script", "snippet1": "os . path . dirname ( os . path . abspath ( __file__ ) )", "snippet2": "print ( os . path . dirname ( os . path . realpath ( __file__ ) ) )"}, {"intent": "Find octal characters matches from a string `str` using regex", "snippet1": "re = re = pattern = ` ` . join ( c for c in str if c . isdigit ( ) )", "snippet2": "re . findall ( ` \\ n \\ \\ s * \\ n ` , str )"}, {"intent": "split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\\\b)'", "snippet1": "re . split ( ` [ ] ( ? = [ A - Z ] + \\ \\ b ) ` , input )", "snippet2": "re . split ( ` [ ] ( ? = [ A - Z ] + \\ \\ b ) ` , input )"}, {"intent": "Split string `input` at every space followed by an upper-case letter", "snippet1": "[ input [ i : i + input ] for i in range ( 0 , len ( input ) , 2 ) ]", "snippet2": "` ` ` ` ` ` . split ( )"}, {"intent": "send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`", "snippet1": "os . path . send ( files , url , metadata = ( ` headers ` , ` data ` ) )", "snippet2": "r = requests . get ( files , auth = ( ` url ` , ` headers ` ) )"}, {"intent": "write bytes `bytes_` to a file `filename` in python 3", "snippet1": "filename . read ( ) . write ( [ ` filename ` , ` filename ` ] )", "snippet2": "filename . write ( struct . pack ( ` < I ` , open ( bytes_ ) ) )"}, {"intent": "get a list from a list `lst` with values mapped into a dictionary `dct`", "snippet1": "dct = dict ( ( k , v ) for k , v in list ( dct . items ( ) ) )", "snippet2": "dict ( ( k . get ( ` key ` ) , v ) for k , v in list ( dct . values ( ) ) )"}, {"intent": "find duplicate names in column 'name' of the dataframe `x`", "snippet1": "x . update ( lambda name : x . find ( ` name ` ) , axis = 1 )", "snippet2": "x . set_index ( ` name ` ) . unstack ( level = 0 )"}, {"intent": "truncate float 1.923328437452 to 3 decimal places", "snippet1": "int ( float ( int ( float ( range ( 3 ) ) ) ) , 3 )", "snippet2": "round ( 1 . 923328437452 , 3 )"}, {"intent": "sort list `li` in descending order based on the date value in second element of each list in list `li`", "snippet1": "li . sort ( key = operator . itemgetter ( 1 ) , reverse = ` True ` )", "snippet2": "li . sort ( key = operator . itemgetter ( 1 ) )"}, {"intent": "place the radial ticks in plot `ax` at 135 degrees", "snippet1": "place ( ax , ax , * * ( 0 , 1 ) )", "snippet2": "ax . errorbar ( x , ax , yerr = err , ecolor = ` ax ` )"}, {"intent": "check if path `my_path` is an absolute path", "snippet1": "os . path . abspath ( my_path )", "snippet2": "os . my_path . abspath ( my_path )"}, {"intent": "get number of keys in dictionary `yourdict`", "snippet1": "sum ( len ( v ) for v in yourdict . values ( ) )", "snippet2": "sum ( i for i in list ( yourdict . keys ( ) ) )"}, {"intent": "count the number of keys in dictionary `yourdictfile`", "snippet1": "sum ( len ( v ) for v in yourdictfile . values ( ) )", "snippet2": "sum ( len ( v ) for v in yourdictfile . values ( ) )"}, {"intent": "pandas dataframe get first row of each group by 'id'", "snippet1": "df [ ` id ` ] = df [ ` id ` ] . apply ( lambda x : x [ 0 ] , df [ 0 ] )", "snippet2": "pd . concat ( [ df . head ( 1 ) , pd . Data Frame ( df [ ` id ` ] . tolist ( ) ) ] )"}, {"intent": "split a list in first column  into multiple columns keeping other columns as well in pandas data frame", "snippet1": "pd . concat ( [ a , b ] , axis = 1 )", "snippet2": "pd . concat ( [ df1 , df2 ] , axis = 1 )"}, {"intent": "extract attributes 'src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"' from string `data`", "snippet1": "data = ` ` . join ( operator . split ( ` ` ) for item in data . split ( ) )", "snippet2": "data . pop ( ` src = ` js / ( [ ^ ` ] * \\ \\ bjquery \\ \\ b [ ^ ` ] * ) ` ` )"}, {"intent": "Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`", "snippet1": "sum ( sum ( x ) for x in [ ` ` , ` 3 . 4 ` , ` ` , ` ` , ` 1 . 0 ` ] )", "snippet2": "sum ( sum ( x ) for x in [ ` ` , ` 3 . 4 ` , ` ` , ` ` , ` 1 . 0 ` ] )"}, {"intent": "Call a subprocess with arguments `c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat` that may contain spaces", "snippet1": "l = map ( lambda x : map ( int , x . split ( ` c : \\ \\ Program Files \\ \\ VMware \\ \\ VMware Server \\ \\ vmware - cmd . bat ` ) ) )", "snippet2": "subprocess . call ( ` c : \\ \\ Program Files \\ \\ VMware \\ \\ VMware Server \\ \\ vmware - cmd . bat ` , shell = True )"}, {"intent": "reverse a priority queue `q` in python without using classes", "snippet1": "datetime . datetime . now ( ) . click ( )", "snippet2": "super ( q , self ) . __init__ ( * args , * * kwargs )"}, {"intent": "make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`", "snippet1": "df = df [ ( df [ group ] = = ` color ` ) & ( df [ color ] = = color ) ]", "snippet2": "df . groupby ( [ ` group ` , ` color ` ] ) . order_by ( ` color ` )"}, {"intent": "find all matches of regex pattern '([a-fA-F\\\\d]{32})' in string `data`", "snippet1": "re . findall ( ` ( [ a - f A - F \\ \\ d ] { 32 } ) ` , data )", "snippet2": "re . findall ( ` ( [ a - f A - F \\ \\ d ] { 32 } ) ` , data )"}, {"intent": "Get the length of list `my_list`", "snippet1": "len ( my_list )", "snippet2": "len ( my_list )"}, {"intent": "Getting the length of array `l`", "snippet1": "np . array ( np . reshape ( l ) )", "snippet2": "len ( l )"}, {"intent": "Getting the length of array `s`", "snippet1": "np . array ( np . reshape ( s ) )", "snippet2": "len ( s )"}, {"intent": "Getting the length of `my_tuple`", "snippet1": "len ( set ( my_tuple ) )", "snippet2": "len ( my_tuple )"}, {"intent": "Getting the length of `my_string`", "snippet1": "len ( set ( my_string ) )", "snippet2": "len ( my_string )"}, {"intent": "remove escape character from string \"\\\\a\"", "snippet1": "\\ a . replace ( ` ` )", "snippet2": "re . sub ( ` < unk > ` , ` \\ \\ a ` , ` \\ \\ a ` )"}, {"intent": "replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.", "snippet1": "` ` ` ` ` ` . join ( str ( i ) for i in obama )", "snippet2": "a . replace ( ` b ` , ` a ` )"}, {"intent": "remove directory tree '/folder_name'", "snippet1": "os . chdir ( ` / folder_name ` )", "snippet2": "sys . path . remove ( ` / folder_name ` )"}, {"intent": "create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`", "snippet1": "data [ ` weekday ` ] = np . data", "snippet2": "data [ ` weekday ` ] = data [ ` my_dt ` ] / data [ ` weekday ` ]"}, {"intent": "reverse sort Counter `x` by values", "snippet1": "x . sort ( key = operator . itemgetter ( 1 ) )", "snippet2": "sorted ( iter ( x . items ( ) ) , key = itemgetter ( 1 ) )"}, {"intent": "reverse sort counter `x` by value", "snippet1": "sorted ( x , key = lambda x : x [ 1 ] )", "snippet2": "sorted ( iter ( x . items ( ) ) , key = itemgetter ( 1 ) , reverse = True )"}, {"intent": "append a numpy array 'b' to a numpy array 'a'", "snippet1": "np . array ( [ b , x ] , axis = 1 )", "snippet2": "np . append ( a , b )"}, {"intent": "numpy concatenate two arrays `a` and `b` along the first axis", "snippet1": "numpy . concatenate ( a , b ) [ 0 ] . first ( b )", "snippet2": "np . concatenate ( ( a , b ) , axis = 0 )"}, {"intent": "numpy concatenate two arrays `a` and `b` along the second axis", "snippet1": "numpy . concatenate ( a , b ) . size ( ) . axis ( )", "snippet2": "np . concatenate ( [ a , b ] , axis = 1 )"}, {"intent": "numpy concatenate two arrays `a` and `b` along the first axis", "snippet1": "numpy . concatenate ( a , b ) [ 0 ] . first ( b )", "snippet2": "np . concatenate ( ( a , b ) , axis = 0 )"}, {"intent": "numpy concatenate two arrays `a` and `b` along the first axis", "snippet1": "numpy . concatenate ( a , b ) [ 0 ] . first ( b )", "snippet2": "np . concatenate ( ( a , b ) , axis = 0 )"}, {"intent": "fetch address information for host 'google.com' ion port 80", "snippet1": "plt . address ( 0 , ` google . com ` )", "snippet2": "socket . system ( ` google . com ` )"}, {"intent": "add a column 'day' with value 'sat' to dataframe `df`", "snippet1": "df . set_index ( [ ` day ` , ` sat ` ] )", "snippet2": "df [ ` day ` ] = df ( ` sat ` )"}, {"intent": "return a 401 unauthorized in django", "snippet1": "{ { datetime . datetime . now ( ) } , { } }", "snippet2": "request . GET . get ( ` < unk > ` , ` % d % b % Y ` )"}, {"intent": "Flask set folder 'wherever' as the default template folder", "snippet1": "sys . stdout . template ( ` wherever ` )", "snippet2": "app = subprocess . request ( ` wherever ` )"}, {"intent": "How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?", "snippet1": "session . stack ( ) . reset_index ( ) . reset_index ( key = lambda x : x . startswith ( ` * ` ) [ 0 ] )", "snippet2": "cursor . execute ( ` INSERT INTO table ( ` column1 ` ) VALUES ( % s ) ` , ( t2 , ) )"}, {"intent": "sort a list of lists 'c2' such that third row comes first", "snippet1": "sorted ( c2 , key = lambda x : ( - x [ 0 ] , len ( y ) ) )", "snippet2": "sorted ( c2 , key = lambda x : int ( list ( x [ 0 ] ) [ 0 ] ) )"}, {"intent": "Sorting a list of lists in Python", "snippet1": "sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] )", "snippet2": "[ sorted ( item ) for item in lists ]"}, {"intent": "Sorting a list of lists in Python", "snippet1": "sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] )", "snippet2": "[ sorted ( item ) for item in lists ]"}, {"intent": "set font `Arial` to display non-ascii characters in matplotlib", "snippet1": "datetime . datetime . combine ( Arial , ` ` )", "snippet2": "plt . savefig ( ` Arial ` , bbox_inches = ` size ` )"}, {"intent": "Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal", "snippet1": "df [ ` date ` ] = df [ ` date ` ] . apply ( pd . Series )", "snippet2": "pd . to_datetime ( pd . Time Grouper ( hours = 5 ) ) + 1"}, {"intent": "get html source of Selenium WebElement `element`", "snippet1": "element . size ( ) . strftime ( ` ? ` )", "snippet2": "print ( element . page_source )"}, {"intent": "Get the integer location of a key `bob` in a pandas data frame", "snippet1": "int ( df . groupby ( ` bob ` , axis = 1 ) [ 0 ] )", "snippet2": "df [ ` bob ` ] . apply ( lambda x : int ( x [ 0 ] ) )"}, {"intent": "open a 'gnome' terminal from python script and run  'sudo apt-get update' command.", "snippet1": "os . system ( ` gnome ` )", "snippet2": "os . system ( ` gnome ` )"}, {"intent": "add an item with key 'third_key' and value 1 to an dictionary `my_dict`", "snippet1": "dict ( ( i , x + my_dict [ i ] ) for i in range ( 1 , len ( my_dict ) , 1 ) )", "snippet2": "my_dict [ ` third_key ` ] . update ( { ` third_key ` : ` third_key ` } )"}, {"intent": "declare an array", "snippet1": "data = numpy . array ( 0 , 0 , axis = 0 )", "snippet2": "i = [ ]"}, {"intent": "Insert item `12` to a list `my_list`", "snippet1": "my_list . insert ( 0 , 1 )", "snippet2": "my_list . insert ( 2 , ` 12 ` )"}, {"intent": "add an entry 'wuggah' at the beginning of list `myList`", "snippet1": "my List = [ ( wuggah + x ) for x in my List ]", "snippet2": "my List = [ wuggah ]"}, {"intent": "convert a hex-string representation to actual bytes", "snippet1": "locale . pack ( str ( 10 ) )", "snippet2": "struct . pack ( ` < I ` , 1633837924 ) . encode ( ` utf - 8 ` )"}, {"intent": "select the last column of dataframe `df`", "snippet1": "df . apply ( lambda x : x . fillna ( x . index ( x [ 0 ] ) ) )", "snippet2": "df . loc [ ~ df [ ` A ` ] . isin ( df ) ]"}, {"intent": "get the first value from dataframe `df` where column 'Letters' is equal to 'C'", "snippet1": "df . loc [ : , ( ( df [ ` Letters ` ] = = ` C ` ) ( ) ) ]", "snippet2": "df . loc [ df [ ` Letters ` ] = = ` C ` ]"}, {"intent": "converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix", "snippet1": "print ( ` \\ n ` . join ( [ 1 , 2 , 3 ] ) )", "snippet2": "list ( zip ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) )"}, {"intent": "get the type of `i`", "snippet1": "int ( len ( i ) )", "snippet2": "isinstance ( i , i )"}, {"intent": "determine the type of variable `v`", "snippet1": "int ( v [ : : - 1 ] )", "snippet2": "isinstance ( v , v )"}, {"intent": "determine the type of variable `v`", "snippet1": "int ( v [ : : - 1 ] )", "snippet2": "isinstance ( v , v )"}, {"intent": "determine the type of variable `v`", "snippet1": "int ( v [ : : - 1 ] )", "snippet2": "isinstance ( v , v )"}, {"intent": "determine the type of variable `v`", "snippet1": "int ( v [ : : - 1 ] )", "snippet2": "isinstance ( v , v )"}, {"intent": "get the type of variable `variable_name`", "snippet1": "isinstance ( variable_name )", "snippet2": "isinstance ( variable_name , int )"}, {"intent": "get the 5th item of a generator", "snippet1": "sum ( 1 for i in range ( 100 ) )", "snippet2": "json . load ( f )"}, {"intent": "Print a string `word` with string format", "snippet1": "print ( word . decode ( ` utf8 ` ) )", "snippet2": "print ( ` < unk > ` . format ( word ) )"}, {"intent": "join a list of strings `list` using a space ' '", "snippet1": "list . strip ( ` ` )", "snippet2": "print ( ` ` . join ( list ) )"}, {"intent": "create list `y` containing two empty lists", "snippet1": "y = [ [ ] for i in range ( 5 ) ]", "snippet2": "y = [ [ ] for i in range ( 3 ) ]"}, {"intent": "read a file 'C:/name/MyDocuments/numbers' into a list `data`", "snippet1": "data = [ line . split ( ` \\ n ` ) for line in open ( ` C : / name / My Documents / numbers ` ) ]", "snippet2": "data = [ line . rstrip ( ` \\ n ` ) for line in open ( ` C : / name / My Documents / numbers ` ) ]"}, {"intent": "delete all occurrences of character 'i' in string 'it is icy'", "snippet1": "` ` ` it is icy ` ` ` . join ( ` i ` )", "snippet2": "` ` ` it is icy ` ` ` . replace ( ` i ` , ` ` )"}, {"intent": "delete all instances of a character 'i' in a string 'it is icy'", "snippet1": "[ s . strip ( ) for item in it is icy . split ( ` i ` ) ]", "snippet2": "re . sub ( ` < unk > ` , ` ` , it is icy )"}, {"intent": "delete all characters \"i\" in string \"it is icy\"", "snippet1": "` ` ` it is icy ` ` ` . join ( ` i ` )", "snippet2": "` ` ` it is icy ` ` ` . translate ( ` ` . join ( c for c in it is icy if c not in c ) )"}, {"intent": "How to delete all instances of a character in a string in python?", "snippet1": "", "snippet2": "newstr = oldstr . replace ( ` M ` , ` ` )"}, {"intent": "Drop rows of pandas dataframe `df` having NaN in column at index \"1\"", "snippet1": "df . loc [ df [ ` 1 ` ] . isin ( [ ` 1 ` , ` 1 ` ] ) ]", "snippet2": "df . loc [ ( df [ ` 1 ` ] > 42 ) | ( df [ ` 1 ` ] > n ) ]"}, {"intent": "get elements from list `myList`, that have a field `n` value 30", "snippet1": "my List [ n . find ( ` n ` ) ! = 0 ]", "snippet2": "[ item . attribute for item in my List if item [ ` n ` ] = = n ]"}, {"intent": "converting list of strings `intstringlist` to list of integer `nums`", "snippet1": "[ x for item in intstringlist if nums ! = ` nums ` ]", "snippet2": "nums = [ int ( x ) for x in intstringlist ]"}, {"intent": "convert list of string numbers into list of integers", "snippet1": "[ int ( i ) for i in s . split ( ` , ` ) ]", "snippet2": "[ int ( x ) for x in map ( list , zip ( * integers ) ) ]"}, {"intent": "print \".\" without newline", "snippet1": "` ` ` ` ` ` . rstrip ( )", "snippet2": "print ( ` < unk > % s , < unk > ` % ( 1 , 2 , 3 ) )"}, {"intent": "round off the float that is the product of `2.52 * 100` and convert it to an int", "snippet1": "float ( round ( 10 , 2 ) )", "snippet2": "float ( round ( 2 . 52 * 100 ) )"}, {"intent": "Find all files in directory \"/mydir\" with extension \".txt\"", "snippet1": "os . listdir ( ` / mydir ` )", "snippet2": "results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]"}, {"intent": "Find all files in directory \"/mydir\" with extension \".txt\"", "snippet1": "os . listdir ( ` / mydir ` )", "snippet2": "results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]"}, {"intent": "Find all files in directory \"/mydir\" with extension \".txt\"", "snippet1": "os . listdir ( ` / mydir ` )", "snippet2": "results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]"}, {"intent": "plot dataframe `df` without a legend", "snippet1": "df . legend ( columns = ` True ` )", "snippet2": "df . legend ( frameon = False )"}, {"intent": "loop through the IP address range \"192.168.x.x\"", "snippet1": "f . ip ( list ( range ( 0 , list ( range ( 0 , set ( 192 . 168 . x . x ) ) ) ) ) )", "snippet2": "print ( socket . loads ( os . path . normpath ( ` 192 . 168 . x . x ` ) ) )"}, {"intent": "loop through the IP address range \"192.168.x.x\"", "snippet1": "f . ip ( list ( range ( 0 , list ( range ( 0 , set ( 192 . 168 . x . x ) ) ) ) ) )", "snippet2": "print ( socket . loads ( os . path . normpath ( ` 192 . 168 . x . x ` ) ) )"}, {"intent": "loop through the IP address range \"192.168.x.x\"", "snippet1": "f . ip ( list ( range ( 0 , list ( range ( 0 , set ( 192 . 168 . x . x ) ) ) ) ) )", "snippet2": "print ( socket . loads ( os . path . normpath ( ` 192 . 168 . x . x ` ) ) )"}, {"intent": "Sum the corresponding decimal values for binary values of each boolean element in list `x`", "snippet1": "map ( sum , zip ( * x ) )", "snippet2": "sum ( int ( x ) for x in x )"}, {"intent": "write multiple strings `line1`, `line2` and `line3` in one line in a file `target`", "snippet1": "line1 = ` \\ n ` . join ( [ c for c in line1 if line3 not in line3 ] )", "snippet2": "line2 . write ( ` \\ n ` . join ( line3 for i , v in zip ( line1 , target ) if c not in line2 ) )"}, {"intent": "Convert list of lists `data` into a flat list", "snippet1": "print ( map ( lambda x : map ( int , x . split ( ) ) , s ) )", "snippet2": "[ j for i in data for j in i ]"}, {"intent": "Print new line character as `\\n` in a string `foo\\nbar`", "snippet1": "print ( foo bar . find ( ` \\ n ` ) [ 1 ] )", "snippet2": "print ( ` \\ n ` . format ( foo bar ) )"}, {"intent": "remove last comma character ',' in string `s`", "snippet1": "s = s . replace ( ` , ` , ` ` )", "snippet2": "s = s . replace ( ` , ` , ` ` )"}, {"intent": "calculate the mean of each element in array `x` with the element previous to it", "snippet1": "r = map ( int , np . product ( x ) )", "snippet2": "np . dot ( x [ : , ( 2 ) ] , axis = 0 ) . mean ( )"}, {"intent": "get an array of the mean of each two consecutive values in numpy array `x`", "snippet1": "var_1 = np . mean ( 0 , 2 , axis = 1 )", "snippet2": "np . mean ( np . mean ( x [ : : - 1 ] ) , axis = 0 )"}, {"intent": "load data containing `utf-8` from file `new.txt` into numpy array `arr`", "snippet1": "arr = [ line [ i : i + arr ] for i in range ( 0 , len ( arr ) ) ]", "snippet2": "numpy . loadtxt ( open ( ` new . txt ` , ` rb ` ) , delimiter = ` utf - 8 ` , dtype = None )"}, {"intent": "reverse sort list of dicts `l` by value for key `time`", "snippet1": "sorted ( l , key = lambda x : x [ time ] )", "snippet2": "sorted ( l , key = lambda x : x [ ` time ` ] )"}, {"intent": "Sort a list of dictionary `l` based on key `time` in descending order", "snippet1": "sorted ( l , on = [ ` True ` , ` False ` ] , inplace = ` True ` )", "snippet2": "sorted ( l , key = lambda x : list ( x . values ( ) ) [ 0 ] , reverse = True )"}, {"intent": "get rows of dataframe `df` that match regex '(Hel|Just)'", "snippet1": "df [ re . path . join ( re . path . map ( str , ` ( Hel | Just ) ` ) , axis = 1 ) ]", "snippet2": "df . apply ( lambda x : x . startswith ( ` ( Hel | Just ) ` ) )"}, {"intent": "find the string in `your_string` between two special characters \"[\" and \"]\"", "snippet1": "` ` ` ` ` ` . join ( your_string . split ( ` [ ` ) for x in str ( ] ) . split ( ` ] ` ) )", "snippet2": "print ( ` ` . join ( re . findall ( ` \u00ab ( [ \\ \\ s \\ \\ S ] * ? ) \u00bb ` , your_string ) ) )"}, {"intent": "How to create a list of date string in 'yyyymmdd' format with Python Pandas?", "snippet1": "datetime . datetime . now ( ) . date ( )", "snippet2": "pd . to_datetime ( df . index . dt [ 0 ] , format = ` < unk > ` )"}, {"intent": "count number of times string 'brown' occurred in string 'The big brown fox is brown'", "snippet1": "sum ( isinstance ( x , ` brown ` ) for i in range ( 0 , len ( The big brown fox is brown ) , 2 ) )", "snippet2": "` ` ` The big brown fox is brown ` ` ` . count ( ` brown ` )"}, {"intent": "decode json string `request.body` to python dict", "snippet1": "urllib . parse . unquote ( ` request . body ` )", "snippet2": "json . load ( json , content_type = ` request . body ` )"}, {"intent": "download the file from url `url` and save it under file `file_name`", "snippet1": "f = open ( open ( url ) , ` url ` )", "snippet2": "file_name = wget . download ( file_name )"}, {"intent": "split string `text` by space", "snippet1": "[ x . strip ( ) for item in text . split ( ) ]", "snippet2": "re . split ( ` ` , text )"}, {"intent": "split string `text` by \",\"", "snippet1": "re . split ( ` , ` , text )", "snippet2": ", . split ( ` , ` )"}, {"intent": "Split string `line` into a list by whitespace", "snippet1": "[ x . strip ( ) for x in line . split ( ` , ` ) ]", "snippet2": "[ x . strip ( ) for x in line . split ( ` , ` ) ]"}, {"intent": "replace dot characters  '.' associated with ascii letters in list `s` with space ' '", "snippet1": "s . dot ( ` . ` )", "snippet2": "` ` ` ` ` ` . replace ( ` , ` , ` ` )"}, {"intent": "sort list `list_of_strings` based on second index of each string `s`", "snippet1": "list_of_strings . sort ( key = operator . itemgetter ( 1 ) )", "snippet2": "list_of_strings . sort ( key = lambda x : s . index ( x [ 0 ] ) )"}, {"intent": "call multiple bash function \u2018vasp\u2019 and \u2018tee tee_output\u2019 using \u2018|\u2019", "snippet1": "tee . vasp ( vasp = ` str_1 ` , tee = ` tee ` )", "snippet2": "os . system ( ` tee_output en_US ` )"}, {"intent": "eliminate all strings from list `lst`", "snippet1": "print ( [ item for item in lst if x not in k ] )", "snippet2": "[ k for k , v in [ x . split ( ` = ` ) for x in lst ] ]"}, {"intent": "get all the elements except strings from the list 'lst'.", "snippet1": "[ [ x for x in lst ] for item in zip ( * lst ) ]", "snippet2": "[ x for x in lst if x [ 2 ] = = 1 ]"}, {"intent": "Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`", "snippet1": "sorted ( list_to_be_sorted , key = lambda x : x [ x ] )", "snippet2": "sorted ( list_to_be_sorted , key = lambda x : trial_dict [ x ] )"}, {"intent": "sort a list of dictionaries `l` by values in key `name` in descending order", "snippet1": "l . sort ( key = [ ` True ` , ` False ` ] , reverse = ` True ` )", "snippet2": "sorted ( l , key = lambda i : list ( i . values ( ) ) [ 0 ] , reverse = True )"}, {"intent": "How do I sort a list of dictionaries by values of the dictionary in Python?", "snippet1": "sorted ( d , key = lambda x : x [ 1 ] [ 1 ] , reverse = ` True ` )", "snippet2": "sorted ( data , key = lambda x : list ( x . values ( ) ) [ 0 ] , reverse = True )"}, {"intent": "How do I sort a list of dictionaries by values of the dictionary in Python?", "snippet1": "sorted ( d , key = lambda x : x [ 1 ] [ 1 ] , reverse = ` True ` )", "snippet2": "sorted ( data , key = lambda x : list ( x . values ( ) ) [ 0 ] , reverse = True )"}, {"intent": "How to sort a Dataframe by the ocurrences in a column in Python (pandas)", "snippet1": "pd . Data Frame ( df . values [ 0 ] , axis = 1 )", "snippet2": "df . sort_values ( [ ` A ` , ` B ` ] , ascending = [ True , False ] )"}, {"intent": "join together with \",\" elements inside a list indexed with 'category' within a dictionary `trans`", "snippet1": "print ( max ( list ( trans . items ( ) ) , key = lambda x : x [ ` , ` ] ) )", "snippet2": "dict ( ( i , list ( trans . items ( ) ) [ i ] ) for i in trans )"}, {"intent": "concatenate array of strings `['A', 'B', 'C', 'D']` into a string", "snippet1": "print ( ` ` . join ( concatenate ( [ ` A ` , ` B ` , ` C ` , ` D ` ] ) ) )", "snippet2": "` ` ` ` ` ` . join ( [ ` A ` , ` B ` , ` C ` , ` D ` ] )"}, {"intent": "get json data from restful service 'url'", "snippet1": "json . dumps ( [ ` url ` , ` url ` ] ) [ 0 ]", "snippet2": "json . loads ( ` url ` )"}, {"intent": "Remove all strings from a list a strings `sents` where the values starts with `@$\\t` or `#`", "snippet1": "sents . strip ( )", "snippet2": "[ x for x in sents if x not in to_del ]"}, {"intent": "django filter by hour", "snippet1": "pd . to_datetime ( { ` str_2 ` : pd . Series ( var_0 . values [ : , ( ` None ` ) ] ) } , axis = 1 )", "snippet2": "datetime . datetime . now ( )"}, {"intent": "sort a list of dictionary `list` first by key `points` and then by `time`", "snippet1": "sorted ( list ( list . items ( ) ) , key = lambda x : time [ 1 ] [ ` points ` ] , reverse = ` True ` )", "snippet2": "list . sort ( key = lambda x : ( x [ ` points ` ] , x [ ` time ` ] ) )"}, {"intent": "convert datetime object `(1970, 1, 1)` to seconds", "snippet1": "datetime . datetime . combine ( datetime . datetime . now ( ) )", "snippet2": "datetime . datetime . strptime ( ` ( 1970 , 1 , 1 ) ` , ` % a , % d % b % Y % H : % M : % S % Z ` )"}, {"intent": "insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.", "snippet1": "re . extension ( ` long . file . name . jpg ` , _suff )", "snippet2": "suff . append ( [ ( x + _a ) for x in open ( ` long . file . name . jpg ` , ` _a ` ) ] )"}, {"intent": "reload a module `module`", "snippet1": "module = module ( ) . click ( )", "snippet2": "module = 1"}, {"intent": "Convert integer `number` into an unassigned integer", "snippet1": "int ( ` ` . join ( int ( i ) for i in number ) )", "snippet2": "int ( int ( number ) )"}, {"intent": "convert int values in list `numlist` to float", "snippet1": "[ float ( x ) for x in zip ( numlist , float [ 1 : ] ) ]", "snippet2": "[ float ( i ) for i in numlist ]"}, {"intent": "write dataframe `df`, excluding index, to a csv file", "snippet1": "df . write . csv ( ` True ` )", "snippet2": "df . to_csv ( ` file ` , index = False )"}, {"intent": "convert a urllib unquoted string `unescaped` to a json data `json_data`", "snippet1": "json_data = json . dumps ( [ x for x in unescaped . split ( ` , ` ) ] )", "snippet2": "parser . parse ( ` json_data ` )"}, {"intent": "Create a list containing all ascii characters as its elements", "snippet1": "list ( ` ` )", "snippet2": "[ ord ( c ) for c in range ( 10 ) ]"}, {"intent": "write `newFileBytes` to a binary file `newFile`", "snippet1": "with open ( new File Bytes , ` r ` ) as f : print ( new File Bytes . split ( ) )", "snippet2": "new File . write ( ` { 0 : 0b } ` . format ( new File ) )"}, {"intent": "python regex - check for a capital letter with a following lowercase in string `string`", "snippet1": "[ m . lower ( ) for c , letter in re . sub ( ` INSERT ` , string , re . UNICODE ) ]", "snippet2": "re . sub ( ` < unk > ` , ` ` , string ) . lower ( )"}, {"intent": "get the last key of dictionary `dict`", "snippet1": "dict [ - 1 ]", "snippet2": "print ( dict [ - 1 ] )"}, {"intent": "write line \"hi there\" to file `f`", "snippet1": "f . write ( ` hi there ` )", "snippet2": "f . write ( ` hi there ` )"}, {"intent": "write line \"hi there\" to file `myfile`", "snippet1": "myfile . write ( ` hi there ` )", "snippet2": "myfile . write ( ` hi there ` )"}, {"intent": "write line \"Hello\" to file `somefile.txt`", "snippet1": "os . system ( ` somefile . txt ` , ` somefile . txt ` )", "snippet2": "f . write ( ` Hello ` )"}, {"intent": "convert unicode string `s` to ascii", "snippet1": "ord ( s . decode ( ` unicode_escape ` ) )", "snippet2": "ord ( ` c ` )"}, {"intent": "Django get maximum value associated with field 'added' in model `AuthorizedEmail`", "snippet1": "Authorized Email . objects . filter ( select = ` added ` ) . order_by ( ` added ` )", "snippet2": "Authorized Email . objects . order_by ( ` ? ` ) [ ` added ` ]"}, {"intent": "Find all numbers and dots from a string `text` using regex", "snippet1": "re . all ( list ( str ( text ) ) , key = lambda x : map ( str , re . split ( ` \\ \\ d + ` , s ) ) )", "snippet2": "re . findall ( ` ( ( [ 0 - 9 ] + ) ( [ A - Z ] ) ) ` , ` 20M10000N80M ` )"}, {"intent": "python regex  to find all numbers and dots from 'text'", "snippet1": "print ( re . findall ( ` \\ \\ d + ` , re . compile ( ` text ` ) ) )", "snippet2": "` ` ` ` ` ` . join ( map ( str , re . findall ( ` [ A - Za - z ` ] + ` , text ) ) )"}, {"intent": "execute script 'script.ps1' using 'powershell.exe' shell", "snippet1": "os . system ( ` script . ps1 ` )", "snippet2": "subprocess . call ( [ ` script . ps1 ` , ` powershell . exe ` , script . ps1 ] )"}, {"intent": "Sort a list of tuples `b` by third item in the tuple", "snippet1": "sorted ( b , key = lambda x : ( - x [ 1 ] , x [ 0 ] ) )", "snippet2": "sorted ( b , key = lambda e : e [ 0 ] )"}, {"intent": "get a list of all keys in Cassandra database `cf` with pycassa", "snippet1": "[ k for k , v in enumerate ( cf ) if v = = 0 ]", "snippet2": "[ k for k , v in cf . items ( ) if v = = 1 ]"}, {"intent": "create a datetime with the current date & time", "snippet1": "datetime . datetime . now ( )", "snippet2": "datetime . datetime . now ( ) . strftime ( ` % Y - % m - % d ` )"}, {"intent": "get the index of an integer `1` from a list `lst` if the list also contains boolean items", "snippet1": "[ int ( x ) for x in zip ( * lst ) ]", "snippet2": "[ i for i in lst if i > 3 ]"}, {"intent": "subtract 13 from every number in a list `a`", "snippet1": "[ print ( x ) for x in zip ( * a ) ]", "snippet2": "[ ( x1 - x2 ) for x1 , x2 in zip ( a , 13 ) ]"}, {"intent": "choose a random file from the directory contents of the C drive, `C:\\\\`", "snippet1": "os . random . dirname ( os . random . getctime ( __file__ ) )", "snippet2": "random . choice ( os . path . expanduser ( ` C : \\ \\ ` ) )"}, {"intent": "get the highest element in absolute value in a numpy matrix `x`", "snippet1": "x [ np . all ( np . isnan ( x ) ) ]", "snippet2": "print ( max ( x , key = x ) )"}, {"intent": "Get all urls within text `s`", "snippet1": "s [ : : - 1 ]", "snippet2": "s . tag"}, {"intent": "match urls whose domain doesn't start with `t` from string `document` using regex", "snippet1": "` ` ` ` ` ` . join ( c for c in document if c not in c )", "snippet2": "re . findall ( ` find_element_by_xpath | , ` , document )"}, {"intent": "split a string `mystring` considering the spaces ' '", "snippet1": "mystring . split ( ` ` ) [ : - 1 ]", "snippet2": "[ x . strip ( ) for x in mystring . split ( ` ` ) ]"}, {"intent": "open file `path` with mode 'r'", "snippet1": "r = open ( path , ` r ` )", "snippet2": "f = open ( ` r ` , ` r ` )"}, {"intent": "sum elements at the same index in list `data`", "snippet1": "sum ( data [ i ] for i in data )", "snippet2": "map ( sum , zip ( * data ) )"}, {"intent": "add a new axis to array `a`", "snippet1": "a = a [ : : - 1 ] + 1", "snippet2": "a [ ( - 1 ) , : ] = a"}]